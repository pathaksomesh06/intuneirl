
[{"content":"","date":"28 June 2024","externalUrl":null,"permalink":"/","section":"Blowfish","summary":"","title":"Blowfish","type":"page"},{"content":"","date":"28 June 2024","externalUrl":null,"permalink":"/tags/mac/","section":"Tags","summary":"","title":"Mac","type":"tags"},{"content":"","date":"28 June 2024","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"The integration of Secure Enclave with Platform Single Sign-On (PSSO) advances security-usability balance. This fusion not only enhances the protection against unauthorised access but also elevates the user authentication experience to new heights. This blog post will explain Secure Enclave, its role in bolstering PSSO, and how to use it to secure our macOS digital lives. Stay tuned as we embark on this deep dive into enhancing Platform Single Sign-On with the unparalleled security of the Secure Enclave. The future of authentication is here, and it's more secure and user-friendly than ever before.\nUnderstanding Secure Enclave and PSSOBefore we dive into the synergy between Secure Enclave and Platform Single Sign-On (PSSO), let's establish a foundational understanding of these two critical components in the macOS security landscape.\nWhat is Secure Enclave?At its core, the Secure Enclave is a revolutionary hardware-based security feature embedded within Apple's silicon chips. It acts as a secure vault, designed to protect cryptographic keys and sensitive data involved in encryption, decryption, and authentication processes. The Secure Enclave is isolated from the main processor, ensuring that the data it handles is kept away from the reach of both the operating system and applications. This isolation provides a robust layer of security, even if the main system is compromised.\nIt follows the same design principles as the SoC — a Boot ROM to establish a hardware root of trust, an AES engine for efficient and secure cryptographic operations, and protected memory. Although the Secure Enclave doesn’t include storage, it has a mechanism to store information securely on attached storage separate from the NAND flash storage that’s used by the Application Processor and operating system.\nI know, this picture is hard to understand. Don't worry about it. I'll make it easy for you. 😄\nKey features of the Secure Enclave include:\nHardware Isolation: Ensures sensitive operations are performed in a secure environment, isolated from potentially compromised software.Biometric Data Protection: Manages Touch ID and Face ID operations, storing biometric information in an encrypted format that never leaves the device.Cryptographic Key Management: Generates and stores cryptographic keys securely, facilitating secure transactions and communications.Understanding Platform Single Sign-On (PSSO)Platform Single Sign-On (PSSO) simplifies the authentication process across multiple services and applications. By logging in once, users gain access to a suite of applications without the need to re-authenticate for each service. PSSO enhances user experience by reducing password fatigue and streamlining access, all while maintaining a secure authentication process.\nLooking for a deep dive into PSSO? This link holds all the info 👇\nThe Apple Connect: Bridging Identity Services with SSOApple’s integration of IdP with SSO is a game-changer in digital identity and access management. This innovative merge offers a seamless, secure user experience. It simplifies authentication across various services, enhancing productivity in enterprise environments.Intune - In Real LifeSomesh PathakThe Synergy Between Secure Enclave and PSSOWhile PSSO offers a streamlined authentication process, integrating it with the Secure Enclave's hardware-based security capabilities significantly enhances its security posture. The Secure Enclave ensures that the keys and credentials used in the PSSO process are stored and managed securely, protecting them from external threats and unauthorized access. This integration not only bolsters security but also leverages biometric authentication methods to provide a more user-friendly experience.\nElevating Security with Hardware-Based AuthenticationThe Secure Enclave provides a secure platform for storing cryptographic keys and performing critical operations involved in user authentication. By integrating PSSO with the Secure Enclave, authentication credentials, such as cryptographic keys and biometric data, are managed in a hardware-isolated environment. This significantly reduces the attack surface, as sensitive data is not exposed to the operating system or applications that could be compromised.\nOne of the most notable benefits of this integration is the utilization of biometric authentication methods, such as Touch ID and Face ID, for PSSO. These methods offer a user-friendly alternative to traditional passwords, which are susceptible to phishing attacks and often result in \"password fatigue\" among users. The Secure Enclave processes and authenticates biometric data within its isolated environment, ensuring that this data never leaves the device in an identifiable form.\nStreamlining User AuthenticationThe synergy between Secure Enclave and PSSO also manifests in the streamlined authentication process it offers to users. Once a user is authenticated via Touch ID or Face ID, the Secure Enclave verifies the authentication and allows PSSO to proceed, granting the user access to multiple services and applications without the need to enter additional passwords. This seamless process not only enhances user experience but also encourages the adoption of stronger security practices, as users are more likely to engage with systems that are both secure and convenient.\nProtecting Identity and Access ManagementIn corporate environments, where identity and access management (IAM) are crucial, integrating Secure Enclave with PSSO provides a robust solution for securing employee access to resources. This level of security is particularly important in scenarios where access control plays a critical role in protecting organisational data and resources.\nThe Future of AuthenticationThe integration of Secure Enclave and PSSO points towards the future of authentication technologies — one where security and convenience do not have to be mutually exclusive. As this technology continues to evolve, we can expect even more sophisticated security mechanisms that further minimize the reliance on passwords and enhance the user experience. Step-by-Step Guide: Implementing Secure Enclave with PSSOOn Apple devices managed by a Mobile Device Management (MDM) system for example - Microsoft Intune, \"com.apple.extensiblesso\" plays a key role in simplifying logins. It's a configuration profile that enables a feature called Extensible Single Sign-On (SSO). This means you only need to log in once, and then you'll automatically be signed in to multiple apps and websites without needing to enter your credentials repeatedly. This profile works alongside extensions created by identity providers, ensuring a seamless login experience. Additionally, MDM administrators can customize various settings within this profile, allowing them to control which apps are covered and configure security options.\n💡Why I am using Secure Enclave–backed key authentication?With this method, a user who logs in to their Mac can use a Secure Enclave–backed key to authenticate with the IdP without a password. The Secure Enclave key is set up with the IdP during the user registration process. In simple terms, it is like Windows Hello for Business 😄Let's configure the PSSO profile using Secure Enclave–backed key authentication.\nSign in to the\u0026nbsp;Microsoft Intune admin center.Select\u0026nbsp;Devices\u0026nbsp;-\u0026gt;\u0026nbsp;macOS -\u0026gt; Configuration\u0026nbsp;Profile -\u0026gt;\u0026nbsp;Create -\u0026gt; New Policy -\u0026gt; Select\u0026nbsp;Settings Catalog.Select\u0026nbsp;Create.In\u0026nbsp;Basics, enter the name \u0026amp; description for the profile.💡Use \"Shared Device Key\" only if you want to create user at login.Assign the profile to the required group.Enrolment into PSSO With Secure Enclave KeyLet's look how the PSSO looks different when using Secure Enclave Key based authentication.\n💡Notice the difference when using PSSO with Secure Enclave Key Authentication? It uses hardware-based security i.e. it prompts you to use Touch ID to authenticate.Verifying Secure Enclave with PSSOWhile the Secure Enclave's operations are securely abstracted away from direct user and developer interaction, there are steps you can take to ensure that your Platform Single Sign-On (PSSO) setup is properly utilizing Secure Enclave for enhanced security. Here's how to verify this integration:\nRegistration Steps:The first step to identify the difference is the registration. As contrary to password based authentication, Secure Enclave Key authentication uses hardware-based authentication. The PSSO payload uses Touch ID for authentication.\nVerify PSSO Registration:Verify Secure Enclave Key Authentication: An indication of this method being employed is the lack of a traditional password prompt during authentication. Instead, authentication might involve biometric data (such as Touch ID) or a device passcode.ConclusionThe integration of Secure Enclave with Platform Single Sign-On (PSSO) represents a significant stride forward in the quest for secure and seamless authentication on macOS. By leveraging the robust hardware-based security features of the Secure Enclave, users and organizations can enjoy a higher level of protection for their authentication credentials, without sacrificing the convenience and efficiency that PSSO offers.\nThat's all for this week, thank you for joining me on this deep dive into enhancing PSSO with Secure Enclave on macOS. Stay tuned for more exciting Intune stories.\n","date":"28 June 2024","externalUrl":null,"permalink":"/posts/say-bye-felicia-to-passwords-secure-enclave-takes-mac-sso-to-the-next-level/","section":"Posts","summary":"The integration of Secure Enclave with Platform Single Sign-On (PSSO) advances security-usability balance.","title":"Say Bye Felicia to Passwords: Secure Enclave Takes Mac SSO to the Next Level","type":"posts"},{"content":"","date":"28 June 2024","externalUrl":null,"permalink":"/tags/security/","section":"Tags","summary":"","title":"Security","type":"tags"},{"content":"","date":"28 June 2024","externalUrl":null,"permalink":"/tags/sso/","section":"Tags","summary":"","title":"SSO","type":"tags"},{"content":"","date":"28 June 2024","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":" Overview Let\u0026#8217;s discuss a new way to distribute apps to a limited number of individuals on the Apple App Store. The \u0026#8220;unlisted app\u0026#8221; feature is much-anticipated because it allows business owners to get their business apps on employees\u0026#8217; devices without spending too much time or money.\nRecap Last week, we discussed the different distribution methods and when to use each, depending on your distribution needs. All these methods were either distributing the app for broad public interest or enterprise users. But what if the requirement was to distribute an app to a more limited audience that includes both unmanaged and managed users? The solution to this is the new way of distributing the apps called \u0026#8220;Unlisted Apps\u0026#8220;\niOS App Distribution – From Private Apps to Enterprise Apps Unlisted Apps Unlisted apps do not appear in App Store categories, recommendations, charts, search results, or other listings. They can also be accessed via Apple Business Manager. Unlisted distribution generally includes apps for partners, employees, resources, or any other department. To submit and manage the app on App Store Connect, you use your existing individual or organization developer program account.\nThe app can be paid or free, and it, like any other app, must be reviewed before it can be published in the public store or as a custom app. Depending on the requirements, you can make your app available in all regions where the App Store is available or limit it to specific regions.\nThe major difference is that your app is not searchable, and end users can only access it if they have the unique app URL. When browsing the standard App Store, it also does not appear in the \u0026#8220;More by this developer\u0026#8221; section.\nRemember that while in-app purchases are available for unlisted apps, they are not supported for managed app distribution via Apple School Manager.\nUnlisted apps provide you with an App Store page and a URL that you can share as needed. This allows you to create and deploy an app that would otherwise be ineligible for the App Store due to a limited audience or specific functionality.\nUnlisted Apps are a great solution if you need to deploy an app to a small group of unmanaged and managed users.\nYou can send the URL to unmanaged users, and for managed audiences, you can assign app licenses through Apple Business Manager or Apple School Manager and MDM, resulting in a managed app.\nApproval is requested, reviewed, and granted on a per-app basis.\nOur All-Star Grocery App Now, let\u0026#8217;s discuss the grocery app that we developed in our previous post, as well as some specific examples of when you\u0026#8217;d use unlisted apps. Assume you\u0026#8217;re creating this app for part-time employees to use on their devices or for dealers.\nUnlisted apps would be an excellent choice in this case because the app is intended for a specific audience: employees who do not use managed devices. So, suppose you want to distribute a specific version of the app or the app to your dealerships. You must do this through many separate business entities, possibly using a mix of managed and unmanaged devices.\nUnlisted apps allow you to easily and effectively distribute this app to third parties. Suppose you want to empower your dealership network in Sweden, so new dealers have an excellent service experience with a strong emphasis on customer service.\nThe app provides key features such as alerts when an order arrives, insight into matching orders, and prompt reminders to make prompt follow-up calls. Because this app is intended for a specific audience — dealership employees — you use unlisted apps to publish it through the App Store without making it searchable. You will share the link with their dealerships, who then provide it to their employees (delivery boys).\nUnlisted apps are a new option but do not replace existing distribution methods. If your app is intended for the general public, keep it in the App Store. Custom apps are likely better if you or your customers only deploy to employees. When existing distribution methods aren\u0026#8217;t a good fit for you or your customers, unlisted apps are an option.\nDistribution Methods There are two methods for distributing unlisted apps: Sharing the app URL using email, website, or other private methods. Once the user gets the URL, they are directed to the App Store, where they will download and install the app just as they usually would with an App Store app. The second method is managed distribution through Apple Business Manager and Apple School Manager. To begin, you must first submit a request for unlisted app distribution. This is a conditional approval process, and your app will be reviewed to ensure it meets the requirements. You can request new apps once you have an app record with the \u0026#8220;Prepare for Submission\u0026#8221; or later status.\nSubmit the request and include information about your app if your app has already been approved for public download on the App Store. If an existing Public app meets the criteria and would be better suited to unlisted app distribution, you can convert it to unlisted.\nSuppose your app was previously approved for private distribution. In that case, you must create a new app record in App Store Connect, upload your binary, and change the distribution method to Public before completing the request form.\nIf you have multiple apps, you must submit a separate request for each one. The distribution option in App Store Connect will change when your app is approved for unlisted app distribution. When the distribution method is set to Unlisted, it will be retained for all future app updates.\nIf this is an existing app, the app will now be unlisted. If this is a new app, you will proceed with app submission as usual. Because you are providing your app to a specific audience or market segment, include those details in the App Review notes.\nWrapping Up To summarize, you must decide how your app will be distributed to end users. If your app is of broad public interest, choose the public App Store. Customers in the enterprise and education sectors can deploy these as managed apps to their employees and staff. Choose custom apps when you want to distribute the app privately to a small group of customers or internal employees who will manage it for their end users.\nUnlisted Apps The Apple Developer Enterprise Program is only for the internal use and distribution of proprietary apps and specific use cases that are not adequately addressed with public apps on the App Store or custom apps.\nref: https://developer.apple.com/\n","externalUrl":null,"permalink":"/posts/unlisted-app-a-boon-for-enterprises/","section":"Posts","summary":"Overview Let\u0026#8217;s discuss a new way to distribute apps to a limited number of individuals on the Apple App Store.","title":"“Unlisted App” - A Boon for Enterprises","type":"posts"},{"content":"","externalUrl":null,"permalink":"/posts/untitled/","section":"Posts","summary":"","title":"(Untitled)","type":"posts"},{"content":"Mobile device management just got smarter. In today's fast-changing digital world, keeping devices secure and under control is crucial. Microsoft Intune has always been a leader in mobile device management (MDM) and mobile application management (MAM), giving companies strong tools to handle work devices and apps. But with the addition of Microsoft Security Copilot, things are changing for the better. This integration combines Intune's proven strengths with Security Copilot's cutting-edge AI, completely revamping how we think about device management.\nImagine a future where AI not only makes things more secure but also simplifies management tasks, creating a smooth and secure experience for everyone using work devices. That's the promise of this integration. By taking this step, Microsoft is raising the bar for device management. They're giving IT professionals smarter, more efficient tools to handle the complex challenges of today's mobile world.\nRevolutionizing Security and Management with AI IntegrationIntune just got a major AI upgrade. Building on its strong foundation, Intune now works with Microsoft Security Copilot to create a whole new way of managing devices. This uses the power of generative AI, a fancy way of saying \"smart AI that can make things.\" This combo adds advanced security smarts to Intune. It can find threats in real-time and even suggest policies to fix them automatically. For IT folks, this means way less busywork keeping devices safe.\nCopilot for Security's AI is like a super-security analyst, spotting risks and compliance issues before they become big problems. This lets you be proactive instead of just reacting to threats. Plus, Copilot can understand plain English! Admins can ask questions about complex data and get answers in regular words, not computer code. This makes security info easier to understand for everyone, no matter their tech skills. It also helps make better decisions because the information is clear and actionable.\nThe bottom line? This isn't just about better security. By working together, Microsoft Security Copilot and Intune are changing the game for managing mobile devices. Imagine a future where technology uses cutting-edge intelligence to automatically adapt to the needs of your digital workplace, making everything more secure and efficient. That's the future this powerful duo is building.\nLet's get started then!\nCopilot for SecurityThe wait is over! Microsoft launched Copilot for Security on April 1, 2024, marking a significant step forward in AI-powered device management. Announced roughly a year ago, this innovative solution is now available to security leaders and their teams, empowering them to leverage the power of generative AI for enhanced mobile security. In this blog, we'll delve into how Copilot for Security integrates with Intune, ushering in a new era of device management.\nPay as you go: Microsoft Copilot for Security uses a consumption-based pricing model, where you pay $4 per hour of usage for security compute units. This means you only pay for what you use, offering flexibility for organizations of all sizes. While there are currently no discounts for pre-purchase or high volume usage, Microsoft might have chosen this approach for a few reasons:\nFaster Launch:\u0026nbsp;A simpler pricing model likely streamlined the launch for Microsoft and potentially simplifies adoption for customers, avoiding confusion with existing licensing structures.Generative AI Pricing Evolution:\u0026nbsp;The cost of generative AI solutions is still evolving across the industry. This model allows Microsoft to adapt pricing as the technology matures and user needs become clearer.\nLicensing requirements:Before you can access Security Copilot, it's best that your environment has the following licenses deployed:\nMicrosoft Entra ID P1 or P2 (formerly known as Azure Active Directory Premium P1 or P2) license for role assignments to users.Microsoft Defender for Endpoint P2 licenses.Microsoft Security Copilot Access.Onboarding to Microsoft Security CopilotStep 1: Assign rolesTo access the Security Copilot portal, configure settings, or perform tasks, appropriate permissions must be assigned. In this section, you're guided on assigning roles for users in your organization to grant them access to Security Copilot. These steps are done in the\u0026nbsp;Microsoft Entra admin center.\nRequired roleOne of the following roles is required to perform this task in the Microsoft Entra admin center:\nGroups AdministratorUser AdministratorPrivileged Role AdministratorGlobal AdministratorAssign roles to usersUsers must be assigned a global administrator, global reader, security administrator, security operator, or a security reader role to access Security Copilot.\nNavigate to the\u0026nbsp;Users section, then assign roles to users. Step-by-Steps to configureIn the Microsoft Azure portal, you search for “copilot”.Click on “Create\"Choose a resource group, Capacity name, and prompt evaluation location.💡You can also configure these settings by directly accessing\u0026nbsp;Microsoft Copilot for securityOnce it is provisioned, navigate to\u0026nbsp;https://securitycopilot.microsoft.com where the setup continues.Access Microsoft Security Copilot\u0026nbsp;Use admin credentials when accessing Security Copilot to access the appropriate capabilities.\nSign in to\u0026nbsp;https://securitycopilot.microsoft.com\u0026nbsp;with your credentials.\u0026nbsp;Select\u0026nbsp;Sign in\u0026nbsp;and proceed to authenticate with your admin credentials.\u0026nbsp;When you first sign in to Microsoft Security Copilot, a set of screens guides you through a series of options. You've previously configured capacity within Azure, which is now available for selection here.\nConfirm your geography by selecting the appropriate location.\nYou can opt-in to help improve Copilot by sending diagnostic data to Microsoft.\nNext, you will see who has access to Copilot.\nOnce you have completed all these steps, your Copilot instance is ready to use, and you can start using it.\nUse Microsoft Copilot for Security with IntuneGreat news for organizations already using Microsoft Intune! Integrating Copilot for Security within the same tenant unlocks a powerful new way to view your managed devices. Copilot acts as a window, providing detailed information about devices, apps, compliance policies, and assigned configurations – all directly from your Intune data.\nThis goes beyond basic data access. Copilot analyzes your Intune information, generating insights that can significantly improve your security posture. By leveraging built-in features and prompting Copilot with specific questions, you can gain valuable understanding of your device landscape and proactively address potential issues.\nIntegrate Security Copilot with Microsoft IntuneGo to\u0026nbsp;Microsoft Copilot for security\u0026nbsp;and sign in with your credentials.Intune must be enabled by default. To confirm, select\u0026nbsp;Add-ins\u0026nbsp;(bottom left):In\u0026nbsp;My Add-ins, check\u0026nbsp;that Microsoft Intune is enabled. Closes\u0026nbsp;Add-ins.Please enter your prompt.ConclusionThis is just the tip of the iceberg! Having only launched today, the possibilities for Copilot for Security integrated with Intune are endless. As we explore this powerful duo further, we're sure to discover even more exciting use cases that revolutionize device management and security.\n","externalUrl":null,"permalink":"/posts/microsoft-copilot-for-security-preview-and-intune/","section":"Posts","summary":"Mobile device management just got smarter.","title":"A New Era of Device Management: Exploring Microsoft Copilot for Security with Intune","type":"posts"},{"content":"Hello and welcome to my space on the internet! I’m Somesh Pathak, an IT professional based in the beautiful Netherlands. My journey in the tech world has been driven by a relentless passion for understanding the intricacies of mobile device management, with a particular focus on Microsoft Intune. This blog is a canvas for my thoughts, experiences, and the lessons I’ve learned along the way.\nMy Professional PathI embarked on my IT career over 15 years ago. Throughout this time, I’ve navigated through various roles, each offering a unique set of challenges and learning opportunities. My specialization in Microsoft Intune has not only allowed me to help organizations streamline their mobile device management but has also provided me with a platform to share my expertise with a broader audience. Here, I delve into the latest trends, share troubleshooting tips, and explore the future of mobile device management.\nBeyond the KeyboardWhen I’m not buried in tech specs or experimenting with new Intune configurations, you’ll find me indulging in my other passions. Traveling is my escape; it’s a chance to see the world through a new lens, gather inspiration, and meet people from all walks of life. I’m an avid blogger, not just about technology but also sharing stories from my travels and the moments that shape my perspective.\nFamily is my cornerstone. The time spent with them is precious and grounding, providing a much-needed balance to my tech-focused professional life. Whether it’s a quiet evening at home or exploring new destinations together, it’s these moments that truly matter.\nLet’s ConnectThis blog is more than just a collection of posts; it’s a growing community. Feel free to reach out or connect with me on social media. Let’s embark on this journey together, sharing knowledge, experiences, and the occasional tech tip.\n","externalUrl":null,"permalink":"/posts/about/","section":"Posts","summary":"Hello and welcome to my space on the internet!","title":"About Me","type":"posts"},{"content":" In previous blogs, we discussed how to\u0026nbsp;register for DUNS\u0026nbsp;and\u0026nbsp;onboarding in ABM; continuing with that, the next part is purchasing, distributing \u0026amp; managing the VPP apps.\nWhy should we use ABM for App Management \u0026amp; Distribution? By using Apple Business Manager (ABM), an organization can easily purchase and manage apps \u0026amp; books from Apple App Store. It can leverage any MDM solution to distribute the apps \u0026amp; books to their end users or devices even when the app store is disabled on the device!\nBut before that, let\u0026#8217;s understand the different roles in ABM.\nUsers and Roles in ABM:\nThere are different ways of creating or importing users in Apple Business Manager; e.g.\nYou can create users manually in ABM\u0026nbsp;You can import users from SCIM from Azure ADYou can import users from Google WorkspaceYou can federate authentication with your AAD or Google Workspace For each user account, there is a user state also depending upon its status.\nNewActiveDeactivatedLocked P.S: When manually creating a user in ABM, it is mandatory to provide an\u0026nbsp;e-mail address\u0026nbsp;and\u0026nbsp;assign a role\u0026nbsp;to it. The e-mail address should not have been used with any other Apple services.\nRoles in Apple Business Manager: Every user in ABM must have at least one role, and each role has certain privileges. The below table will help you with a basic idea of the roles available in ABM:\nThe privileges (rights) with roles in ABM are:\nPeople PrivilegesDevice PrivilegesContent PrivilegesStaff PrivilegesBasic Privileges Add a new user in ABM: 1. Log in to\u0026nbsp;Apple Business Manager\u0026nbsp;with a user that has an Administrator role.\n(The user signing up for the ABM for the first time by default becomes the first administrator in ABM).\n2. Click\u0026nbsp;Users\u0026nbsp;in the left sidebar, click the\u0026nbsp;Add\u0026nbsp;button, enter the required details, and click Save.\nCreate sign-in information for the new user:\n1. Sign in to Apple Business Manager and click Users, then search for the newly created\u0026nbsp;user.\n2. Select the user from the list and click Create Sign-in\u0026nbsp;to create new sign-in\u0026nbsp;information for the new user.\n3. Select how you want to send the information to the user. You can either download the\u0026nbsp;information as a pdf or CSV, or you can e-mail the information to the user.\nWe have created users in ABM and assigned required roles to the user, so now let us discuss how to purchase \u0026amp; distribute content.\nAs a best practice, you should always assign apps to devices instead of users, avoiding requiring a user to use an Apple ID on the device. However, if you are distributing enterprise books, they can’t be assigned to devices.\u0026nbsp;\nYou can purchase apps and books in Apple Business Manager and can also purchase Custom Apps from developers as B2B apps.\nNote:\u0026nbsp;You must set up your payment method before adding apps, even if they are free.\n\u0026nbsp;Search and Purchase App in ABM\n\u0026nbsp;1. Log in to Apple Business Manager and click\u0026nbsp;Apps and Books, then search for an app or\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;book in the search field.\u0026nbsp;\n2. \u0026nbsp;Select the app or book in the search results list that you want to purchase.\n3. Select the\u0026nbsp;location\u0026nbsp;where the app or book licenses will be initially assigned.\n4. Enter the number of licenses, and if necessary, change the payment method, then click Buy\n\u0026nbsp;5. Availability of app licenses depends on the amount purchased. If you purchased:\n5000 licenses or fewer, they are immediately processed5001 to 19,999 licenses, they are processed daily after 1:00 p.m., Pacific time20,000 licenses or more, they are processed daily after 4:00 p.m., Pacific time Alternatively, you can force sync your VPP token in Intune to immediately sync for the purchase to be processed.\n\u0026nbsp;Assign a Volume-Purchased App \u0026nbsp;Once the apps are synced to your Intune tenant, you can start distributing them. Follow the below steps to distribute VPP apps:\n1. Log in to\u0026nbsp;Microsoft Endpoint Manager Portal.\u0026nbsp;\n2. Select\u0026nbsp;Apps\u0026nbsp;\u0026gt;\u0026nbsp;All apps.\n3. On the list of apps pane, choose the app you want to assign and then choose\u0026nbsp;Properties\u0026nbsp;\n4. On the\u0026nbsp;Assignments\u0026nbsp;tab, choose whether the app will be\u0026nbsp;Required\u0026nbsp;or\u0026nbsp;Available for enrolled devices.\n5.\u0026nbsp;Assing it to\u0026nbsp;the\u0026nbsp;user or device groups you want to assign the app.\n(Photo Credits: Apple.com)\n","externalUrl":null,"permalink":"/posts/add-distribute-manage-vpp-apps/","section":"Posts","summary":"In previous blogs, we discussed how to\u0026nbsp;register for DUNS\u0026nbsp;and\u0026nbsp;onboarding in ABM; continuing with that, the next part is purchasing, distributing \u0026amp; managing the VPP apps.","title":"Add, Distribute \u0026 Manage VPP Apps","type":"posts"},{"content":" In the last few days, many people have complained about the strange behavior of their Android Enterprise Devices, wherein the user\u0026#8217;s devices suddenly reboot on their own. I also faced the same issue with one of my customers, and it was hard to find what made the devices go crazy. Continue reading this blog post to find the reason for the sudden restarts with the steps to fix them.\u0026nbsp;\nAs these devices are being managed through Intune, so first thought was to check for the maintenance window in Intune for the impacted profiles.\nThis looks good as it is expected that the device can reboot between 00:00 \u0026amp; 05:00, but the problem was that devices were unexpectedly rebooting outside this window. The problem started with only a couple of users, and eventually, every user reported the sudden restarts, and we were clueless.\u0026nbsp;\nGet device logs When you are experiencing anything strange with your devices, the first thing you should do is export the logs.\u0026nbsp;\ndumpstate Logs:\n1. In the Phone Application, enter *#9900#\n2. Set the Debug Level to Mid.\n3. Wait for the device to restart.\n4. Open the app you want to debug and reproduce your issue.\n5. After reproducing your issue, enter *#9900# again in the Phone Application\n6. Select Run dumpstate/logcat\n7. Select Copy to sd card Navigate to the log directory created on the device using\u0026nbsp;the My Files app or a Windows PC with a USB cable connection.\n8.\u0026nbsp;After you have finished, follow steps 1-3 again, delete dumpstate/logcat and return the Debug Level to low.\nADB Logs:\nStep 1: Enable developer options on the Android device:\nGo to Settings -\u0026gt;\u0026nbsp;About phone.Tap the Build number button\u0026nbsp;seven (7) times.Return to the previous screen to find Developer Options at the bottom. The Developer Options screen might be located or named differently on some devices.Open the\u0026nbsp;Developer Options\u0026nbsp;page and scroll down until you find USB Debugging and toggle it to\u0026nbsp;Enabled.Once complete, connect a USB cable from your PC to the device. If this is the first time the device has been connected, a popup will appear asking if it’s\u0026nbsp;OK\u0026nbsp;to allow debugging. Select\u0026nbsp;Allow\u0026nbsp;and select the box to\u0026nbsp;Always allow.This will enable a connection between your computer and the connected Android device. Step 2: Collect the ADB log through a windows machine:\nNavigate to\u0026nbsp;https://developer.android.com/studio/releases/platform-tools#downloads.Select Download SDK platform -\u0026gt;\u0026nbsp;Tools for Windows.Unzip\u0026nbsp;the downloaded package.Open a\u0026nbsp;Command Prompt as administrator\u0026nbsp;(Run as administrator).Type cd \u0026#8220;\u0026lt;location of unzipped package\u0026gt;.\u0026#8221; It should look something like this: \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;cd \"C:\\Firefox\\Other\\platform-tools_r30.0.5-windows\\platform-tools\"\n6. Run the following command in the ADB console to enable verbose logging (single line):\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;adb logcat -G 32M; adb shell setprop persist.log.tag.dpcsupport VERBOSE; adb shell\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;setprop persist.log.tag.clouddpc VERBOSE; adb shell setprop persist.log.tag.Finsky\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;VERBOSE; adb shell setprop persist.log.tag.Auth VERBOSE; adb shell setprop\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;persist.log.tag.Volley VERBOSE; adb shell setprop persist.log.tag.PackageManager\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;VERBOSE;\n7. adb devices \u0026lt;\u0026#8212;-\u0026nbsp;Copy the device ID.\n8. Run adb -s \u0026#8220;\u0026lt;paste device id\u0026gt;” bugreport \u0026nbsp;\u0026lt;path for copying the bug report on your PC\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;adb -s abc123xyz bugreport E:\\bugreport\nRead Device Logs Android bug reports are not that hard to read as they are in .txt format. The logs exported in the previous step will have information like app crashes, deadlocks, activities, memory \u0026amp; CPU utilization, power consumption, etc.\u0026nbsp;\nFor now, we will only focus on\u0026nbsp;ANR (Application Not Responding) \u0026amp; Deadlocks and Power,\u0026nbsp;as this will give us the details of the apps that are crashing and causing unexpected system reboots.\u0026nbsp;\nRoot Cause: From these logs, you will identify that \u0026#8220;vending(Play Store)\u0026#8221;\u0026nbsp;is causing most of the reboots. On a detailed analysis of the logs, you will also see \u0026#8220;mainline_update\u0026#8221;\u0026nbsp;as a reboot cause. This \u0026#8220;mainline_update\u0026#8221;\u0026nbsp;is a request for a reboot due to an update of the Google main line, which is triggered by \u0026#8220;vending(Play Store)\u0026#8221;\u0026nbsp;when there is a pkg to update.\nThere were\u0026nbsp;EIGHT (8) mainline APKs\u0026nbsp;for which update failed, then rollback occurred, and this caused a reboot.\u0026nbsp;That\u0026#8217;s why reboot occurs.\u0026nbsp;\nSolution: The best way to get this fixed is to add the identified problematic mainline APKs in Intune by creating these applications in Intune and deploying them to affected devices.\u0026nbsp;It could be that, in your case, different APKs are causing this.\u0026nbsp;\n\u0026nbsp;[ mainline APKs identified in the ANR logs]\nEnable a System App in Intune Let\u0026#8217;s add these APKs as system apps and deploy them to the group of affected devices:\n1. Sign in to the\u0026nbsp;Microsoft Endpoint Manager admin center.\n2. Select\u0026nbsp;Apps\u0026nbsp;\u0026gt;\u0026nbsp;All apps\u0026nbsp;\u0026gt;\u0026nbsp;Add.\n3. In the\u0026nbsp;Select app type\u0026nbsp;pane, select Android Enterprise System App from the available options, and click\u0026nbsp;Select.\u0026nbsp;\n4. On the\u0026nbsp;App information\u0026nbsp;page, add the app details:\nApp Name: Enter the name of the app.Publisher: Enter the name of the publisher of the app.Package Name: Enter a package name. Intune will validate that the package name is valid. 5. Assign the app to the required group.\n6. Repeat the same steps for adding the mainline APKs.\nThis will not install any app but will whitelist the mentioned APKs, and the devices should no longer reboot on their own. Once you have verified that this is working, you can create a dynamic group of all Android Enterprise Devices and assign these apps to that group).\u0026nbsp;\n","externalUrl":null,"permalink":"/posts/android-enterprise-device-reboots-on-its-own/","section":"Posts","summary":"In the last few days, many people have complained about the strange behavior of their Android Enterprise Devices, wherein the user\u0026#8217;s devices suddenly reboot on their own.","title":"Android Enterprise Device Reboots On Its Own!","type":"posts"},{"content":" Welcome to the new site! It was the reason I didn\u0026#8217;t post anything, as I was busy building up the new site and migrating content to it. With this post, I continue to look into the issues faced with fully managed Android Enterprise devices. Like any other enterprise, we also enroll and distribute these devices to our user base. However, since we started rolling out these devices, the feedback from the user community was not that good.\nUsers reported that they are not happy with the performance of their phones. M365 apps like Outlook, Teams, and PowerApps were opening very slowly. Initially, we assumed a particular phone model was slow, but even high-end phones reported similar behavior.\nTroubleshooting was not easy as it required a deeper level of troubleshooting and parallelly learning to debug Android devices. It involved comparing performances for all possible enrollment scenarios, i.e., Fully Managed User Device; Corporate Owned \u0026#8211; Dedicated Device; Corporate Owned \u0026#8211; Work Profile; Personal Owned \u0026#8211; Work Profile. Device Policy Controller In an Android enterprise deployment, an enterprise maintains control over various aspects of user devices, such as isolating work-related information from users\u0026#8217; personal data, pre-configuring approved apps for the environment, or disabling device capabilities (for example, the camera). The DPC creates and manages the work profile on the device on which it is installed. The work profile encrypts work-related information and keeps it separate from the user\u0026#8217;s personal apps and data. Before creating the work profile, the DPC can also provision a managed Google Play Account for use on the device.\nWhen a device is enrolled in an MDM, it uses the Device Policy Controller (DPC), which is automatically installed during enrollment. The DPC app can be accessed by navigating to Google Play and selecting and opening the Android Device Policy app. You can sync the device, view which apps were installed, and policy settings.\nCollecting Logs Enable developer options on the Android device:\nGo to Settings -\u003e About phone.Tap the Build number button seven (7) times until it says, “You are now a developer!”Return to the previous screen to find Developer Options at the bottom. The Developer Options screen might be located or named differently on some devices.Open the Developer Options page and scroll down until you find USB Debugging and toggle it to Enabled. Once everything is in place, connect a USB cable from your PC to the device. If this is the first time the device has been connected, a popup will appear asking if it’s\u0026nbsp;OK\u0026nbsp;to allow debugging. Select\u0026nbsp;Allow\u0026nbsp;and select the box to\u0026nbsp;Always allow. This will enable a connection between your computer and the connected Android device.\nOpen a command prompt and navigate to the directory where the SDK was installed and follow the below steps:\nType in adb.exe devices -l, and you should see your Android device listed:\nIf you don\u0026#8217;t see the device or receive any error message, then run the following commands:\nadb kill-server\nadb start-server\nand then try again with adb.exe devices -l\nYou will need to collect logcat and dumpsys logs from the connected devices.\nLogcat Logcat is a command-line tool that dumps a log of system messages, including stack traces when the device throws an error and messages that you have written from your app with the\u0026nbsp;Log\u0026nbsp;class\nFrom the command prompt, run the following command with replicating the slowness issue/behavior on the connected device : adb.exe logcat -v threadtime [device ID] \u0026gt; C:\\temp\\fully_managed.log\nDumpsys A few weeks back, I have written a post on the Android reboot issue, and it has step-by-step instructions for collecting dumpsys logs. Reading the Device Logs Android device logs are not that hard to read as they are in .txt format. The logs exported in the previous step will have information like app crashes, deadlocks, activities, memory \u0026amp; CPU utilization, power consumption, etc.\u0026nbsp;\nHowever, I recommend that before you start reading the logs, you go through Google Documents for developers, as it will help you familiarize yourself with these queries and the logs.\nLet\u0026#8217;s get started and dig through the logs for some useful info.\nThe logcat I just exported from the device is around 40MB, and I am using Android Studio to open it. This log file will have a lot of information with all the details of what is going on with the device. But for now, I am more interested in finding out what is causing the M365 apps to go unresponsive.\nThere are multiple ways to look for this info, either you go line-by-line through the log file \u0026#8211; which will take days as it has thousands of lines with details of numerous processes \u0026amp; services, or the smart way by looking directly for impacted processes.\nYou have to export the list of all apps installed on the device (hidden or not) run so that you have the data to look for:\nIn the command prompt, execute the below command:\nadb.exe pm list packages -s \u0026gt;C:\\temp\\fully_managed_packages.log\nI found that Microsoft Apps are the top memory-intensive apps in this log file. Now with this info, I just need to filter out the logcat log for these packages.\nConnection Refused! The logs had consistent entries for connections getting dropped for M365 apps. Whenever the device-based sign-in was attempted, the query failed. Reason for the Refused Connections The ADAL may generate this error message whenever any application(M365 apps) cannot communicate with the broker application (Microsoft Authenticator or Company Portal). You might also see error messages like \u0026#8220;BROKER_AUTHENTICATOR_NOT_RESPONDING\u0026#8220;. This is well documented by Microsoft that it is due to the OEM limiting inter-app communication on their hardware.\nThe bound service is expected to perform an interactive and silent auth for ADAL in brokered scenarios. If this communication between ADAL and brokers fails, ADAL will return the \u0026#8220;connection refused\u0026#8221; back to the app. In silent authentication scenarios, this fails to get a token. This will result in an error in interactive authentication scenarios even before the user sees a prompt.\nImpacted Devices Several device manufacturers are impacted by this issue, including Samsung, Huawei, OnePlus, and Vivo. It\u0026#8217;s generally built-in in the devices exposing battery settings but often is only exposed in a subset of the OEM\u0026#8217;s device lineup.\nRemediation It depends on OEMs on how they allow the end users to limit the operating system\u0026#8217;s ability to launch secondary apps. Each device may expose a different setting to do this. In this case, it is related specifically to M365 apps such as Outlook, Power Apps \u0026amp; OneDrive, and these apps require background activity, so the users need to configure the Battery Optimization settings on their devices:\n1. Go to Settings on your Android device\n2. Search for Apps and tap on them\n3. Search for the app having an issue and Tap on that app\n4. Now, search for Battery and top on it.\n5. Turn the switch ON for “Allow background activity”\n6. Tap “Optimise battery usage” and turn Switch OFF for the app having an issue.\n7. In case you don’t find the app, from the top select All rather than “Apps not optimized”.\nAlso, the Adaptive battery settings under Device Care app \u0026gt; More battery settings has to be disabled – in case there are apps that user use often and still don’t want to avoid disconnection issues.\nAfter making these changes, you will notice an improvement in the device performance, and if you go through the device logs, you will not find these errors anymore. However, as these settings allow the app to run in the background without battery optimization, users may receive a prompt on their devices to switch on the battery optimization. This prompt needs to be ignored!\nThat\u0026#8217;s all for today..have a great weekend..cheers 🍻🥂\n","externalUrl":null,"permalink":"/posts/android-enterprise-are-your-phones-slowed-down-2/","section":"Posts","summary":"Welcome to the new site!","title":"Android Enterprise: Are your phones slowed down?","type":"posts"},{"content":" Overview On October 24th, 2022, Apple posted updated versions of operating system software license agreements to the Apple Business Manager. Until and unless you accept the new agreements with Apple Business Manager, you won’t be able to enrol any devices or deploy new apps to your supervised devices.\nThis post will be a short one with reasons for new agreements along with steps showing how to accept the new T\u0026amp;Cs.\nWhy Is There A New Agreement Every Year? Whenever Apple releases a major version of their macOS, iOS, iPadOS, or tvOS, it updates the Software License Agreement for these builds. When a Software License Agreement is updated, an Apple Business Manager Administrator must log into the program website to review and agree to the updated terms.\nDepending upon which all Apple products you manage in your MDM solution, Apple will publish the new agreement for those platforms on your program website. Who Can Accept the New Agreement? The person who completes the initial program enrollment also accepts the following Terms and Conditions on behalf of the enrolling organization:\nApple Business Manager Agreement\nmacOS Software License Agreement\niOS Software License Agreement\ntvOS Software License Agreement After completing enrollment, this person becomes the Administrator in Apple Business Manager and can designate up to four more administrators.\nAccepting Updated Agreements As soon as Apple updates the agreements, the Apple Business Manager Administrator must sign in to the program website to accept any new agreements. The steps are as below:\nSign in as an Administrator in Apple Business Manager. Immediately after log-in, you will be prompted to accept the terms and conditions Select the check-boxes to accept \u0026amp; agree to the new T\u0026amp;Cs. And done! You are all set to use the ADE program again, as usual. The Worst Scenario Even if you don’t accept the agreements, the devices assigned to your MDM server (Intune) in Apple Business Managerwon’t be affected. If you erase all content and settings on a device, the device is still assigned to the same MDM server, and the same settings are applied during setup.\nHowever, these conditions will apply until the ABM administrator accepts the new agreements:\nApple Business Manager can reset user passwords and send or print login information, but other site functions will be disabled. In Apple Business Manager, the administrator or device managers can’t assign new devices to the MDM server, even if you automatically select the option to assign new purchases for the MDM server token. Intune might report an error message like \u0026#8220;403 T_C_NOT_SIGNED” when communicating with Apple’s device management servers. So don\u0026#8217;t wait. Login to your ABM program website and accept the new agreement. All it takes is one click, and you are hassle-free for the rest of the year. Stay In(tuned) and be #intuneinspired.\n","externalUrl":null,"permalink":"/posts/apple-business-manager-update/","section":"Posts","summary":"Overview On October 24th, 2022, Apple posted updated versions of operating system software license agreements to the Apple Business Manager.","title":"Apple Business Manager Update","type":"posts"},{"content":"Apple is well-known for its innovative products in hardware, software, and services. Apple Business Essentials is a subscription-based service for small \u0026amp; big enterprises that provides device management capabilities, an enterprise development program and 24/7 access to Apple Support. ","externalUrl":null,"permalink":"/posts/appleseed-for-it/","section":"Posts","summary":"Apple is well-known for its innovative products in hardware, software, and services.","title":"Apple for Enterprise: Offerings and benefits","type":"posts"},{"content":"Around two years ago, I wrote an article for \"Managing iOS Devices with Microsoft Intune,\" a lot has happened since then. The transition from legacy authentication to modern authentication by both Apple and Microsoft has completely changed the way devices are enrolled to MDM in both COD and BYOD scenarios. So, here is an AIO guide to help you plan, prepare, manage, and secure your Apple platform using Microsoft Intune.\nWhat we will cover in this series:\nThe need to manage devices and data.Getting Started - Apple Device Enrollment types \u0026amp; MDMABM or ASM, or ASE?Onboarding to ABMWhat is Apple Configurator \u0026amp; when to use it?Apple Identity Services \u0026amp; SSOSetup Assistant, Configurations \u0026amp; RestrictionsThe magic of Declarative Device ManagementManage software update policies for iOS \u0026amp; macOS devicesDistribute contentDevice management securityEnroll an iOS/iPadOS \u0026amp; macOS as COD in Intune.Enroll an iOS/iPadOS \u0026amp; macOS as BYOD in Intune.App Protection Policies (MAM).Code Signing \u0026amp; app wrapping.Before you beginBefore you begin enrolling Apple devices in Intune, it is essential to review \u0026amp; understand the requirements or use cases so that you can define the approach:\nThe below table should give you a fair idea about the different approaches:\nhttps://aka.ms/AndroidEnrollmentGuideFor all Intune-specific prerequisites and configurations needed to prepare your tenant for enrollment, see the Enrollment guide: Microsoft Intune enrollment.\nManaging Devices and Corporate DataIn today's world, for any organization, its most valuable asset is \"data\". Whether accessed from the end user's own devices or the devices given by the organization, keeping corporate data safe is one of the most challenging yet critical measures. When talking about Apple devices, Apple has made it simple for IT to accommodate various device management checks without impacting end users' productivity or privacy.\nApple gives IT teams the tools to be successful and have the control they need without compromising usability. This is achieved through the tight integration of Apple’s management framework and your mobile device management (MDM) solution. In iOS, iPadOS, tvOS, and macOS, Apple includes a management framework that allows IT to configure and update settings, deploy apps, monitor compliance, query devices, and remotely wipe or lock devices. This framework supports corporate-owned and personally-owned devices and is the foundation for deployment and management. MDM solutions are available from a wide range of vendors who offer a choice of features and prices for maximum flexibility, regardless of whether an enterprise deploys a cloud-based or an on-premise server.\nNo matter what deployment strategy you choose, the MDM framework will never have access to your email, messages, or browsing history.\nDevice Ownership ModelManagement of these devices can take many forms, depending on company needs and security concerns. The main device ownership models cover a wide spectrum of business requirements:\nCorporate-Owned DevicesMore control on supervised devicesUser-Owned Devices also known as BYOD Limited control of user-owned devicesAny organization's security strategy must include device management as a critical element. To prevent unwanted access to the corporate network and data, it ensures that devices are safe, updated, and comply with organizational regulations. A sound device management strategy is more crucial than ever as businesses accommodate remote and hybrid workforces. Organizations are required to safeguard and secure all of their data and resources. Microsoft Intune helps you to secure proprietary data that users access from their company-owned and personally-owned devices. Intune includes device and app policies, software update policies, and installation statuses (charts, tables, and reports). SummaryIn general, there are two methods for managing devices. To start, you can manage many features of devices using Intune's built-in features. This method is referred to as Mobile Device Management (MDM). Devices are \"enrolled\" by users. You can restrict devices to use a specific operating system, disable personal devices, and much more as an IT administrator. You can also securely wipe all data from a device if stolen or lost.The second method involves managing apps on devices. Mobile Application Management (MAM) is the term of this approach. Users can access company resources using their own personal devices. Users may be asked to authenticate when they launch an app like Outlook or any other enterprise app. You can erase all company data from the Intune-managed applications in the event that a device is ever lost or stolen. You can even use a combination of MDM and MAM together.While you design your device management infrastructure, don't forget to consider these two critical points:\nCorporate-owned devices give the most control and protection over corporate data.User-owned devices managed through User Enrollment protect corporate data without accessing personal data, thereby protecting user privacy.I'll end this section right here, so let's get started on part 2 of the series.\n","externalUrl":null,"permalink":"/posts/ios-device-management-with-microsoft-intune/","section":"Posts","summary":"Around two years ago, I wrote an article for \"","title":"Apple Platform Deployment: An All-In-One guide to managing Apple devices with Microsoft Intune","type":"posts"},{"content":"In the ever-evolving threat landscape, keeping your organization's macOS devices secure is paramount. While Mobile Device Management (MDM) solutions offer a valuable layer of control, a critical piece of the puzzle often gets overlooked: application inventory.\nThis blog post dives into the importance of a comprehensive application inventory for macOS devices, explores the limitations of MDM reporting, and highlights the security benefits gained from improved application visibility.\nThe Silent Threat: Unseen ApplicationsImagine a blind spot in your home security system. That's essentially what an incomplete application inventory creates for your macOS environment. MDM solutions often focus on device details and pre-approved applications.However, this leaves a gap for unauthorized applications, potentially exposing your network to vulnerabilities.\nMalware can disguise itself as legitimate applications, making it crucial to have a complete picture of everything running on your Macs. Additionally, outdated or unmaintained software can pose security risks.\nBeyond Pre-Approved AppsWhile mostly all MDM excels at managing pre-approved applications, it often felt like a shortcoming when it comes to comprehensive application discovery. Here are some limitations to consider:\nLimited Visibility: MDM might not report on all applications, especially those installed outside the designated channels (e.g., user downloads).Version Control Challenges: Version tracking for discovered applications may be limited, making it difficult to identify outdated software with known vulnerabilities.Static Reporting: MDM reports typically provide a snapshot in time, sometimes limiting to capture applications continuously installed, removed, or updated.The Power of Application InventoryA robust application inventory solution fills the gaps left by MDM, offering significant security benefits:\nEnhanced Threat Detection:\u0026nbsp;By identifying all applications, you can discover unauthorized software that might harbor malware.Vulnerability Management:\u0026nbsp;Identify outdated applications with known vulnerabilities and prioritize patching to minimize the attack surface.Improved Compliance:\u0026nbsp;Ensure adherence to software licensing agreements and internal security policies by monitoring application usage.Streamlined Security Audits:\u0026nbsp;A complete application inventory simplifies security audits by providing a centralized view of your software landscape.Beyond Security: The Added Value of Application InventoryThe benefits of application inventory extend beyond just security. It empowers you to:\nOptimize Software Licensing:\u0026nbsp;Gain insights into software usage patterns, allowing for informed decisions about licensing costs.Identify Shadow IT:\u0026nbsp;Discover unsanctioned software deployments and improve overall IT governance.Simplify Software Deployment:\u0026nbsp;Plan and deploy software updates more effectively through a comprehensive understanding of your application ecosystem.Taking Control: Building a Comprehensive Inventory with Intune and Azure Log AnalyticsTraditionally, building a comprehensive application inventory required additional tools. However, by leveraging Microsoft Intune and Azure Log Analytics, you can achieve this with a custom script.\nThe Power of Automation:\nThe script utilizes a bash script running on macOS devices enrolled in Intune. This script gathers application data and sends it securely to your Azure Log Analytics workspace for centralized analysis.\nBenefits of this Approach:\nCentralized Visibility:\u0026nbsp;Gain a holistic view of all applications installed across your macOS devices.Continuous Updates:\u0026nbsp;Schedule automatic script execution to ensure your inventory stays up-to-date.Seamless Integration:\u0026nbsp;Leverages existing tools within the Microsoft ecosystem for a streamlined solution.Building the macOS Application Inventory ScriptThe following lines define variables for the\u0026nbsp;CustomerId\u0026nbsp;(your Azure Log Analytics workspace ID) and\u0026nbsp;SharedKey\u0026nbsp;(your workspace's primary key).\u0026nbsp;These are placeholders; you'll need to replace them with your actual values before deployment.\n#!/bin/bash Replace these with your actual Workspace ID and Primary Key # CustomerId=\u0026ldquo;your_workspace_id\u0026rdquo; SharedKey=\u0026ldquo;your_primary_key\u0026rdquo; The script retrieves the computer name using scutil \u0026ndash;get ComputerName.\nIt then extracts the device serial number using system_profiler SPHardwareDataType and awk to filter the output for the line containing \u0026ldquo;Serial\u0026rdquo;\nComputerName=$(scutil \u0026ndash;get ComputerName) DeviceSerialNumber=$(system_profiler SPHardwareDataType | awk \u0026lsquo;/Serial/ {print $4}\u0026rsquo;) This section is the heart of application data collection:\nIt defines a variable Applications as an opening bracket for a JSON array.The script iterates through lines retrieved using system_profiler SPApplicationsDataType.It uses conditional statements (if and elif) to identify lines containing \u0026ldquo;Location:\u0026rdquo; (indicating app location) and \u0026ldquo;Version:\u0026rdquo;.For \u0026ldquo;Location:\u0026rdquo;, it extracts the application name using basename to remove the path and \u0026ldquo;.app\u0026rdquo; extension.For \u0026ldquo;Version:\u0026rdquo;, it extracts the version number using awk.It then constructs a JSON object for each application with details like AppName, AppVersion, ComputerName, and DeviceSerialNumber.The loop keeps adding these application objects (separated by commas) to the Applications variable.Finally, it removes the trailing comma from the JSON array using sed.Applications=\u0026quot;[\u0026quot;\nIFS=$\u0026rsquo;\\n\u0026rsquo; for line in $(system_profiler SPApplicationsDataType); do if [[ \u0026ldquo;$line\u0026rdquo; =~ \u0026ldquo;Location:\u0026rdquo; ]]; then appName=$(basename \u0026ldquo;$line\u0026rdquo; .app) # Extracts only the app name, removing path and .app extension elif [[ \u0026ldquo;$line\u0026rdquo; =~ \u0026ldquo;Version:\u0026rdquo; ]]; then appVersion=$(echo \u0026ldquo;$line\u0026rdquo; | awk -F\u0026quot;: \u0026quot; \u0026lsquo;{print $2}\u0026rsquo;) Applications+=\u0026quot;{\u0026quot;AppName\u0026quot;: \u0026quot;$appName\u0026quot;, \u0026quot;AppVersion\u0026quot;: \u0026quot;$appVersion\u0026quot;, \u0026quot;ComputerName\u0026quot;: \u0026quot;$ComputerName\u0026quot;, \u0026quot;DeviceSerialNumber\u0026quot;: \u0026quot;$DeviceSerialNumber\u0026quot;},\u0026quot; fi done IFS=$\u0026rsquo; \\t\\n\u0026rsquo;\nJSON format # Applications=$(echo $Applications | sed \u0026rsquo;s/,]/]/\u0026rsquo;) It passes the CustomerId (workspace ID), SharedKey (primary key), the prepared Applications JSON data (containing application details), and a log type identifier (\u0026ldquo;Mac_app_inventory_CL\u0026rdquo;) for reference within Log Analytics.\n# Send data send_data \u0026ldquo;$CustomerId\u0026rdquo; \u0026ldquo;$SharedKey\u0026rdquo; \u0026ldquo;$Applications\u0026rdquo; \u0026ldquo;Mac_app_inventory_CL\u0026rdquo;So, let\u0026rsquo;s put together all the blocks and build our complete script:\n#!/bin/bash\nReplace these with your actual Workspace ID and Primary Key # CustomerId=\u0026ldquo;your_workspace_id\u0026rdquo; SharedKey=\u0026ldquo;your_primary_key\u0026rdquo;\nFunction to create the authorization signature # function generate_signature() { local customerId=\u0026quot;$1\u0026quot; local sharedKey=\u0026quot;$2\u0026quot; local date=\u0026quot;$3\u0026quot; local contentLength=\u0026quot;$4\u0026quot; local method=\u0026quot;$5\u0026quot; local contentType=\u0026quot;$6\u0026quot; local resource=\u0026quot;$7\u0026quot;\nlocal stringToHash=\u0026quot;$method\\n$contentLength\\n$contentType\\nx-ms-date:$date\\n$resource\u0026quot; local decodedKey=$(echo \u0026quot;$sharedKey\u0026quot; | base64 -d | xxd -p -u -c 256) local hash=$(echo -ne \u0026quot;$stringToHash\u0026quot; | xxd -p -u -c 256 | xxd -r -p | openssl dgst -sha256 -mac HMAC -macopt hexkey:$decodedKey -binary | base64) echo \u0026quot;SharedKey $customerId:$hash\u0026quot; }\nFunction to send data to Log Analytics # function send_data() { local customerId=\u0026quot;$1\u0026quot; local sharedKey=\u0026quot;$2\u0026quot; local data=\u0026quot;$3\u0026quot; local logType=\u0026quot;$4\u0026quot;\nlocal method=\u0026quot;POST\u0026quot; local contentType=\u0026quot;application/json\u0026quot; local resource=\u0026quot;/api/logs\u0026quot; local date=$(date -u +%a,\\ %d\\ %b\\ %Y\\ %H:%M:%S\\ GMT) local contentLength=$(echo -n \u0026quot;$data\u0026quot; | wc -c | tr -d ' ') local signature=$(generate_signature \u0026quot;$customerId\u0026quot; \u0026quot;$sharedKey\u0026quot; \u0026quot;$date\u0026quot; \u0026quot;$contentLength\u0026quot; \u0026quot;$method\u0026quot; \u0026quot;$contentType\u0026quot; \u0026quot;$resource\u0026quot;) local uri=\u0026quot;https://$customerId.ods.opinsights.azure.com$resource?api-version=2016-04-01\u0026quot; response=$(curl --silent --location \u0026quot;$uri\u0026quot; \\ --header \u0026quot;Authorization: $signature\u0026quot; \\ --header \u0026quot;Log-Type: $logType\u0026quot; \\ --header \u0026quot;x-ms-date: $date\u0026quot; \\ --header \u0026quot;Content-Type: $contentType\u0026quot; \\ --data \u0026quot;$data\u0026quot;) echo \u0026quot;$response\u0026quot; }\nMain data collection and processing # ComputerName=$(scutil \u0026ndash;get ComputerName) DeviceSerialNumber=$(system_profiler SPHardwareDataType | awk \u0026lsquo;/Serial/ {print $4}\u0026rsquo;)\nCollecting dynamic application data # Applications=\u0026quot;[\u0026quot;\nappCount=0 # Initialize application count IFS=$\u0026rsquo;\\n' for line in $(system_profiler SPApplicationsDataType); do if [[ \u0026ldquo;$line\u0026rdquo; =~ \u0026ldquo;Location:\u0026rdquo; ]]; then appName=$(basename \u0026ldquo;$line\u0026rdquo; .app) # Extracts only the app name, removing path and .app extension elif [[ \u0026ldquo;$line\u0026rdquo; =~ \u0026ldquo;Version:\u0026rdquo; ]]; then appVersion=$(echo \u0026ldquo;$line\u0026rdquo; | awk -F\u0026quot;: \u0026quot; \u0026lsquo;{print $2}\u0026rsquo;) Applications+=\u0026quot;{\u0026quot;AppName\u0026quot;: \u0026quot;$appName\u0026quot;, \u0026quot;AppVersion\u0026quot;: \u0026quot;$appVersion\u0026quot;, \u0026quot;ComputerName\u0026quot;: \u0026quot;$ComputerName\u0026quot;, \u0026quot;DeviceSerialNumber\u0026quot;: \u0026quot;$DeviceSerialNumber\u0026quot;},\u0026quot; ((appCount++)) # Increment application count fi done IFS=$\u0026rsquo; \\t\\n\u0026rsquo;\nRemove the last comma for JSON format correctness # Applications=$(echo $Applications | sed \u0026rsquo;s/,]/]/')\nDebug output to check everything is captured correctly # echo \u0026ldquo;Debug: Prepared JSON Data: $Applications\u0026rdquo;\nSend data # send_data \u0026ldquo;$CustomerId\u0026rdquo; \u0026ldquo;$SharedKey\u0026rdquo; \u0026ldquo;$Applications\u0026rdquo; \u0026ldquo;Mac_app_inventory_CL\u0026rdquo;\nPrint completion message # echo \u0026ldquo;Application inventory collected and uploaded to Azure Log Analytics workspace. The total count of apps discovered and uploaded are $appCount.\u0026rdquo; Deployment:💡It is advisable that you run the script locally on a test Mac to see the data before you push it to all production machines!You need to deploy the script to all your Macs enrolled with Intune. Steps are as below: Sign in to the Microsoft Intune admin center.Select Devices \u0026gt; macOS \u0026gt; Shell scripts \u0026gt; Add.In Basics, enter the required properties, and select Next.In Script settings, configure as below and select Next:Select Assignments \u0026gt; Select groups to include. End ResultsOnce the script executes successfully, it transmits the collected data to your Azure Log Analytics workspace. This data will be stored in a new table named Mac_app_inventory_CL . Within this table, you\u0026rsquo;ll find all the application inventory details gathered by the script from the device.\nTesting locally first on a test machine:Data in Azure Log Analytics Workspace:ConclusionIn conclusion, maintaining a comprehensive inventory of applications on Mac endpoints is crucial for several reasons. It enhances visibility into installed applications, aids in security compliance by ensuring all software is up-to-date, and helps IT departments manage resources more effectively. The limitations of standard MDM reporting functionalities often necessitate a more hands-on approach, as demonstrated through the use of our custom script.\nThe script not only automates the collection of application data but also seamlessly uploads this inventory to Azure Log Analytics. This integration provides a centralized and accessible location for monitoring and analysis, enabling organizations to make informed decisions based on accurate and up-to-date application usage data.\nIt empowers you to overcome the reporting limitations of MDM solutions by providing a deeper insight into the applications installed on your network\u0026rsquo;s endpoints.\nNext Steps:\nExperiment with the script to customize and extend its capabilities according to your organization\u0026rsquo;s specific needs.Consider integrating this script into your regular IT audit processes to ensure continuous compliance and security.Stay updated with the latest in script automation and endpoint management by subscribing to my blog and following on social media channels.\n","externalUrl":null,"permalink":"/posts/why-application-inventory-is-the-unsung-hero-of-macos-security/","section":"Posts","summary":"In the ever-evolving threat landscape, keeping your organization's macOS devices secure is paramount.","title":"Application Inventory: The Unsung Hero of macOS Security","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":" Overview In this blog post, I will show how to create and schedule a custom report for monitoring Windows Update using a combination of KQL and Azure Automation. The Windows Update Compliance is offered through the Azure portal and helps you monitor security, quality, and feature updates for Windows 10 or 11. It also gives you a report of the device and updates issues related to compliance that need attention.\nThe Update Compliance dashboard has lots of data; in the workspace, you will find numerous tables holding different data types. You can use KQL queries to get the data you are interested in! Let\u0026#8217;s get started then with creating some KQL queries and automating them as email or even getting posted in the Teams channel. We will cover the following:\nCreating a blank logic app and workflow.Adding a Recurrence trigger that specifies the schedule to run the workflow.Add a custom query to the workflow.Add an action that sends an emailAdd a webhook for Teams Logic Apps Azure Logic Apps, from Microsoft Azure, is a cloud-based Platform-as-a-Service (PaaS) used to automate tasks, workflows, etc. It helps create and design automated workflows that integrate services, systems, and applications.\nBelow are the steps to create a logic app:\nSign in to the Azure portal with your Azure account. In the Azure search box, enter logic apps, and select Logic apps. On the Logic apps page, select Add. On the Create Logic App pane, on the Basics tab, provide the following basic information about your logic app: When you\u0026#8217;re ready, select Review + Create. On the next page, validate and click Create. Design The Workflow As the next step, we will add the Recurrence trigger, which runs the workflow based on a specified schedule. Every workflow must start with a trigger, which fires when a specific event happens or when new data meets a specific condition. On the workflow designer, under the search box, select Built-in. In the search box, enter recurrence, and select the Recurrence trigger. On the Recurrence shape, select the ellipses (\u0026#8230;) button, and then select Rename. Rename the trigger with this description: Daily Report. Inside the trigger, change these properties as required In the workflow designer, under the Recurrence trigger, click SAdd an Action In the search box, enter Run query and visualize results. Sign in with user credentials or select Service Principal and fill in the Parameters for creating a connection. In the Query field, enter the Log Analytics query you want to report on. For example, I want to schedule a report on the compliance of the latest 2 security patches, so I have used the below query: Keep HTML Table as chart type, as this will give you the same output as shown in Log Analytics table Add an action that sends you an email when the query is executed. You can customize the mail body, CC, To \u0026amp; From attributes to fit your requirement.\nIf you also want this report sent to your Teams channel, add the WebHook URL for your Teams. As the last step, save your Logic App and click Run to test it.\nVerify The Report Open your email client app, and you should see this email with the report attached in your inbox.\nConclusion Pretty neat \u0026amp; simple 😊. With this article, we saw how easily the queries in Windows Compliance could be automated/scheduled. Rest, it\u0026#8217;s all your imagination and scripting power to extend it as per your business requirement.\nSigning off for the day. Keep learning \u0026amp; keep sharing. Cheers 🍻\nReferences:\nhttps://learn.microsoft.com/en-us/azure/logic-apps/?WT.mc_id=EM-MVP-5004955\nUsing Update Compliance \u0026#8211; Windows Deployment | Microsoft Learn\n","externalUrl":null,"permalink":"/posts/automate-daily-reports-for-windows-update-compliance-using-logic-apps/","section":"Posts","summary":"Overview In this blog post, I will show how to create and schedule a custom report for monitoring Windows Update using a combination of KQL and Azure Automation.","title":"Automate Daily Reports for Windows Update Compliance using Logic Apps","type":"posts"},{"content":" Background The line-of-business Apple iOS/iPadOS apps assigned to iPhones and iPads are created with a provisioning profile that is included and is code signed with a certificate. IOS/iPadOS verifies its integrity and applies any provisioning profile-defined policies when the app runs. The following validations happen:\nInstallation file integrity\u0026nbsp;\u0026#8211; iOS/iPadOS compares the app\u0026#8217;s details with the enterprise signing certificate\u0026#8217;s public key. If they differ, the app\u0026#8217;s content might have changed, and it is not allowed to run.Capabilities enforcement\u0026nbsp;\u0026#8211; iOS/iPadOS attempts to enforce the app\u0026#8217;s capabilities from the enterprise provisioning profile (not individual developer provisioning profiles) in the app installation (.ipa) file. The enterprise signing certificate used to sign the apps typically lasts three years. However, the provisioning profile expires after a year, and the app needs to be packaged again with the new provisioning profile. The Pain Area There is now out of the box solution to set-up alerting to notify about the expiry of the provisioning profiles for the iOS apps. Intune portal has the functionality to the show the alert if provisioning profile or certificate is about to expire. The alert is just displayed as informational message, so that you know that one part of the LOB app is expired or close to expire and then you can take the required action.\nDue this missing functionality, there are high chances of human error and it quite evident that the team managing Intune infrastructure may miss these notifications, leading to non-functioning apps on end user\u0026#8217;s devices.\nThe Options There multiple ways to achieve this functionality of creating automated email notifications few days prior to the provisioning profile expiry so that you have ample time to react and get the new build created.\nThe possible options you have to automate it are:\nAutomate the flow using ServiceNowAutomate the flow using Power AutomateAutomate the flow using Logic Apps Which ever option you choose, you will be relying on Graph API calls to get the data about managed apps and their properties.\nThe Solution For this article, I have used Power Automate to create the flow and get automatic emails for notifying on the provisioning profile.\nSign in to\u0026nbsp;Power Automate. Select\u0026nbsp;My flows\u0026nbsp;\u0026gt;\u0026nbsp;New flow\u0026nbsp;\u0026gt;\u0026nbsp;Scheduled cloud flow. In the fields next to\u0026nbsp;Starting, specify the date and time when your flow should start. In the fields next to Repeat every, specify the flow\u0026#8217;s recurrence. Select Create. Select Recurrence \u003e Show advanced options. When you select Show advanced options, the dropdown name changes to Hide advanced options and then configure the time/days to run the flow. Click on \u0026#8220;Add Action\u0026#8221; and search for \u0026#8220;Get Secret\u0026#8221; and the connection can be with a managed identity Click on add action and add HTTP connection to make a Graph request in which we will query LOB apps. Next, In the search box under Choose an operation, enter variable as your filter. From the Actions list, select Initialize variable \u0026#8211; Variable. I will use this variable for comparing the expiry date of provisioning profile. Save the flow right here and execute it as we need the response from the GET request. Run the flow and then copy the body from the result. It will be like this As a next step, again initialize a variable to call for expiry date value from the response. Now, map the properties using expressions. Click Add step and add condition to compare and validate provisioning profile expiry date with a check that if the expiry date is less than 90 days from today then an auto-generated email should be sent to concerned team. All done! Save the flow and execute it.\nYou will receive the email with details of the app\u0026#8217;s provisioning profile.\nWrapp Up The idea behind this post was to show how easily you can automate the notifications for expiry of your business critical applications. There are endless possibilities to modify the requirements as per your business requirements. Feel free to use it and modify it.\n","externalUrl":null,"permalink":"/posts/automate-ios-lob-provisioning-profile-expiry-notifications/","section":"Posts","summary":"Background The line-of-business Apple iOS/iPadOS apps assigned to iPhones and iPads are created with a provisioning profile that is included and is code signed with a certificate.","title":"Automate iOS LOB Provisioning Profile Expiry Notifications","type":"posts"},{"content":"In my previous post, we unfolded the myriad announcements made during Apple's most recent Worldwide Developers Conference (WWDC 2023). We navigated through the torrent of innovations and technological advancements, focusing on how they promise to redefine the user experience. In the last post, we discussed the latest development in macOS 14 and iOS/iPadOS 17.\nWWDC 2023: Apple’s Leap into Next-Level Device Management - Part 1This year’s WWDC2023 was marked by numerous groundbreaking announcements. Yet, amid the buzz about the new Apple Vision Pro, iOS/iPadOS 17, macOS Sonoma, and app updates, Apple’s leap into next-level device management is an understatement.Intune - In Real LifeSomesh PathakTill now, Apple Configurator has long been a staple for IT professionals managing iOS/iPadsOS \u0026amp; macOS device with Apple School Manager or Apple Business Manager ecosystems. Traditionally, adding a new device to your organization involved a two-step process. First, the device had to be added into your organization. Then, someone with the role of Device Enrollment Manager would have to log in to the ABM portal to assign that device to the appropriate MDM server.\nExcitingly, this year brings a significant update: Apple Configurator now enables automatic assignment of devices to your chosen MDM server directly within the tool itself. This streamlines the process and makes life a whole lot easier for IT administrators. In this blog post, we're revisiting the Apple Configurator, but with a different lens. So, buckle up and join me as we traverse through the soon-to-be-released Apple Configurator features and see what Apple's commitment to continuous improvement has in store for us.\n💡The option to use Apple Configurator in the Shortcut app is yet to be released!\u0026nbsp;PrerequisitesBefore we dive in, make sure you have the following:\nApple Configurator 2: This is available for free on the Mac App Store and is a tool designed to manage and deploy iOS devices in bulk.A Mac computer: Apple Configurator 2, Automator, and Shortcuts all run on Mac systems.Basic understanding of Apple's Automator and Shortcuts apps: These tools allow the automation of tasks on Apple's macOS and iOS platforms.What is Apple Configurator?Apple Configurator is a free tool developed by Apple and available on the Mac App Store. This tool provides a way for administrators to mass-configure and deploy iPhone, iPad, and iPod touch devices in an organization or school. It is often used in environments where multiple iOS devices need to be quickly set up with specific settings and apps, such as in education or business settings.\nLeveraging Automator and the actions available in Apple Configurator, you can design robust device management workflows through an easy drag-and-drop interface. These workflows can then be initiated from the system-wide Script Menu or just by starting an Automator workflow applet.\nWhat is Automator?Automator is a powerful automation tool developed by Apple for macOS. It allows users to create custom workflows or applications by automating a series of tasks without the need for extensive programming knowledge. With Automator, users can streamline repetitive tasks, save time, and increase productivity.\nAutomator offers a visual interface where users can drag and drop pre-built actions to create a workflow. These actions can include various tasks such as manipulating files, launching applications, performing system actions, running scripts, interacting with web services, and much more.\nThe key components of Automator are:\nActions: Actions are pre-built modules that perform specific tasks. They can be combined to create a workflow. macOS provides a wide range of built-in actions, and additional actions can be added by third-party applications.Variables: Automator allows users to define and manipulate variables within a workflow. Variables can store data and values that can be used throughout the workflow.Actions Library: The Actions Library in Automator provides a categorized collection of actions that users can choose from to build their workflows. It includes actions for various applications, system functions, and utilities.Workflow Building: Using the drag-and-drop interface, users can create workflows by selecting actions from the Actions Library and arranging them in a logical order. Workflows can be as simple or as complex as needed, depending on the tasks to be automated.Execution and Results: Once a workflow is created, it can be executed directly from Automator or saved as an application or a service. Workflows can also be scheduled to run at specific times or triggered by specific events. The results of a workflow can be displayed, saved, or used as input for subsequent actions.Automator provides a user-friendly approach to automation, allowing users to simplify complex tasks and create personalized solutions tailored to their needs. It is a powerful tool for automating repetitive actions, boosting productivity, and enhancing the overall macOS user experience.\nTo understand \u0026amp; learn more about the capabilities and features of Automator \u0026amp; Shortcuts you can refer to the below links:\nAutomator User Guide for MacLearn how to use Automator on your Mac to automate much of what you do on your computer.Apple SupportShortcuts User Guide for MacApple SupportNow, let's get back to designing the workflow.\nCreate a Supervision Identity for Apple ConfiguratorTo incorporate your organization's information into devices, generating a supervision identity is necessary. This ensures that the information is prominently displayed to users. Subsequently, securely configuring devices involves adding these supervision identities to other workstations running Apple Configurator 2.\nLaunch Apple Configurator 2 and navigate to Settings.Select Organizations.Select the + action button.Follow the prompts to create a new supervision identity. Select Done.Select the Elipses button in the Organizations window.Select Export Supervision Identity and choose where to save it. Select Save.Add a Password to the identity. This .p12 file will be uploaded to the UEM console when creating a Device Enrollment Program profile.Design the WorkflowThe user has three options to choose from for assigning devices; don't assign to an MDM server, assign to the default MDM server configured for its type, for example Mac or iPad, or assign to one of the organization's MDM servers. The list of available MDM servers is provided automatically after the user signs in with their Managed Apple ID.\nInitiating any workflow requires pinpointing the components that will be subjected to the workflow. When it comes to the Apple Configurator, the components to be processed are the iOS devices that are linked with your computer. This marks the primary phase in the development of the workflow.\nThe collection of Automator actions within Apple Configurator includes two specific actions designed to specify which devices will be managed by a given workflow: Find Connected DevicesFind Connected Devices from InputFind Connected Devices:\nThe 'Find Connected Devices' action retrieves the unique ECID identifiers of all connected iOS devices that have been selected via their corresponding checkboxes within the action's interface. These ECID identifiers are then passed on to subsequent actions in the workflow, helping to identify which devices will undergo the designated processes.\nErase Devices:\nThe 'Erase Devices' action serves the purpose of wiping both the content and settings from devices that are under supervision. This means that all user data, applications, and configurations will be removed, essentially restoring the supervised device to its factory settings. It ensures that sensitive information is completely erased, providing an extra layer of security and peace of mind.\nUpdate Devices:\nIts primary function is to update the devices for their next phase of operation—i.e. updating the OS version to the latest stable release. Essentially, this action acts as a transitional stage, reconfiguring the devices into a receptive state so they can be efficiently managed or deployed.\nPrepare Devices:\nThe 'Prepare Devices' action is strategically positioned in the workflow after the 'Update Devices' or 'Erase Devices' actions. Its role is to set up the devices for their next phase of operation, whether that involves installing apps, transferring documents, or simply making them ready for immediate use. By doing so, it ensures a seamless transition, enabling the devices to move from a 'clean slate' status to a fully operational state. This action is integral for IT administrators who need to efficiently manage device configurations, especially when transitioning devices between different users or operational states.\nSet variable:\nThis step creates a variable called all-UDIDs that contains a list of all of the UDIDs of the connected devices. The UDID is a unique identifier for each iOS device.\nThis variable will be used in the next step to update the MDM records for each device.\nRepeat with each item in all-UDIDs:\nThis step repeats the following steps for each UDID in the all-UDIDs variable:\nSet variable current-UDID to Repeat Item:\u0026nbsp;This step creates a variable called\u0026nbsp;current-UDID\u0026nbsp;that contains the current UDID from the\u0026nbsp;all-UDIDsvariable.Comment:\u0026nbsp;This step adds a comment to the script. The comment is used to explain what the script is doing.Match serial number to asset tag and update MDM records:\u0026nbsp;This step matches the serial number of the device to the asset tag spreadsheet and updates the MDM records accordingly. This is necessary because the MDM records may not have the asset tag information.Run Shell Script:\u0026nbsp;This step runs the shell script that is specified in the\u0026nbsp;Input:\u0026nbsp;field. The shell script is used to extract the asset tag from the asset tag spreadsheet.The shell script will now be executed. The script will search the asset tag spreadsheet for the serial number of the device and extract the asset tag. The asset tag will then be used to update the MDM records for the device.\nIn this step, the grep command is used to search the asset tag spreadsheet for the serial number of the device and to extract the asset tag. The grep command will search for lines in the asset tag spreadsheet that start with the pattern \"Serial Number\"\nOnce the shell script has finished running, the variable Asset Tag will contain the asset tag for the current device. You can then use this variable to update the MDM records for the device.\nOnce done, the shortcut updates the MDM server with the asset tag number from a separate csv file.\nAdvanced Automation TechniquesThe 'Install Configuration Profile' allows you to auto-assign configuration profiles stored in your Intune tenant. Beyond that, you can also automatically deploy apps according to the defined profiles or requirements.\nConcluding Thoughts!Remember the days when device provisioning felt like a chore? IT administrators had to go through a tedious process of manually configuring each device and then assigning it to an MDM server through Apple Business Manager. Those days are officially behind us.\nThe new automation capabilities within Apple Configurator have streamlined this entire operation. This level of automation not only saves valuable time but also reduces the risk of human error, enhancing the overall efficiency and security of your device management endeavors.\n","externalUrl":null,"permalink":"/posts/automating-device-provisioning-with-apple-configurator/","section":"Posts","summary":"In my previous post, we unfolded the myriad announcements made during Apple's most recent Worldwide Developers Conference (WWDC 2023).","title":"Automating Device Provisioning with Apple Configurator","type":"posts"},{"content":"Are you using Microsoft Intune for Android Enterprise management and wondering how to unleash its full potential? Look no further! In this series, I'll guide you beyond the basics, helping you harness the power of Microsoft Intune to effectively manage your Android devices.\nYou will discover how to leverage Intune's capabilities to their fullest extent, ensuring efficient management, enhanced security, and increased productivity across your Android device fleet. Whether you are a beginner or an experienced user, the insights and tips will help you unlock the true potential of Microsoft Intune for Android Enterprise management.\nDon't miss out on this opportunity to elevate your device management strategy to the next level. Let's dive in and harness the full potential of Microsoft Intune for Android Enterprise management. Here's a glimpse of what we'll be exploring:\nIntegrating Android Enterprise Management with MDMHow an Android device is enrolled \u0026amp; provisionedEnrollment Methods for Android Devices in IntuneCreating and Managing Policies for Android DevicesIntegrating Samsung Knox with Microsoft IntuneAutomating Android Device Management with PowerShell and Graph APISecurity and Compliance Best Practices in IntuneManaging App Configurations and PermissionsTroubleshooting Common Issues in Android Device ManagementReal-world Case Studies of Android Enterprise ManagementThe Future of Android Management: Trends and PredictionsA Comprehensive Guide to Reporting and Analytics in IntuneEnd-User Training and Adoption StrategiesDevice and App Lifecycle Management in IntuneManaging Remote Workforce with Android Devices and IntuneA Closer Look at Zero-Touch Enrollment for Android DevicesIntegrating Android Enterprise Management with MDMAndroid Enterprise Management is a comprehensive solution that allows organizations to effectively manage and secure their Android devices. Microsoft Intune, on the other hand, is a powerful mobile device management (MDM) platform that integrates seamlessly with Android Enterprise, providing a wide range of features and capabilities for managing Android devices.\nBy combining Android Enterprise with Microsoft Intune, organizations can take advantage of a robust set of tools to enroll, configure, secure, and manage Android devices. Intune offers a unified management experience, allowing IT administrators to control device settings, deploy applications, enforce security policies, and manage updates, all from a centralized console.\nIntune can be used to manage Android Enterprise devices using a variety of enrollment options, including:\nWork profile for employee-owned devices (BYOD)BYODWork profile for mixed-used company-owned devicesCOPEFull management for work-only company-owned devicesCOBOFull management for dedicated devicesKIOSKsAn Android Enterprise solution is a combination of three components: EMM solution (MS Intune in our case), Android Device Policy, and managed Google Play.\nAndroid Device Policy\nEvery Android device that an organization manages through its MDM solution must have Android Device Policy installed during the setup process. Android Device Policy, provided by Android itself, is an application that autonomously enforces the management policies established in the MDM console on the respective devices.\nManaged Google Play.Managed Google Play represents the enterprise edition of Google Play, tailor-made to enhance app management within Android Enterprise solutions. It merges the well-known user interface and app store functions of Google Play with a collection of management features specifically engineered for corporate use. Managed Google Play can be embedded into your MDM console to provide features such as:\nPublic app searchPrivate app publishingWeb app publishingApp organizationOn devices that are managed, Managed Google Play serves as the enterprise app store for users. Its interface bears resemblance to the regular Google Play, allowing users to browse through apps, examine their details, and proceed with the installation. However, in contrast to the public version of Google Play, Managed Google Play restricts users to installing only those apps that have been specifically approved by their organization. This ensures alignment with corporate policies and helps maintain a secure environment.\nLet's dive deeper to understand how Android devices are enrolled \u0026amp; provisioned into MDM.\nHow an Android Device is Enrolled \u0026amp; ProvisionedAndroid Device Policy communication between MDM and managed devicesDevice provisioning refers to the procedure of configuring a device so that it falls under the control of an enterprise through configured policies. This process involves the installation of Android Device Policy on the device, which then serves as the medium for receiving and enforcing these policies. If the provisioning proves successful, the API forms a device object, thereby linking the device to the enterprise.\nThe Android Management API initiates this provisioning process by utilizing enrollment tokens. When an enrollment token is provided to a device, it triggers the provisioning process. This procedure not only includes the installation of the Android Device Policy but also the addition of a managed Google Play account to the device. Once the device has been successfully provisioned, it is identified within the system as a Devices resource. Device provisioning with enrollment tokenThe enrollment token and provisioning method you use establishes a device's ownership (personally-owned or company-owned) and management mode (work profile or fully managed device).\nEnrollment tokens expire after one hour by default, but you can specify a custom expiration time (duration) up to approximately 10,000 years!10,000 Years!An example of an enrollment token:\n{ \"name\": string, \"value\": string, \"duration\": string, \"expirationTimestamp\": string, \"policyName\": string, \"additionalData\": string, \"qrCode\": string, \"oneTimeOnly\": boolean, \"user\": { object (User) }, \"allowPersonalUsage\": enum (AllowPersonalUsage) }Launch an app during setup\nWithin policies, it's possible to designate one application for Android Device Policy to initiate during the setup of a device or work profile. For instance, you can have your own T\u0026amp;Cs app that users must accept the Terms and Conditions as part of the setup procedure. To indicate that the process has been completed and to allow Android Device Policy to finish the provisioning of the device or work profile, the app must return a RESULT_OK signal.\nTo successfully launch an app during the setup, the following steps must be adhered to:\nThe app's 'installType' is set to 'REQUIRED_FOR_SETUP.' If the app fails to install or launch on the device, the provisioning process will be unsuccessful.Launch an app during setup{ \"applications\":[ { \"packageName\":\"com.my.T\u0026amp;C.\", \"installType\":\"REQUIRED_FOR_SETUP\" } ] }{ \"setupActions\":[ { \"title\":{ \"defaultMessage\":\"T\u0026amp;C App\" }, \"description\":{ \"defaultMessage\":\"Please accept T\u0026amp;Cs to proceed.\" }, \"launchApp\":{ \"packageName\":\"com.my.T\u0026amp;C.\" } } ] }After the app returns RESULT_OK, Android Device Policy will complete any remaining steps required to provision the device or work profile.\nConclusionTill now, we've explored the fundamental principles behind device provisioning and the role of Android Device Policy in managing devices within an enterprise environment. As we continue to unravel the complexities of Android Enterprise Management, the upcoming part of our series promises to delve deeper into a crucial aspect of device management: Enrollment Methods for Android Devices in Intune. Stay tuned as we guide you through various enrollment options, practical strategies, and insights that can transform the way your organization manages its Android devices.\nThank you for following along, and I look forward to welcoming you back for the next exciting installment in our comprehensive guide to Android Enterprise Management with Microsoft Intune.\n","externalUrl":null,"permalink":"/posts/mastering-android-enterprise-management-how-microsoft-intune-empowers-businesses/","section":"Posts","summary":"Are you using Microsoft Intune for Android Enterprise management and wondering how to unleash its full potential?","title":"Beyond the Basics: Advanced Android Enterprise Management with Microsoft Intune","type":"posts"},{"content":"For years, Mobile Device Management (MDM) solutions have thrived within the controlled environment of Apple's App Store. Distributing and managing corporate apps for iOS devices felt seamless, predictable, and secure. But with the winds of change blowing from the European Union, a new reality is dawning with the release of iOS 17.4 SDK: iOS sideloading.\nThis blog post aims to navigate this uncharted territory for MDMs, exploring the potential impact of sideloading on your app deployment strategies and overall device management practices.\nA Recap: What is Sideloading?Traditionally, iOS users could only install apps downloaded from the official App Store. However, sideloading breaks down this wall, allowing apps to be installed directly from sources outside the App Store, like websites or developer platforms.\nClearing the Confusion:Before diving into the potential implications, let's address the key point of confusion: sideloading for individual users is NOT currently available and is not guaranteed to be as a feature. The EU's Digital Markets Act requires app distribution to be more open and competitive, prompting this development. Apple must provide alternatives to its App Store-dominated ecosystem under the law. This move relies on sideloading, the ability to install apps from outside the App Store. It opens third-party app markets, giving users more software options.\nThe EU and the Sideloading SagaThe European Union's Digital Markets Act (DMA) aims to foster fairer competition in the digital market. One of its key requirements is for Apple to open up its ecosystem, allowing alternative app stores and payment methods on iOS devices within the EU. While the exact implementation remains under development, it's clear that sideloading, in some form, is coming to iOS devices in the EU.\n","externalUrl":null,"permalink":"/posts/beyond-the-walled-garden-what-does-ios-sideloading-mean-for-mdms/","section":"Posts","summary":"For years, Mobile Device Management (MDM) solutions have thrived within the controlled environment of Apple's App Store.","title":"Beyond the Walled Garden: What Does iOS Sideloading Mean for MDMs?","type":"posts"},{"content":" Intune allows you to enroll both personal and organization-owned devices with the following options: BYOD: Android Enterprise personally owned devices with a work profileAndroid Enterprise corporate-owned dedicated devices (COSU)Android Enterprise corporate owned fully managed (COBO)Android Enterprise corporate-owned work profile (COPE)Android Open Source Project (preview) (AOSP)Android device administrator (DA) There is an excellent Visio guide from MS that can be downloaded here.\nBefore enrolling in the Android devices, you must connect your Intune tenant account to your Managed Google Play account, also called Enterprise Google Play Store. Once you connect your tenant to Google Play, the below four Android Enterprise apps will be automatically added to “Android Apps” in your Intune portal:\nMicrosoft IntuneMicrosoft AuthenticatorIntune Company PortalManaged Home Screen Pre-requisites: Connect your Intune tenant to your Managed Google Play account 1. MEM Admin Center, navigate to Devices \u003e Android \u003e Android Enrollment \u003e Managed Google Play\n2. Click on I agree and then on Launch Google to connect to launch the Managed Google Play website. It will open in a new window.\n3. Click Get started 4. Enter your enterprise account details and click Next. ( (Please use a corporate id as preferably, it should be a service account. Avoid using your personal Gmail ID.) 5. The next step is optional; you can proceed to set up the Managed Google Play by agreeing to Google Play T\u0026Cs.\n6. Click Complete Registration, and the connection is made 👍\n7. Now, you will notice that all the Enrollment Profile options are enabled for Android Enrollment.\n","externalUrl":null,"permalink":"/posts/bring-android-to-work-manage-android-devices-with-intune-2/","section":"Posts","summary":"Intune allows you to enroll both personal and organization-owned devices with the following options: BYOD: Android Enterprise personally owned devices with a work profileAndroid Enterprise corporate-owned dedicated devices (COSU)Android Enterprise corporate owned fully managed (COBO)Android Enterprise corporate-owned work profile (COPE)Android Open Source Project (preview) (AOSP)Android device administrator (DA) There is an excellent Visio guide from MS that can be downloaded here.","title":"Bring Android To Work - Manage Android Devices With Intune","type":"posts"},{"content":" This blog post describes the key concepts of the ‘\u0026#8221;Bring Your Own Device\u0026#8221; (BYOD) scenario and will also suggest measures you can use to mitigate the risks associated with allowing BYOD in your organization.\nBYOD Bring Your Own Device, commonly known as \u0026#8220;BYOD\u0026#8220;, allows employees to use their personally owned device(s) for work purposes that allow them to access corporate data/resources on their personal devices.\nFew basic advantages of allowing BYOD in your organization are:\nGreater flexibility.Increase mobility.Improved efficiency and productivity.Reduced cost for hardware procurement.No Training Required Like any other technology, it also has its own disadvantages:\nHigh-Security Risk. Difficult Data Retrieval. Legal Issues.Complex IT support Drivers for BYOD Before allowing your users/employees to enrol their personal devices in your MDM solution, determine what you want to achieve with BYOD. Think over what you want to achieve with it. Few things to consider:\nWhat and how will BYOD be used? Which business functions are you trying to achieve with this concept?Who will be the primary users for it? Will you allow for the whole organization or only a subset of users?What all platforms (Windows, macOS, Android, iOS) will you allow to enrol? And what will you restrict?What will be the minimum OS/hardware requirements?How flexible will you be in your security policies/configurations? Alternatives Before jumping on to BYOD, you must think and plan for the alternatives to allowing users to enrol their personal devices in your MDM solution.\nThe different platform provides different combinations for this. Android, for example, has the below four options to choose from for configuring \u0026amp; planning your mobile landscape:\nCorporately Owned, fully ManagedCorporately Owned with work profile EnabledCorporate Owned, dedicated devicePersonally Owned with work profile At the same, the iOS family also have its own configurations to support this:\nUser enrollmentDevice enrollmentDetermine based on the user device As it is said that ‘there is no one-size-fits-all, it is recommended that you carefully plan your BYOD solution by mixing both solutions, i.e. Corporate Owned + Personal Owned.\nList down the Why, What, Who \u0026amp; How? Before configuring any policies or profiles in your MDM solution, write down all possible considerations for using BYOD:\nWhat platforms will be allowed?What is the minimum standard for operating systems \u0026amp; patches allowed before the device is enrolled?What all security policies will be enforced? What are the different options for enforcing security controls?How restrictive and strict will the security policies be?How will you enforce conditional access?How will you protect sensitive data?How will you protect user identities?How will you differentiate corporate data from user data?What will be the process for security breaches/incidents?Who will use the BYOD services?How will user education be driven? The list is endless, but you might have an overview of how you will plan the rollout of the BYOD service.\nSecurity Controls Once you have ironed-out all the aspects for introducing BYOD for your users, the next most important step is too define security controls to ensure that there is no leakage of corporate data from end-user\u0026#8217;s personal devices.\nThe security measures depend upon how you chose the deployment approach for BYOD. Few mandatory measures to enforce are:\nEnforce conditional access.Force encryption of corporate data at-rest \u0026amp; in-transitEnforce Multi-Factor authentication control to access any corporate resource from personal devices.Give access only to corporate resources that the user or group requires on their personal devices. Do not expose entire environment/resources on personal devices.Block legacy operating systems, browsers, authentication protocols, unpatched \u0026amp; compromised devices.Enforce user sign-in risk assessmentBlock transfer of data to \u0026amp; from remote desktop sessions \u0026amp; work profiles on mobile devices.Disable clipping data to dashboards in remote dashboard sessions.Block sideloading of apps.Enforce ‘Terms \u0026amp; Conditions’ from MDM solution so that users cannot use corporate resources without accepting them. The components that make up the BYOD are illustrated below:\nUse Intune to Secure Your Corp Data on BYOD The following components of Microsoft Intune should be used for configuring BYOD\nConditional Access\nAn example for configuring CA for your BYOD is as below:\nApp Configuration Policies\nApp protection policies are applied to your corporate apps/data enabling additional layers of security; an example:\nDevice Enrolment Restrictions\nDevice Enrolment Restrictions can be used to manage enrolment restrictions that define what \u0026amp; how many devices can enrol into management with Intune.\nMaximum number of enrolled devices.Device platforms that can enrol:Android device administratorAndroid Enterprise work profileiOS/iPadOSmacOSWindowsPlatform operating system version for iOS/iPadOS, Android device administrator, Android Enterprise work profile, Windows, and Windows Mobile.Restrict personally owned devices (iOS, Android device administrator, Android Enterprise work profile, macOS, Windows, and Windows Mobile only). Microsoft Cloud App Security\nIf you have M365 E5 then Microsoft Cloud App Security (MCAS) can be used\nSession Controls\nYou can use session controls for cloud apps to control in-session activities and can also apply access controls to block the same set of native mobile and desktop client apps, thereby providing comprehensive security for the apps.\nConclusion I hope that with this post you will be able to support the use of Bring Your Own Device (BYOD) scenarios in your organisations by allowing the use of personal devices along with securing access to your corporate data. The next post will be a step-by-step enrollment guide for enrolling a personal iOS \u0026amp; Android device in Intune. Stay In(tuned). Image by macrovector on Freepik\n","externalUrl":null,"permalink":"/posts/bring-your-own-device-plan-configure-and-enrol-your-personal-devices-securely/","section":"Posts","summary":"This blog post describes the key concepts of the ‘\u0026#8221;Bring Your Own Device\u0026#8221; (BYOD) scenario and will also suggest measures you can use to mitigate the risks associated with allowing BYOD in your organization.","title":"Bring Your Own Device - Plan, Configure and Securely Enrol Your Personal Devices","type":"posts"},{"content":" Earlier, we discussed the pros and cons of having personal devices enrolled in MDM and the best practices to avoid any possible data leakage. In this post, I will help you with configuring your Intune tenant to allow enrollment of personal devices and will also make it an automated process.\nOverview We all know that there are multiple options available in Intune for enrolling and managing Android devices, but for this post, I will stick to “Personally-Owned Devices with Work Profile“.\nPersonally-owned devices with work profiles are used to manage corporate data and apps on user-owned “personal” Android devices. By default, enrollment of personally-owned work profile devices is enabled, and no specific configuration is required. However, I personally believe that if you do not have all security measures like MAM, Zero-Trust and MFA, then it should be allowed in a controlled way.\nSometimes Restrictions Are Helpful Don’t use the Bing-Bang approach if you are planning for the BYOD rollout or starting with it. Thankfully, Microsoft allows you to restrict enrollment based on device attributes. When restrictions are applied, users on restricted devices are blocked from enrolling their devices in Microsoft Intune. For BYOD, you need to use “Device platform restrictions” to allow or block devices based on platforms, versions, and management types.\nYou can apply this restriction to devices running:\nAndroid device administratorAndroid Enterprise work profileiOS/iPadOSmacOSWindows 10/11 You can further enforce restrictions based on these platforms’ maximum/minimum OS versions. To configure the device platform restriction policy, log in to your Microsoft Endpoint Manager admin center and navigate to Devices \u003e Enroll devices \u003e Enrollment device platform restrictions and select the required platform and then Create restriction.\nProvide the name and description of the restriction.\nConfigure the restrictions for the selected platform based on the requirement:\nSimilarly, the restrictions can be configured for the iOS family also:\nOn the Assignments page, Search and Add groups only allow users in these groups to enrol device their personal devices in Intune. Conditional Access The next layer of security is conditional access. If you are not using Multi-Factor Authentication, make a U-Turn; configure and enable it before proceeding further.!\nAs MAM is the recommended approach with BYOD for securing corporate data on personal devices without Conditional Access, the corporate data remains vulnerable on users’ personal devices.\nConditional Access is a gatekeeper that checks for user identity, location, and device health and can allow or deny access based on conditions configured.\nConfigure device compliance policies to ensure the device meets your configuration and security requirements. The compliance policy evaluation will determine the device’s compliance status, which will be reported to Intune and Azure AD. Based on the CA \u0026 compliance policy evaluation, the device will be allowed or blocked access to your corporate data/resources.\nMobile Application Management The next layer for securing your corporate data on personal devices is – MAM. MAM allows you to manage and protect your organization’s data within an application. Many public store apps, such as the Microsoft Office apps, can be managed by Intune MAM.\nThere are two scenarios for which MAM can be used:\nManaged devices (MDM) – devices that are enrolled and managed through IntuneUn-enrolled devices – devices that are not enrolled in Intune The app management capabilities are well documented in MS Docs.\nWith Intune, different app configuration policy channels are:\nManaged Devices – The entire device is managed by IntuneManaged Apps – For the app that has either integrated the Intune App SDK or has been wrapped using the Intune Wrapping Tool and supports App Protection Policies (APP). To protect corporate data in your LoB apps with MAM policies, you must wrap them. I have written a post on wrapping the app. Pull up the article and wrap up your app. Now, the app protection policies can differ based on your requirement. This is what I have configured in my tenant:\nDefine how you want to apply the policy Configure Data Transfer restrictions Make sure you force encryption and restrict web content transfer with Edge as managed browser.\nTIP If you can push \u0026 enforce Microsoft Defender for Endpoint, combining it with CA, it will give you full-proof security. Scope of Automation By now, everything is configured, and you are ready to roll out BYOD. If your organization doesn’t allow everyone to enrol their personal devices in Intune, you can automate the entire process. It ensures no scope for human errors and automates the enrollment\nYou have multiple options to automate your BYOD rollout using the following:\nPowerApps ServiceNow The flow could be somewhat like this:\nYou simply need to create a form where users requests to enrol their personal devices. Flow for automating BYOD in a controlled way In the next post, I will share the enrollment guides for Android \u0026 iOS and discuss “User Enrollment” and “Device Enrollment” features for iOS devices. Do share your feedback \u0026 suggestions.\n","externalUrl":null,"permalink":"/posts/bring-your-own-devices-byod-configure-it-the-right-way/","section":"Posts","summary":"Earlier, we discussed the pros and cons of having personal devices enrolled in MDM and the best practices to avoid any possible data leakage.","title":"Bring Your Own Devices (BYOD) - Configure It The Right Way!","type":"posts"},{"content":"Streamlining the device enrolment process is crucial for administrators and enterprises implementing BYOD policies. With\u0026nbsp;Microsoft Intune's web-based device enrolment for iOS/iPadOS, setting up and managing devices becomes more efficient than ever. By eliminating the need for the Company Portal app, this solution offers a faster enrollment experience. As an MDM admin, you can now easily enrol personal devices in Microsoft Intune without requiring users to install additional apps. This not only saves time but also enhances productivity by simplifying the enrollment process. In the following sections, we will explore the benefits of web-based device enrolment and provide step-by-step instructions on how to set it up effectively.\nWhat is Just-in-Time Registration?Just-in-Time Registration allows users to enroll their iOS devices seamlessly by simply signing in with their corporate credentials. This eliminates the need for complex manual configurations and reduces the time and effort required for device enrolment. By leveraging\u0026nbsp;Entra ID authentication, just-in-time registration ensures a secure and efficient enrolment process.\nFor steps, see\u0026nbsp;Set up JIT registration in Intune. Return to this article when you're done so you can continue to the next step.\nJust in Time Registration for iOS/iPadOSOverview Just in Time, more commonly referred to as JIT, is a management philosophy used in several industries for decades. “Waste” is taken in its most general sense and includes time, resources, and materials. There are many elements to JIT in production; however, when referring to Mobile Dev…Intune - In Real LifeSomesh PathakDuring the enrolment process, users will be prompted to sign in with their corporate credentials, which will authenticate them through Entra ID and automatically register their device with Intune. It's important to consider some settings and considerations for successful implementation of just-in-time registration:\nEnsure that your organization has an active Apple Business Manager or Apple School Manager account.Verify that your devices are eligible for just-in-time registration based on Apple's requirements.Configure any necessary network settings to allow communication between enrolled devices and Intune.Creating an Enrollment ProfileCreate an enrollment profile for devices enrolling via web-based device enrollment. The enrolment profile triggers the device user's enrolment experience, and enables them to initiate enrolment in Safari.\nIn the Microsoft Intune admin center, go to\u0026nbsp;Devices\u0026nbsp;\u0026gt;\u0026nbsp;iOS/iPadOS\u0026nbsp;\u0026gt;\u0026nbsp;iOS/iPadOS enrolment.Select\u0026nbsp;Enrollment types.Select\u0026nbsp;Create profile\u0026nbsp;\u0026gt;\u0026nbsp;iOS/iPadOS.On the\u0026nbsp;Basics\u0026nbsp;page, enter a name and description for the profile so that you can distinguish it from other profiles in the admin center. Device users don't see these details.Select\u0026nbsp;Next.On the\u0026nbsp;Settings\u0026nbsp;page, for\u0026nbsp;Enrollment type, select\u0026nbsp;Web based device enrolment.Select\u0026nbsp;Next.On the\u0026nbsp;Assignments\u0026nbsp;page, assign the profile to all devices, or select specific groups.Select\u0026nbsp;Next.On the\u0026nbsp;Review + create\u0026nbsp;page, review your choices, and then select\u0026nbsp;Create\u0026nbsp;to finish creating the profile.Distributing Company Portal as Web ClipSince the Company Portal app is no longer a necessity, it's highly recommended to furnish users with a link to the Company Portal website instead. This approach offers a straightforward way for users to access potential apps and check their device status. The most convenient way to facilitate this is by deploying a web clip to the users' devices.\nSign in to the\u0026nbsp;Microsoft Intune admin center.Navigate to\u0026nbsp;Apps\u0026nbsp;\u0026gt;\u0026nbsp;iOS/iPadOSIn the\u0026nbsp;Select app type, select\u0026nbsp;iOS/iPadOS web clipClick\u0026nbsp;Select.On the\u0026nbsp;App information\u0026nbsp;page, add the following information:Preparing Employees for EnrollmentBefore initiating the device enrollment process, it's crucial to effectively communicate with employees and provide them with the necessary support and resources. This ensures a smooth and successful enrolment experience.\nTo inform employees about the enrolment process, consider the following effective ways:\nEmail Communication: Send out a detailed email explaining the purpose of device enrolment, its benefits, and step-by-step instructions on how to proceed. Clearly outline any prerequisites or requirements, such as having an active corporate account or network connectivity.Intranet or Internal Portal: Utilise your organization's intranet or internal portal to create a dedicated page that provides comprehensive information about device enrolment. Include FAQs, video tutorials, and any relevant documentation to assist employees in understanding and completing the process.Training Sessions: Conduct training sessions where your IT Support can learn about the enrolment process firsthand. This allows for interactive discussions, addressing questions, and providing real-time guidance.End User ExperienceWhen an employee attempts to sign into a work app on their personal device, the app alerts them to the enrollment requirement and redirects them to the Company Portal website for enrollment.\nAlternatively, you can provide employees and students with a URL that opens the Company Portal website. If you aren't utilizing conditional access, it's important to share the enrollment link with device users so that they know how to initiate enrollment. The link to share is:\nportal.manage.microsoft.com/conditionalaccess/enrollment\nThis section provides the high-level enrollment steps for device users.\nHow Does It Works At Device Level The events of interest included profile installations, communication with the MDM server, security policy updates, and compliance checks. MDM Profile Installation EventsInitiation of Installation: The logs show when Intune initiated a power assertion to commence the installation of a management profile, identified by entries tagged with \"Starting MDM power assertion\" and \"InstallProfile.\"Profile Installation Attempt: Following initiation, the logs shows an \"Attempting to perform MDM request: InstallProfile,\" indicating that the device made an attempt to install the MDM profile.Completion of Installation: The installation attempt transitions to a completion phase, marked by \"Ending MDM power assertion\" which signifies the end of the profile installation process.MDM Server Communication Events:Job Block Enqueueing: The logs detail how job blocks are enqueued, that is when the device's preparation to send or receive data from Intune.Job Block Execution: The execution of job blocks shows active communication with Intune, showing the transmission of commands/policies.ConclusionImplementing web-based device enrollment not only enhances productivity but also strengthens Bring Your Own Device (BYOD) policies within organizations. It provides you as an administrators greater control over device configurations while ensuring a seamless user experience. With improved efficiency and user satisfaction, web-based device enrollment in Microsoft Intune is a valuable tool for organizations looking to simplify and optimize their iOS device onboarding process.\n","externalUrl":null,"permalink":"/posts/byod-reimagined-a-web-based-enrollment-journey-for-ios/","section":"Posts","summary":"Streamlining the device enrolment process is crucial for administrators and enterprises implementing BYOD policies.","title":"BYOD Reimagined: A Web-Based Enrollment Journey for iOS","type":"posts"},{"content":" If you enroll iOS/iPad OS devices using Apple\u0026#8217;s ADE method, these devices will not be compatible with the public store version of the Comp Portal app. It requires you to configure the Comp Portal app to support iOS/iPadOS DEP devices using the app configuration policy, failing to which users will report issues with launching the company portal. If you use CA policies, your users may be blocked from accessing corp data on their devices. Follow the below steps to configure the app configuration policy for the comp portal:\n1. Open the Intune portal and navigate to Apps and iOS Apps.\n2. Add Intune Comp portal app or use ABM to add the Comp portal to Intune\n3. Go to Apps -\u0026gt; App Configuration Policies and click Add to create a new policy.\n4. Select Managed Devices from the dropdown\n5. On the Basics page, set the following details: Name\u0026nbsp;\u0026#8211; The name of the profileDescription\u0026nbsp;\u0026#8211; The description of the profileDevice enrollment type\u0026nbsp;\u0026#8211; This setting is set to\u0026nbsp;Managed devices.Select\u0026nbsp;iOS/iPadOS\u0026nbsp;as the\u0026nbsp;Platform.Select\u0026nbsp;Intune Comp Portal App\u0026nbsp;from the\u0026nbsp;Targeted app\u0026nbsp;pane and click\u0026nbsp;OK. 6. \u0026nbsp;From the dropdown, select\u0026nbsp;Enter XML data\u0026nbsp;and enter values for the XML property list as\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;shown below:\n\u0026lt;dict\u0026gt;\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026lt;key\u0026gt;IntuneCompanyPortalEnrollmentAfterUDA\u0026lt;/key\u0026gt;\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026lt;dict\u0026gt;\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026lt;key\u0026gt;IntuneDeviceId\u0026lt;/key\u0026gt;\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026lt;string\u0026gt;{{deviceid}}\u0026lt;/string\u0026gt;\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026lt;key\u0026gt;UserId\u0026lt;/key\u0026gt;\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026lt;string\u0026gt;{{userid}}\u0026lt;/string\u0026gt;\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026lt;/dict\u0026gt;\n\u0026lt;/dict\u0026gt;\n7. Click\u0026nbsp;Next\u0026nbsp;and assign the policy to your iOS device group(s).\nTip: If the company portal app is deployed via the VPP token on all your iOS devices, please ensure that you have set the VPP token to\u0026nbsp;Auto-update the apps.\u0026nbsp;\nOtherwise, users will receive an \u0026#8220;Update unavailable with this Apple ID\u0026#8221; error while opening the Comp Portal app.\n","externalUrl":null,"permalink":"/posts/cannot-update-comp-portal-app-2/","section":"Posts","summary":"If you enroll iOS/iPad OS devices using Apple\u0026#8217;s ADE method, these devices will not be compatible with the public store version of the Comp Portal app.","title":"Cannot Update Comp Portal App!","type":"posts"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":" When planning to deploy certificates with Intune, there will be two obvious questions that will pop up:\nDo I need to deploy a user certificate or a device certificate?What can I do with these certificates? The most common scenarios include network authentication using a device or user certificate. Such as authentication to the VPN, corporate Wi-Fi or corporate LAN using the device or user certificate. You can also use these certificates for signing \u0026amp; encrypting emails.\nSome Basics first...\nAccess any application has to go through two steps-\u0026nbsp;\nAuthentication\u0026nbsp;\u0026#8211; The user’s authenticity is checkedAuthorization\u0026nbsp;\u0026#8211; \u0026nbsp;The user is subjected to some conditions, depending on which a decision is made on whether access should be given or denied. \u0026nbsp; Think of those conventional times when users were required to enter their credentials to authenticate to corporate connections or resources. The concept of using certificate-based authentication makes it more secure and seamless as users are no longer required to provide their credentials every time to authenticate.\nUsing Intune, you can deploy two types of certificates, i.e.,\u0026nbsp;Simple Certificate Enrollment Protocol (SCEP) and Public Key Cryptography Standards (PKCS).\u0026nbsp;\nSCEP or PKCS ???\u0026nbsp;Both have their own advantages and disadvantages, so please discuss this thoroughly within your teams/organization to decide which one to configure and deploy.\u0026nbsp;\nHowever, there are certain pre-requisites before you deploy the SCEP or PKCS certificate(s); you should have:\nCertification Authority\u0026nbsp;\u0026#8211; \u0026nbsp;It can be a Microsoft CA or a third-party CA.On-premises infrastructure\u0026nbsp;\u0026#8211; Depending on what type of certificate (PKCS, SCEP, or Imported PKCS) you will deploy.Trusted root certificate\u0026nbsp;\u0026#8211; Trusted certificate profile in Intune Once a trusted root certificate is deployed, you can deploy certificate profiles to provide users and devices with certificates for authentication.\u0026nbsp;\nSupported platforms for deploying certificate profiles \u0026nbsp;Android Device Administrator (Legacy)\u0026nbsp;Android Enterprise \u0026#8211; Fully Managed (Device Owner)\u0026nbsp;\u0026nbsp;Android Enterprise \u0026#8211; Dedicated (Device Owner)\u0026nbsp;\u0026nbsp;Android Enterprise \u0026#8211; Corporate-Owned Work Profile\u0026nbsp;\u0026nbsp;Android Enterprise \u0026#8211; Personally-Owned Work Profile\u0026nbsp;\u0026nbsp;Android (AOSP)\u0026nbsp;macOS\u0026nbsp;iOS/iPadOSWindows 10/11\u0026nbsp; ","externalUrl":null,"permalink":"/posts/certificates-intune-2/","section":"Posts","summary":"When planning to deploy certificates with Intune, there will be two obvious questions that will pop up:","title":"Certificates \u0026 Intune","type":"posts"},{"content":"With this blog, I'll share my personal journey with Windows 365 Cloud PC, a path filled with discovery, challenges, and insights. As an IT professional, I'm always on the lookout for cutting-edge solutions that streamline workflows and enhance productivity. My adventure with Windows 365 Cloud PC began out of curiosity and a desire to understand how cloud computing could reshape our conventional understanding of personal computing.\nI'll take you through my initial impressions, setup experiences, management practices, and the overall impact of integrating Windows 365 Cloud PC into my daily life. Whether you're an IT enthusiast, a professional looking for efficient solutions, or just curious about the future of cloud computing, I hope my experiences will shed light on what it's like to step into the realm of Windows 365 Cloud PC and inspire you to explore this technology yourself.\nSo, let's embark on this journey together, charting new territories in the ever-evolving landscape of cloud computing!\nWhat is Windows 365 Cloud PC?Windows\u0026nbsp;365 Cloud PC is a revolutionary cloud-based solution offered by\u0026nbsp;Microsoft\u0026nbsp;that brings the power of Windows operating system to the cloud. It allows users to access their personalised Windows desktop from any device with an\u0026nbsp;internet\u0026nbsp;connection, providing flexibility and mobility like never before. With Windows 365 Cloud PC, users can seamlessly transition between devices while enjoying the same familiar Windows experience. This innovative solution caters to tech enthusiasts, professionals, and businesses alike, offering enhanced productivity, security, and scalability. Whether you're working remotely or collaborating with colleagues, Windows 365 Cloud PC empowers you to work efficiently and effectively.\nhttps://www.microsoft.com/en-us/windows-365Distinguishing FeaturesFlexibility: Access your desktop, apps, settings, and content from any device.Consistency: Provides a uniform experience regardless of the device used.Security: Hosted on Microsoft's secure cloud, ensuring data protection and compliance.Windows 365 is available in multiple editions:\nWindows 365 Business\u0026nbsp;is made specifically for use in smaller companies (up to 300 seats) who want ready-to-use Cloud PCs with simple management options.Windows 365 Enterprise\u0026nbsp;is for larger companies who want unlimited seats for creating Cloud PCs.Windows 365 Government\u0026nbsp;is a service that spans across a regulated US Government Community Cloud (GCC) and a public facing cloud.Windows 365 Frontline\u0026nbsp;helps organizations save costs by providing a single license to provision up to three Cloud PCs for non-concurrent use.Setting Up Windows 365 Cloud PCWindows 365 Cloud PC offers a seamless setup process, allowing users to quickly get started with their cloud-based Windows experience. Before diving into the setup, it's important to ensure that your system meets the necessary requirements and\u0026nbsp;compatibility\u0026nbsp;criteria.\nStreamlined Deployment Process:With Windows 365, deploying Cloud PCs becomes a breeze. The service simplifies the entire setup process, reducing the time and effort required to provision new machines. You can easily configure and customise Cloud PCs based on their organization's needs through the\u0026nbsp;Microsoft Intune\u0026nbsp;admin center. This streamlined deployment process allows businesses to quickly scale up or down as needed, ensuring optimal resource allocation and efficiency.\nAzure Networking and Security:One of the significant advantages of Windows 365 is its\u0026nbsp;seamless integration\u0026nbsp;with Microsoft\u0026nbsp;Azure networking\u0026nbsp;and security capabilities. By leveraging existing investments in Azure, organizations can ensure a secure and reliable Cloud PC environment. With Windows 365, businesses can confidently deploy Cloud PCs knowing that they are backed by industry-leading security measures.\nBy combining a streamlined deployment process with Azure networking and security capabilities, Windows 365 empowers businesses to optimize their Cloud PC deployment strategy while maintaining a high level of data protection and reliability. Enhanced Identity and Authentication ServicesWindows 365 provides enhanced\u0026nbsp;identity and authentication services, ensuring a secure and reliable environment for Cloud PC users. Let's explore the key features in this category:\nFlexible Licensing ModelSeamless Integration with Microsoft IntuneImproved Identity and Authentication ServicesThe following diagrams show the logical architecture for a Microsoft Entra join configuration using a Microsoft hosted network, a Microsoft Entra join configuration using a customer's network connection (\"bring your own network\"), and a Microsoft Entra hybrid join configuration using an ANC, respectively.\nMicrosoft Hosted NetworkNetwork Connection (\"Bring Your Own Network\")On-premises network connection (OPNC)Provisioning a Windows 365 Cloud PCProvisioning in Windows 365 is the automated process that:\nCreates a Cloud PC virtual machine.Sets it up for the user.Completes other tasks that prepare it to be used.Sends access information to the user.","externalUrl":null,"permalink":"/posts/exploring-the-cloud-frontier-how-to-get-started-with-windows-365-cloud-pc/","section":"Posts","summary":"With this blog, I'll share my personal journey with Windows 365 Cloud PC, a path filled with discovery, challenges, and insights.","title":"Charting New Territories: My Experience with Windows 365 Cloud PC","type":"posts"},{"content":"","externalUrl":null,"permalink":"/posts/chatbot/","section":"Posts","summary":"","title":"chatbot","type":"posts"},{"content":" Talk of The Town In the last few days, ChromeOS \u0026amp; Chrome Enterprise have become the buzzwords for the Mobile Device Management world. Microsoft Ignite \u0026#8211; more than two weeks now, it seems Microsoft still has many more secrets to reveal in the crazy world of device management.\nLike you, I was also super excited to test the new feature. In fact, still excited, as there is so much to explore into it. Let\u0026#8217;s get started, then. What is Chrome Enterprise Google Chrome Enterprise, introduced by Google in 2017, is a business-based workplace solution for deploying and managing Chrome devices, Chrome browser and Chrome OS. Chrome Enterprise provides quality, easy-to-access and navigate cloud-based administrative tools and integrations with third-party services and offers 24/7 support for IT decision-makers and operators.\nChrome Enterprise offers the general Chrome OS features with its automatic updates, multi-layered security, remote desktop, application virtualization support, preference syncing and cloud or native printing.\nChrome Enterprise is offered under a yearly subscription service with a price charged per device.\nAmong Chrome Enterprise, added management features are:\nGoogle Play Store appsChrome OS extensionsChrome web browserMicrosoft Active DirectoryPrinter managementFlexible fleet management As an administrator, the Google Admin console is where you manage all your Google Workspace services. Google Workspace (formerly known as Google Apps and later G Suite) is a collection of cloud computing, productivity and collaboration tools, software and products developed and marketed by Google. You can relate it to the Azure admin portal, where you add or remove users, manage billing, set up mobile devices, and more. The Admin console can be accessed at admin.google.com\nIntune \u0026amp; Google Enterprise \u0026#8211; Some Facts Before you start managing your trendy Chromebooks or ChromeOS, you need to configure a connection between Intune \u0026amp; Google Workspace, and for that, you will need a connector \u0026#8211; and for that, you will need a Google Workspace Subscription. 😃😎\nIn this article, I will help sign up for a Google Workspace subscription and set up and monitor a connection between the Google Admin console and Microsoft Intune.\nThis connector will help you to:\nSync device information between the Google Admin console and Microsoft Intune. View device information in your device inventory lists in the Microsoft Endpoint Manager admin center. Apply remote actions, such as deprovision, restart, lost mode, and wipe in the admin center. ChromeOS or Chrome Enterprise devices are enrolled through Google Admin Center not Intune! Set-Up Google Admin / Google Workspace As a first step, we need to have an active subscription to Google Workspace. In the Basic plan, you get the following:\nThe complete set of G Suite apps with full enterprise-level functionality. 30 GB of cloud storage per person. Basic admin-level controls let you add/remove users, enable security and more. You’ll have to subscribe to the Business plan if you want more features with additional functionality as:\nCloud Search to search through all G Suite apps to get you the desired results. The ability to recover company data from ex-employees’ accounts.Advanced admin features let you set how long emails and chats are retained, where your data is stored, and more. If you want even more security and control over your data in G Suite, the Enterprise plan:\nAn advanced console from where you can manage all users, apps, and devices on G Suite.Control sharing of sensitive information. Get advanced enterprise-grade security and reports on how your data is being used. You can start with a 14-day free trial to use Google Workspace. The steps are as below:\nTo start, fire up your favourite browser and navigate to workspace.google.com. On this page, click on the blue ‘Get Started button. The next page will be the sign-up page. Enter your business name, the number of employees and the country in which your business is located. After typing this info, click ‘Next’. Next, click on ‘I have one I can use to enter your domain name. If you don’t have one, click on ‘I don’t have one. Click ‘Next’ and on the next page where you’ll have to enter the exact address of your business. This is required to register your domain. The next page will ask you to create your first Google Admin username. Create a secure password and remember it. Once you sign in, you’ll be asked to review your Google Workspace plan. Click Next to confirm. The next part is exactly the same steps you do while setting up the M365 tenant. i.e. adding \u0026amp; verifying your custom domain, adding new users and assigning them roles and services. This is how your new Google Workspace Admin Center will look like once you are done with all these configurations:\nLooks cool 😎👩‍💻🏆\nConnect Intune with Google Workspace Now, we have to make our Intune tenant talk to your Google Workspace Admin Console. For this, you need to follow the steps as shown:\nSign in to the Microsoft Endpoint Manager admin center. Go to Tenant administration \u003e Connectors and tokens. Select Chrome Enterprise (preview) \u003e Connect. On the Connect to Chrome Enterprise page, select Google Admin console, and then: Sign in to the Admin console. Go to Security \u003e Access and data control \u003e API Controls. Select MANAGE DOMAIN WIDE DELEGATION. Select Add new to create the API client for your connection. Copy the Client ID and OAuth Scopes in the Microsoft Endpoint Manager admin center. Return to the Google Admin console and paste each value in the Client ID and OAutho scopes (comma-delimited) spaces. Intune requires the following scopes:https://www.googleapis.com/auth/admin.directory.device.chromeoshttps://www.googleapis.com/auth/admin.directory.user.readonlyhttps://www.googleapis.com/auth/admin.directory.orgunit.readonly Select Authorize to save all changes. Return to the Microsoft Endpoint Manager admin center and select Launch Google to connect now. Use your Google Admin account when prompted to authenticate with your organization\u0026#8217;s Google Enterprise domain. After you authenticate, the connection is established, and your organization’s enrolled Chrome OS devices begin syncing from the Google Admin console. The status changes to Active when syncing is complete. Monitor connection status Go to Chrome Enterprise (preview) in the Intune admin portal to check the overall health of your connection. Chrome OS devices should appear shortly after the initial connection. Devices will continue to sync periodically and receive updates.\nAvailable details include:\nStatus: Syncing is shown when devices are still being synced. The status changes to Active when syncing is complete.Last check-in: This shows the last time new devices, device details, or remote actions were synced between Microsoft Intune and the Google Admin console.Chrome devices synced: Shows the number of Chrome OS devices synced with Intune.Connected account: This shows the Google Admin account connected to Microsoft Intune. Summary For now, I will end it here and give you some time to play around with your all-new Google Workspace Admin Console. In the next part, I will help you provision a Chrome Enterprise device and get it synced to Intune. Till then, stay In(tuned) and be #intuneinspired. ","externalUrl":null,"permalink":"/posts/chromeos-management-with-intune-preamble/","section":"Posts","summary":"Talk of The Town In the last few days, ChromeOS \u0026amp; Chrome Enterprise have become the buzzwords for the Mobile Device Management world.","title":"ChromeOS Management with Intune - Preamble","type":"posts"},{"content":"This blog dives deep into the recently launched Cloud PKI, a game-changer for simplifying and automating certificate management within your Intune environment.\nFarewell, On-Premises PKI!For years, managing on-premises Public Key Infrastructures (PKI) meant juggling complex configurations, laborious manual tasks, and hefty infrastructure costs. Enter Cloud PKI, a game-changer recently integrated within Intune. This cloud-based service streamlines and automates certificate management, freeing up valuable resources and enhancing security not limited to:\nCloud-native experience:\u0026nbsp;Eliminate the need for on-premises servers, reducing deployment time and simplifying ongoing maintenance.Unified management console:\u0026nbsp;Manage certificates and devices from a single pane of glass within the familiar Intune interface, enhancing efficiency and reducing context switching.Automated lifecycle management:\u0026nbsp;Streamline certificate issuance, renewal, and revocation, freeing up valuable IT resources for higher-level tasks.This guide delves into the advanced integration of Cloud PKI with Intune, aimed at empowering Intune administrators with the knowledge to implement a more secure and efficient management environment.\nDeploying Cloud PKI in Microsoft IntuneDeploying Cloud PKI within Microsoft Intune involves a strategic process aimed at enhancing device management and security across your organization. This deployment enables secure communication, authentication, and encryption for devices managed by Intune. Here's a comprehensive breakdown of the deployment process.\nUnderstanding Cloud PKI in Microsoft IntuneBefore diving into deployment, it's crucial to grasp what Cloud PKI entails. It is a cloud-based public key infrastructure that simplifies certificate management without the need for extensive on-premises infrastructure. It's ideal for securing communications between your devices and the resources accessed by them.\nPlanning Your DeploymentIdentify Certificate Requirements: Determine the types of certificates your organization needs, such as SSL/TLS, email encryption, and device authentication.Evaluate Trust Levels: Consider the trust level required for your certificates. Higher trust levels may necessitate a more complex PKI infrastructure.Choosing a PKI ModelMicrosoft-Managed vs. BYOCA: Decide whether to use Microsoft Cloud PKI or to bring your own CA. Each option has its benefits, with Microsoft-managed offering simplicity and BYOCA offering greater control.\nStep 1: Create root CA in admin centerIntegrating the Microsoft Cloud PKI with Microsoft Intune simplifies the certificate management process, making it an attractive option for organizations looking to deploy Cloud PKI. This approach leverages Microsoft's infrastructure to issue and manage certificates, reducing the complexity and maintenance overhead for your organization. Here's how to get started with configuring the Microsoft Cloud PKI in Intune: Sign in to the Microsoft Intune admin center.Go to\u0026nbsp;Tenant administration\u0026nbsp;\u0026gt;\u0026nbsp;Cloud PKI, and then select\u0026nbsp;Create.For\u0026nbsp;Basics, enter the Name and description for the CA object.Configure the following settings for the root CA:CA type: Select\u0026nbsp;Root CA.Validity period: Select 5, 10, 15, 20, or 25 years. If you want to create a root CA with a custom validity period then you can use\u0026nbsp;Microsoft Graph API\u0026nbsp;to create the CAs.For\u0026nbsp;Extended Key Usages, select how you intend to use the CA.Under\u0026nbsp;Subject attributes\u0026nbsp;enter a\u0026nbsp;Common name (CN)\u0026nbsp;\u0026amp; other properties for the root CA.Under\u0026nbsp;Encryption, enter the\u0026nbsp;Key size and algorithm and click Next.When you're ready to finalize everything, select\u0026nbsp;Create.💡You won't be able to edit these properties after you create the CA. If needed, select\u0026nbsp;Back\u0026nbsp;to edit the settings and ensure they're correct and satisfy your PKI requirements. If later you need to add another EKU, you must create a new CA.Step 2: Create Issuing CA in admin centerFor Intune-managed devices, certificates must be issued by an issuing CA. A SCEP service that serves as a certificate registration authority is automatically provided by Cloud PKI. Using a SCEP profile, it makes certifications requests on behalf of Intune-managed devices to the issuing CA.\nReturn to\u0026nbsp;Tenant administration\u0026nbsp;\u0026gt;\u0026nbsp;Cloud PKI.Enter a\u0026nbsp;Name\u0026nbsp;and optional\u0026nbsp;Description\u0026nbsp;for so you can distinguish this CA from others in your tenant.Select\u0026nbsp;Next\u0026nbsp;to continue to\u0026nbsp;Configuration settings.Select the CA type and root CA source.For root CA source: Select IntuneSelect the required validity period.For\u0026nbsp;Extended Key Usages, select how you intend to use the CA.Under\u0026nbsp;Subject attributes\u0026nbsp;enter a\u0026nbsp;Common name (CN)\u0026nbsp;and other properties for the issuing CA.Review and create.Step 3: Download the certificatesYou need the public keys for both issuing and root CA certificates in order to build the trusted certificate profile needed for Cloud PKI. When requesting a certificate using SCEP certificate profiles, the public keys create a chain of trust between Intune managed devices and Cloud PKI. To download the public keys for these certificates, select Download.\nFor the root CA:\nSign in to the Microsoft Intune admin center.Go to\u0026nbsp;Tenant administration\u0026nbsp;\u0026gt;\u0026nbsp;Cloud PKI.Select a CA that has a root type.Go to\u0026nbsp;Properties.Select\u0026nbsp;Download. Wait while the public key downloads.For the issuing CA:\nReturn to your\u0026nbsp;Cloud PKI\u0026nbsp;list.Select a CA that has an issuing type.Go to\u0026nbsp;Properties.Select\u0026nbsp;Download. Wait while the public key downloads.Step 4: Create the trusted certificate profileCreate one trusted certificate profile for the root CA certificate and one for the issuing CA.\nSign in to the\u0026nbsp;Microsoft Intune admin center.Select and go to\u0026nbsp;Devices\u0026nbsp;\u0026gt;\u0026nbsp;Configuration\u0026nbsp;\u0026gt;\u0026nbsp;Create.Enter the following properties:Platform: Choose the platform of the devices that will receive this profile.Profile: Depending on your chosen platform, select\u0026nbsp;Trusted certificate\u0026nbsp;or select\u0026nbsp;Templates\u0026nbsp;\u0026gt;\u0026nbsp;Trusted certificate.Select\u0026nbsp;Create.In\u0026nbsp;Configuration settings, specify the .cer file for the trusted Root CA Certificate you previously exported.Select\u0026nbsp;Next \u0026amp; assign the profile.Step 5: Create the SCEP certificate profileFor every OS platform you intend to target, create a SCEP certificate profile, just as you did for the trusted certificate profiles. To obtain a leaf client authentication certificate from the issuing CA, using the SCEP certificate profile. This kind of certificate is utilized in scenarios involving certificate-based authentication, such as VPN and Wi-Fi access.\nReturn to\u0026nbsp;Tenant administration\u0026nbsp;\u0026gt;\u0026nbsp;Cloud PKI.Select a CA that has an\u0026nbsp;Issuing\u0026nbsp;type.Go to\u0026nbsp;Properties.Next to the SCEP URI property, select\u0026nbsp;Copy to clipboard.In the admin center,\u0026nbsp;create a SCEP certificate profile\u0026nbsp;for each OS platform you're targeting.In the profile, under\u0026nbsp;Root Certificate, link the trusted certificate profile. The trusted certificate you select must be the root CA certificate that the issuing CA is anchored to in the CA hierarchy.Assign and review the profile. When you're ready to finalize everything, select\u0026nbsp;Create.Create New Root CA Using Graph APIWith Graph API, you may set up your Cloud PKI Root CA. Using the configurations I've previously specified, the Graph API request below will deploy a Root CA. I am using Postman to create the certificate. Make sure you adjust the necessary elements in accordance with your needs:\nYou will get a status code of 200 which means it has been created successfully. Let's verify this in Intune Admin Center:\nNow, let's create the issuing certificate also using Postman.\nStatus 200 - Successfully created. Verify in Intune Admin Center:\nValidate Certificate DeploymentAfter configuring the CA, verify its integration with Intune by issuing a test certificate. Let's verify locally on a device to see the certificates installed:\nConclusionDeploying Cloud PKI in Microsoft Intune is a critical step towards securing your organization's digital communications and data while at the same time reducing your on-prem foot prints.. By carefully planning your deployment, configuring your CA, creating detailed certificate profiles, and closely monitoring the deployment process, you can ensure a successful integration. Remember, a well-implemented Cloud PKI infrastructure simplifies certificate management while bolstering security across your managed devices.\n","externalUrl":null,"permalink":"/posts/demystifying-cloud-pki-in-intune-an-advanced-guide-for-intune-administrators/","section":"Posts","summary":"This blog dives deep into the recently launched Cloud PKI, a game-changer for simplifying and automating certificate management within your Intune environment.","title":"Cloud PKI in Intune: The Future of Secure Certificate Management","type":"posts"},{"content":"Code signing is the process of digitally signing the app before it can be deployed to your user’s devices, and before any app can be installed on an iOS device, it should be code signed by its developer. Code signing your app assures users that it’s from a known source and hasn’t been modified since it was last signed. Before your app can integrate app services, be installed on a device, or be submitted to the App Store, it must be signed with a certificate issued by Apple.\nSounds simple?\nThe entire code signing process is one of the most complex and complicated tasks in managing and distributing your iOS apps. It’s certainly a different experience than compiling and running your code.\nLet’s simplify this without getting into iOS development. In this article, I’ll walk you through the process of code signing \u0026 distributing iOS apps.\nBasics \u0026 Pre-requisites: MacBookXcodeApple Developer ProgramCSR (Certificate Signing Request)CertificatesApp Identifier Provisioning profilesIPA to be signed Let’s get going, then…\nXcode For developing any iOS or macOS app, you will usually require Xcode. It has everything you need to develop, test, or distribute apps across all Apple platforms or if you want to publish your apps to the Apple Appstore. Check out this link to learn more about Xcode. Alright then, grab your MacBook and download Xcode from Appstore.\nPatience is a virtue here: Xcode is around 13Gigs and will take time to download and install on your Mac. Minimum requirements for Xcode: https://developer.apple.com/support/xcode/\nCertificates CSR (Certificate Signing Request): The first step in code signing iOS apps is creating a certificate signing request (CSR). You will need the development and distribution certificates to build and deliver your apps. A Certificate Signing Request (CSR) must be generated to accomplish that. You can use your MacBook to generate a CSR file and a set of private and public keys. This certificate allows you to sign and distribute apps to your end users/devices. Follow the steps to create a CSR on your Mac:\nLaunch Keychain Access on the Mac Choose Keychain Access \u003e Certificate Assistant \u003e Request a Certificate from a Certificate Authority. In the Certificate Assistant page, enter an email address in the User Email Address field. In the Common Name field, enter a name for the key. Leave the CA Email Address field empty. Choose “Saved to Disk” then click Continue. Click on Done. You will have a CSR on your local machine at the end of this process. Apple Developer Program The “Code to customer” pipeline that’s what Apple defines as the Apple Developer Program. Membership to the Apple Developer Program is paid, giving developers everything they need to build, test and deploy apps for Apple platforms. When you sign-up for this, you get a hell lot of features \u0026 benefits, to list a few:\nBeta OS Releases Gain full access to a wide variety of tools Services and Capabilities Developer Events Support, etc It is recommended that you purchase Enterprise Program as it gives you additional benefits as enterprise customers to develop and deploy proprietary, internal-use apps to your users/devices. I will not go into details about Apple Developer Enterprise Program.\nCreate enterprise distribution certificates\nA distribution certificate identifies your team/organization within a distribution provisioning profile. It allows you to submit your app to the Apple App Store or distribute it within your organization through MDM or a secure website. 1. In Certificates, Identifiers \u0026 Profiles, click Certificates.\n2. Click the add button (+) on the top left.\n3. Under Software, select “iOS Distribution” then click Continue.\n4. Click on Choose File to upload the CSR file we generated previously in Step 2 –\nCertificates.\n5. Click Continue.\n6. Click Download, and it will download a certificate (with .cer extension).\n7. To install the certificate in your keychain, double-click the downloaded certificate file.\n8. The certificate appears in the My Certificates category in Keychain Access.\nCreate App Identifier To make the app uniquely identifiable, you must register an App Identifier (App ID). Follow the septs to create an app identifier:\n1. In Certificates, Identifiers \u0026 Profiles, click Identifiers in the sidebar, then click the add button (+) on the top left.\n2. Select App IDs from the list of options and click continue. Confirm App ID type is automatically selected from the options, then click Continue.\n3. Enter a name or description for the App ID in the Description field. (The bundle id should be unique.)\n4. Select the corresponding checkboxes to enable the app capabilities you want to use.\n5. Click Continue, review the registration information and click Register. Create Provisioning Profile A provisioning profile authorizes your app to use certain app services and ensures that you’re a known developer developing, uploading, or distributing your app. A provisioning profile contains a single App ID that matches one or more of your apps and a distribution certificate. Follow the steps below to create a provisioning profile for your app:\n1. In Certificates, Identifiers \u0026 Profiles, click Profiles in the sidebar.\n2. Under Distribution, select Ad Hoc or tvOS Ad Hoc as the distribution method, then click Continue.\n3. Choose the App ID you used for development, which matches your bundle ID, from the App ID pop-up menu, then click Continue.\n4. Select the distribution certificate you want to use, then click Continue.\n5. Provide a name for the Provisioning Profile for identifying the profile in the Apple Developer Portal. Click on Generate.\n6. Click Download.\nCodesign the App Now the fun stuff starts! To recap– we have the distribution certificate and installed it in the keychain; we have also registered our app in Apple Developer Program and downloaded the provisioning profile. Good, then let us get going!\n(Assumptions: You have a MacBook, and you have received the xArchives for the iOS app from your iOS developer, or they have shared the .app file of the app with you.)\nA. Update info.plist:\n1. On your MacBook, Download the xArchives zip file you may receive from your iOS developer and copy the .app file.\n2. Create a folder on your Mac and paste the .app file here.\n3. Right-click on the .app file and select “Show Package Contents.”\n4. Once you are inside the package, locate info.plist file and open it in Xcode.\n5. Now, in Xcode, update the value for “Bundle Identifier” in the info.plist and make sure it matches the app identifier we created for this app.\n6. In the same info.plist, if required, update the app version.\n7. Click File-\u003eSave to save the changes.\nB. Create Entitlement file:\nEntitlements specify which resources of the system an app is allowed to use and under what conditions. It is a configuration list of what you allow or deny for your app. You can use Xcode to create the entitlements.plist file. The format looks like this:\nSave this file in the same folder where you have copied the .app file.\nDownload the provisioning profile from Apple Developer Portal and copy it to the same folder. Rename it to embedded.mobileprovision. So, your folder structure should look like this:\nC. Codesign:\nOpen Terminal at the folder location and follow the below steps to sign the app with your distribution certificate and provisioning profile:\n1. Remove the code signature from the original app:\nrm -rf my.app/_CodeSignature/\n2. Copy your provisioning profile to the app:\ncp embedded.mobileprovision my.app/embedded.mobileprovision\n3. Codesign app with your distribution certificate and entitlements plist. If the app has frameworks from the developers, you can delete them. Else, skip the “Frameworks” parameter. This will replace the signature and update the app with your signatures.\n4. Create a sub-folder eg. Payload and move the .app file into this folder.\n5. In Xcode, build the .ipa\nzip -qr myapp.ipa Payload/\nand Voila! You have successfully signed the app.\nDistribute the App: 1. Sign in to the Microsoft Endpoint Manager admin center.\n2. Select Apps \u003e All apps \u003e Add.\n3. In the Select app type pane, select Line-of-business app under the Other app types.\n4. Click Select. The Add app steps are displayed.\nIn the Add app pane, click Select app package file.In the App package file pane, select the browse button. Then, select an iOS/iPadOS\n.ipa we just build. The app details will be displayed.When you’re finished, select OK on the App package file pane to add the app.On the App information page, add the details for your app. 5. Select the installation intent for the app and assign it to the groups accordingly.\n","externalUrl":null,"permalink":"/posts/code-sign-publish-your-ios-apps-2/","section":"Posts","summary":"Code signing is the process of digitally signing the app before it can be deployed to your user’s devices, and before any app can be installed on an iOS device, it should be code signed by its developer.","title":"Code Sign \u0026 Publish Your iOS Apps","type":"posts"},{"content":" This blog update will help you to troubleshoot the error “Company portal version not supported” when opening the Comp portal app on iOS or iPadOS devices.\nWhen the users open the Comp portal, they receive a message asking them to update the app, and when they click the update button, it redirects them to the App Store. As the users are signed with their personal Apple ID, they receive the message\u0026nbsp;“Update is not available with this Apple ID.”\nSince the app is purchased through Apple Business Manager with a VPP token so the app cannot be updated using a personal Apple ID.\nThis is expected behavior as the device tries to update the app via the end user’s personal Apple store. To avoid this, you have to keep the VPP apps auto-updated. Follow the below steps to configure the auto-update settings for the VPP app: Sign in to the\u0026nbsp;Microsoft Endpoint Manager admin center.Select\u0026nbsp;Tenant administration\u0026nbsp;\u0026gt;\u0026nbsp;Connectors and tokens\u0026nbsp;\u0026gt;\u0026nbsp;Apple VPP tokens.On the list of VPP tokens pane, select\u0026nbsp;Create. The\u0026nbsp;Create VPP token\u0026nbsp;process is displayed.On the\u0026nbsp;Basics\u0026nbsp;page, specify the following information:Token Name\u0026nbsp;\u0026#8211; The token name.Apple ID\u0026nbsp;\u0026#8211; Enter the Managed Apple ID of the account used to create the token.VPP token file\u0026nbsp;\u0026#8211; Download the Apple Business Manager location token (Apple VPP\n\u0026nbsp;\u0026nbsp;token) for your account and upload it here. 5. \u0026nbsp;Click\u0026nbsp;Next\u0026nbsp;to display the\u0026nbsp;Settings\u0026nbsp;page.\n6. \u0026nbsp;On the\u0026nbsp;Settings\u0026nbsp;page, specify the following information:\nTake control of token from another MDM \u0026#8211; Set this option to yes to allow the token to be reassigned to Intune from another MDM solution.Country/Region \u0026#8211; Select the VPP country/region store. Intune synchronizes VPP apps for all locales from the specified VPP country/region store. 7.\u0026nbsp;\u0026nbsp;Type of VPP account\u0026nbsp;\u0026#8211; Choose from\u0026nbsp;Business\u0026nbsp;or\u0026nbsp;Education.\n8. Automatic app updates \u0026#8211; Choose from Yes to enable automatic updates. When enabled, Intune detects the VPP app updates inside the app store and automatically pushes them to the device when it checks in.\n9. I grant Microsoft permission to send user and device information to Apple. You must select I agree to proceed. 10.\u0026nbsp;Review and create\u0026nbsp;the token.\nSynchronise a VPP token You can synchronize the app names, metadata, and license information for your purchased apps in Intune by choosing Sync for a selected token.\n","externalUrl":null,"permalink":"/posts/company-portal-version-not-supported-2/","section":"Posts","summary":"This blog update will help you to troubleshoot the error “Company portal version not supported” when opening the Comp portal app on iOS or iPadOS devices.","title":"Company Portal Version Not Supported!","type":"posts"},{"content":" Part 3 of the mega-series for managing iOS devices\nApple Business Manager\u0026nbsp;provides a quick and smooth onboarding process for devices purchased by organizations either directly from Apple or Apple Authorized Resellers or wireless carriers. After signing up for Apple Business Manager, you need to complete four steps before you can start distributing and managing the devices.\u0026nbsp;Automated Device Enrollment\u0026nbsp;(previously known as\u0026nbsp;Device Enrollment Program) helps organizations to enroll large numbers of devices without users ever touching them.\nWhen a user powers on the device, Setup Assistant, which you can easily configure to modify the out-of-box experience for Apple products, runs with the configured settings, and the device enrolls into Intune.\nAs we have discussed in the previous post that ADE enrollments aren\u0026#8217;t compatible with the App Store version of the Company Portal app. To fix this, you need to configure the app configuration policy for the comp portal as described\u0026nbsp;here.\nPrerequisites before using ADE: Devices purchased through ADE.Valid MDM authorityApple MDM Push Certificate \u0026nbsp;Max volume supported by Intune \u0026amp; ADE:\nMaximum enrollment profiles per token: 1,000 devices.Maximum Automated Device Enrollment devices per profile: 200,000 devices per token.Maximum Automated Device Enrollment tokens per Intune account: 2,000. Create \u0026amp; Upload Apple MDM Push Certificate You need an Apple MDM Push certificate to manage your iOS/iPadOS and macOS devices in Microsoft Intune. This token enables devices to enroll via Intune Comp Portal or ADE/ASM/AC2. Follow the steps mentioned in this article to create the Apple MDM push certificate and upload it to Intune Portal.\nSign in to the\u0026nbsp;MEM Portal, choose\u0026nbsp;Devices\u0026nbsp;\u0026gt;\u0026nbsp;Enroll devices\u0026nbsp;\u0026gt;\u0026nbsp;Apple enrollment\u0026nbsp;\u0026gt;\u0026nbsp;Apple MDM Push Certificate, and follow these steps:\n1. \u0026nbsp;Select\u0026nbsp;I agree.\u0026nbsp;to give Microsoft permission to send data to Apple.\u0026nbsp;\n2. \u0026nbsp;Select\u0026nbsp;Download your CSR\u0026nbsp;to download and save the file locally. The file is used to request a trust relationship certificate from the Apple Push Certificates Portal.\u0026nbsp;\n3. \u0026nbsp;\u0026nbsp;Select\u0026nbsp;Create your MDM push Certificate\u0026nbsp;to the Apple Push Certificates Portal and sign in with your organization id.\u0026nbsp;(Please use a corporate id as your Apple ID\u0026nbsp;preferably, it should be a service account. Avoid using your personal Apple ID.)\n4. \u0026nbsp;\u0026nbsp;\u0026nbsp;Select\u0026nbsp;Create a Certificate.\n5. \u0026nbsp;\u0026nbsp;Read and agree to the terms and conditions. Then select\u0026nbsp;Accept.\n\u0026nbsp;6. \u0026nbsp;Select\u0026nbsp;Choose File\u0026nbsp;and select the CSR file you downloaded in Intune.\n7. \u0026nbsp;\u0026nbsp;Select\u0026nbsp;Upload.\n8. \u0026nbsp;\u0026nbsp;On the confirmation page, select\u0026nbsp;Download. The certificate file (.pem) downloads to\u0026nbsp;your device. Save this file as we will upload it in Intune.\n9. \u0026nbsp;\u0026nbsp;Return to the admin center and enter your Apple ID as a reminder for when you need to\u0026nbsp;renew the certificate.\u0026nbsp;\n10. Browse to your Apple MDM push certificate to upload. Select\u0026nbsp;Upload\u0026nbsp;to finish\u0026nbsp;configuring the MDM push certificate.\nCreate \u0026amp; Upload Apple Automated Device Enrollment token So the pre-requisite is done, but before you can enroll iOS/iPadOS devices, you would need an Apple Server Token (.p7m) file from Apple. This token syncs information from Intune to ADE devices that your corporation owns. It also allows Intune to assign enrollment profiles to Apple and to assign devices to those profiles.\nFollow the steps below to create \u0026amp; upload the ADE token:\n1. \u0026nbsp;In\u0026nbsp;Intune portal, select\u0026nbsp;Devices\u0026nbsp;\u0026gt;\u0026nbsp;iOS/iPadOS\u0026nbsp;\u0026gt;\u0026nbsp;iOS/iPadOS enrollment \u0026gt; Enrollment\u0026nbsp;Program Tokens\u0026nbsp;\u0026gt;\u0026nbsp;Add.\n2. \u0026nbsp;Select\u0026nbsp;Download the Intune public key certificate required to create the token. This\u0026nbsp;step downloads and saves the encryption key (.pem) file locally. The .pem file is used to\u0026nbsp;request a trust-relationship certificate from the Apple Business Manager portal.\n4. \u0026nbsp;Click on \u0026nbsp;Create a token via Apple Business Manager\u0026nbsp;to open the Apple Business Manager\u0026nbsp;portal for creating your ADE token (MDM server).\u0026nbsp;\n5. Sign in with your company\u0026#8217;s Apple ID in Apple Business Manager.\n6. \u0026nbsp;Click your\u0026nbsp;name\u0026nbsp;at the bottom of the sidebar \u0026gt; Preferences, then click \u0026#8220;Add\u0026#8221;\u0026nbsp;to add MDM Server.\n7. Upload the public key you downloaded from Intune in step 2. You can type the server name to identify your MDM tenant quickly.\u0026nbsp;\n8. \u0026nbsp;After you save the MDM server, select it and download the token (.p7m file). \u0026nbsp;\n9. Now, back to Intune portal \u0026#8211; Step 4. Upload the token and click Next and then save.\u0026nbsp;\nAssign devices to the Apple token (MDM server)\u0026nbsp; In\u0026nbsp;Apple Business Manager\u0026nbsp;\u0026gt;\u0026nbsp;Devices, select the devices you want to assign to this token. You can also choose multiple devices simultaneously or define that all devices are by default assigned to this token.Edit device management and select the MDM server you just added.\u0026nbsp; In the next part of this blog, I will help you with creating Enrollment Profile and will walk you through the entire enrollment process for a supervised device. Stay Tuned\u0026#8230; 🙂\n","externalUrl":null,"permalink":"/posts/company-owned-ios-device-automated-device-enrollment-part-i-2/","section":"Posts","summary":"Part 3 of the mega-series for managing iOS devices","title":"Company-Owned iOS Device -Automated Device Enrollment - Part I","type":"posts"},{"content":" Overview As part of its Defender for Endpoint (MDE) enterprise endpoint security platform, Microsoft recently announced that the Mobile Network Protection functionality is generally available to assist organizations in identifying network vulnerabilities affecting Android and iOS devices. As soon as the device is onboarded to MDE and network protection is enabled, MDE will provide protection and alerts for all network-related suspicious events and activities. Let\u0026#8217;s configure these features and see how the network protection works.\nNetwork Safety The way companies operate has seen a significant transformation in recent years as a result of people working from home or using a hybrid work style. Users are now more dependent on network connections for personal and professional obligations, which expose users \u0026amp; their devices to new security dangers—as such, protecting the data becomes the utmost priority for organizations.\nWith the addition of network safety capabilities to MDE for mobile devices, you can now protect your enrolled and unenrolled devices from all network attacks. These features include:\nMITM Fake SSL Certificate SSL Strip Rogue Access Point Unsecured Wi-Fi Captive Portal Malicious certificates Remediation options to change networks when a network is determined as suspicious Configure MDE Network Protection Features for iOS Supervised Devices Network protection in Microsoft Defender for Endpoint is disabled by default. You must follow these steps to configure Network protection in iOS devices. (Authenticator device registration is required for MAM configuration) in iOS devices. Network Protection initialization will require the end user to open the app once.\nLogin to Intune portal. Navigate to Apps \u003e App configuration policies. Click Add and select \u0026#8220;Managed Apps\u0026#8221; to create a new App configuration policy Create a policy for managed app Provide a name and description to identify the policy uniquely Then click on \u0026#8216;Select Public apps\u0026#8217; and choose \u0026#8216;Microsoft Defender\u0026#8217; for Platform iOS/IPadOS Select Defender as a public app In the Settings page, add the following keys: Configuration keys for network protection Configuration policy Assign the policy to the required group. Configure MDE Network Protection Features for Android Enterprise Device Login to Intune portal. Navigate to Apps \u0026gt; App configuration policies. Click Add and select \u0026#8220;Managed Device\u0026#8221; to create a new App configuration policy Create a policy for managed devices Provide a name and description to identify the policy uniquely Then click on the platform and select \u0026#8216;Android Enterprise\u0026#8217;; profile type as \u0026#8220;All\u0026#8221; and choose \u0026#8216;Microsoft Defender\u0026#8217; as the target app. Configure device platform In the settings page, select \u0026#8216;Use configuration designer\u0026#8217; and add \u0026#8216;Enable Network Protection in Microsoft Defender\u0026#8217; as the key and value as \u0026#8216;1\u0026#8217; to enable Network Protection. (Network protection is disabled by default). Configuration keys for network protection If you push your enterprise CA certificate to your devices then make sure that you use \u0026#8216;Trusted CA certificate list for Network Protection\u0026#8217; as the key and in value add the \u0026#8216;comma separated list of certificate thumbprints (SHA 1)\u0026#8217; to establish trust for the root CA(s).\nConfiguration profile Assign the policy to the required group. MDE App Permissions On The Device iOS After successful login to the app, users need to grant pre-existing onboarding permissions for allowing notification permission to enable Defender for Endpoint to notify them when a threat is found. Once permission is accepted, the user will see a page where permission is asked to collect diagnostic data for future product improvements. If the user opts out, no data will be sent. Upon successful onboarding, users will see a new card and a tab labelled \u0026#8220;Network Protection\u0026#8221;. If Wi-Fi is OFF – In-app messaging will guide users to turn on the Wi-Fi from within the app. Once the Wi-Fi has been enabled, the Wi-Fi networks are scanned for threats, and the scan results determine the device\u0026#8217;s state. Android Users need to enable location permissions; this allows Defender for Endpoint to scan their networks and alert the users when there are WIFI-related threats. If the user denies the location permissions, Defender for Endpoint will only be able to provide limited protection against network threats and will only protect the users from rogue certificates. Once permission is accepted, the user will see a page where permission is asked to collect diagnostic data for future product improvements. If the user opts out, no data will be sent. Once the app is installed, users will see a new card and a tab labelled \u0026#8220;Network Protection\u0026#8221;. Tapping on the feature card will take users to a page where they can initiate a scan for all available networks and certificates. If Wi-Fi is OFF – In-app messaging will guide users to turn on the Wi-Fi from within the app. Once the Wi-Fi has been enabled, the Wi-Fi networks are scanned for threats, and the scan results determine the device\u0026#8217;s state. Network Protection in Action By this point, all of the policies have been set up, and users have also logged into the MDE app. The device will be onboarded in Microsoft Defender for Endpoint and visible in the Defender admin console a few minutes after launching the app.\nNow, to simulate a network attack, I have not trusted the enterprise root certificate for Android devices. This means that as soon as the MDE policy sync is completed, an alert for a suspicious certificate should be generated, and the device should be reported.\nAnd voila! It\u0026#8217;s immediate and works!\nDevice in defender admin center Alert classification Wrapping Up As the world continues to make sense of digital transformation, the mobile network protection feature in Defender for Endpoint will help us to identify, assess, and remediate endpoint weaknesses with the help of robust threat intelligence.\nAnd with this new cross-platform coverage, threat and vulnerability management capabilities now support all major device platforms.\nIt is recommended that you should configure alerts in Defender for this network protection. I\u0026#8217;d love to know what you think, so do leave your comments below, and if you liked it, then do share it.\nCheers/\nSomesh\nRef:\nAnnouncing the public preview of Mobile Network Protection for Microsoft Defender on Android and iOS\nConfigure Microsoft Defender for Endpoint on iOS features | Microsoft Learn\n","externalUrl":null,"permalink":"/posts/configure-network-protection-for-defender-for-endpoint-for-android-and-ios-devices/","section":"Posts","summary":"Overview As part of its Defender for Endpoint (MDE) enterprise endpoint security platform, Microsoft recently announced that the Mobile Network Protection functionality is generally available to assist organizations in identifying network vulnerabilities affecting Android and iOS devices.","title":"Configure Network Protection for Defender for Endpoint for Android and iOS Devices","type":"posts"},{"content":"As Intune admins, keeping our devices humming along smoothly is a top priority. That means not just security, but also peak performance. One often-forgotten hero in this fight? Strategic reboots! They apply updates, clear out cobwebs, and generally get Macs back on track. But manually clicking \"restart\" across hundreds of devices? No thanks.\nToday, we're ditching the click-fest and taking a ride on the \"Cool Clicks, Swift Kicks\" train! It's all thanks to a custom Bash script designed specifically for macOS that orchestrates automated reboots. Let's see how to unleash peak Mac performance for a smoother user experience for everyone!\nThe Challenge of Uptime ManagementUptime, it's a double-edged sword for Intune admins, right? On one hand, a rock-solid system is great, but on the other, those Macs can get bogged down without a refresh. Manually tracking reboots for hundreds of devices is a click-happy nightmare we all want to avoid.\nThat's where \"Cool Clicks, Swift Kicks\" comes in! This custom Bash script automates Mac reboots, ensuring optimal performance and adherence to IT policies. It's the one-click solution to keeping your Mac fleet running smoothly, freeing you up for more strategic tasks. Let's dive into the details!\nIntroducing the Custom Bash ScriptNow that we've explored the uptime tightrope walk, let's introduce the solution that eliminates the manual clicking tightrope altogether: the Bash script!\nThis script is your secret weapon for automating Mac reboots across your entire MDM-managed fleet. It takes the reins on monitoring system uptime and intelligently prompts users when it's time for a refresh. No more endless clicking or worrying about missed updates – just smooth sailing!\nHere's what makes script the ultimate reboot maestro:Uptime Sleuth:\u0026nbsp;The script meticulously calculates a Mac's uptime in hours, giving you a clear picture of its operational state. This data becomes the foundation for informed reboot decisions.Smart Notifications:\u0026nbsp;It's not just about calculating uptime; it's about acting on it intelligently. Depending on a device's uptime, the script triggers tailored notifications. Think gentle reminders or a more urgent countdown dialog box – you decide the level of urgency based on your policies.Flexibility Reigns Supreme:\u0026nbsp;MDM admins have the power to customize the script's parameters to fit their specific IT needs. This means setting different uptime thresholds before prompting users for a reboot, ensuring everyone's on the same page about optimal performance.So, ditch the manual reboot click-a-thon and let automation take the wheel! It's time to unleash peak Mac performance and keep your users productive, all while ensuring top-notch device security thanks to those crucial updates.\nBehind the ScenesNow that you've met the script, let's peek under the hood and see how it orchestrates these automated Mac reboots!\nThe script operates on a tiered system, taking a user-friendly approach to prompting reboots. Here's how it tailors notifications based on uptime:\n1-5 Days: All Quiet on the Reboot Front:\u0026nbsp;For systems that have been up for a short time (1-5 days), the script stays silent. This timeframe is considered normal operational uptime, so no need to nudge the user just yet.7-10 Days: Gentle Reminders Take Center Stage:\u0026nbsp;As uptime climbs between 7-10 days, daily notifications gently appear. These are friendly reminders for the user to consider a reboot for optimal performance. Think of it as a subtle tap on the shoulder, suggesting it might be time for a refresh.11-13 Days: Finding the Reboot Sweet Spot:\u0026nbsp;For extended uptime scenarios (11-13 days), the script adopts a balanced approach to notifications. This provides users with the flexibility to choose a reboot window that aligns best with their workflow, minimizing disruption.15 Days and Beyond: Time for Action!\u0026nbsp;When a Mac surpasses the 15-day uptime mark, the script kicks things up a notch. It triggers a more urgent dialog box with a countdown timer. This is the script's way of strongly suggesting an immediate reboot. After all, prolonged uptime can lead to sluggish performance and missed updates, which can compromise security. This countdown is a clear call to action, ensuring important updates are applied and the system remains healthy.Deployment and CustomizationDeploying this script through your MDM platform is a breeze. You can push it as a custom script, meaning it runs at specific intervals you define. Alternatively, you can configure it to trigger based on specific events, like system startup (by hardcoding in the script). This ensures the script is always on the lookout for optimal reboot times.\nPre-requisites: Ensuring Smooth DeploymentBefore diving into the world of automated reboots and streamlined device management, there's a crucial step every MDM admin must undertake: deploying swiftDialog. This tool is the linchpin of our script, enabling it to communicate with users through polished, native macOS notifications and dialog boxes.\nWhy swiftDialog?swiftDialog serves as a bridge between our script's logic and the user's experience, offering a customizable and interactive interface that far surpasses standard notification capabilities. Its versatility allows us to craft messages that can't be ignored, ensuring our reboot prompts are both seen and acted upon.\nDeploying swiftDialog with MDM:To integrate swiftDialog into your macOS fleet, you'll deploy it using your MDM solution. While the exact steps will depend on your specific MDM platform, the essence is the same: package swiftDialog as an enterprise app and push it to your devices as a mandatory install with the required configuration. Here is the example, how I am deploying it:\nAdding swiftDialog as a pkg app:Next part is the most critical part for approving and setting Notification type via MDM. As we are using swiftDialog in the script to send system notifications, so it is important that we allow these settings via Intune. And, to achieve this, I am deploy the below mobileconfig that will pre-approve notifications and set the notification type. 💡This pre-deployment step is crucial. Without swiftDialog properly installed on the target, the script functionality will fail.\u0026lt;key\u0026gt;PayloadContent\u0026lt;/key\u0026gt; \u0026lt;array\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;PayloadDisplayName\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;Notifications Payload\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadIdentifier\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;018e529a-e5ad-70f3-aabc-8bc88f3f1b5e\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadOrganization\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;IRL\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadType\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;com.apple.notificationsettings\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadUUID\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;018e529a-ad64-7e38-bcf5-41dc654b5910\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadVersion\u0026lt;/key\u0026gt; \u0026lt;integer\u0026gt;1\u0026lt;/integer\u0026gt; \u0026lt;key\u0026gt;NotificationSettings\u0026lt;/key\u0026gt; \u0026lt;array\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;AlertType\u0026lt;/key\u0026gt; \u0026lt;integer\u0026gt;1\u0026lt;/integer\u0026gt; \u0026lt;key\u0026gt;BadgesEnabled\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;BundleIdentifier\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;au.bartreardon.dialog\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;CriticalAlertEnabled\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;NotificationsEnabled\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;ShowInLockScreen\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;ShowInNotificationCenter\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;SoundsEnabled\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;AlertType\u0026lt;/key\u0026gt; \u0026lt;integer\u0026gt;1\u0026lt;/integer\u0026gt; \u0026lt;key\u0026gt;BadgesEnabled\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;BundleIdentifier\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;au.csiro.dialog\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;CriticalAlertEnabled\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;NotificationsEnabled\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;ShowInLockScreen\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;ShowInNotificationCenter\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;SoundsEnabled\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/array\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/array\u0026gt;Once, this is deployed, then it is the time to push the script to automate reboots.Deploy the script as a shell script for your macOS devices:Customization is KeyOne of the script's biggest strengths is its adaptability. This gives you, the MDM admin, the power to tailor it perfectly to your organization's needs. Here are some ways you can customize the script:\nFine-Tune Notifications:\u0026nbsp;Tweak the notification messages to match your desired tone and information level. Do you prefer a gentle nudge or a more urgent message? The choice is yours!Set Uptime Thresholds:\u0026nbsp;Adjust the uptime thresholds that trigger notifications. Do you want daily reminders after 7 days, or perhaps a more aggressive approach? You have complete control!Alert Sounds That Match Your Style:\u0026nbsp;Even the alert sounds are customizable! Choose a sound that best aligns with your notification style, ensuring it's both informative and non-intrusive.By leveraging the script's customizability, you can create a reboot management system that perfectly complements your existing policies and user preferences.\nWhy Not Use Nudge for macOS?While the script offers a custom script solution, you might be wondering about Nudge for macOS, a popular tool for encouraging Mac updates. Nudge is a great option, and it does boast some fantastic features. However, here's why a custom script might be the better fit for some organizations:\nThe Open-Source Conundrum: Nudge excels in functionality. However, being open-source software can raise a red flag for some enterprises. Many organizations have strict policies against using open-source tools or software hosted on public repositories. This can stem from security concerns or a desire for a more controlled environment.\nTailored for Your NeedsA custom script, offers an alternative path. It provides the flexibility to tailor notifications, uptime thresholds, and even alert sounds to your organization's specific needs and policies. This level of customization isn't readily available with Nudge.\nThe Choice is Yours: Both Nudge and custom scripts offer effective ways to manage Mac reboots. Ultimately, the best choice depends on your organization's unique requirements and security policies. If you prioritize a controlled environment and need complete customization, custom scripts might be the perfect solution for you!\nConclusionThere you have it! I hope this post offers a powerful and versatile solution for automated Mac reboots in your enterprise. It streamlines your workflow, empowers users with control, and ensures optimal system health – all while freeing you up for more strategic tasks.\nSo ditch the manual click-a-thon and embrace the future of automated Mac reboots! Make your life easier and your Macs happier (and faster!).\n💡The script can be downloaded from:macOS/Shell Scripts/schedule_reboot.sh at main · pathaksomesh06/macOSmacOS. Contribute to pathaksomesh06/macOS development by creating an account on GitHub.GitHubpathaksomesh06","externalUrl":null,"permalink":"/posts/cool-clicks-swift-kicks-the-mac-admins-guide-to-seamless-reboots/","section":"Posts","summary":"As Intune admins, keeping our devices humming along smoothly is a top priority.","title":"Cool Clicks, Swift Kicks: Unleash Peak Mac Performance for a Smoother Ride!","type":"posts"},{"content":"Imagine a world where basic device issues don't grind your workday to a halt. A world where resetting passwords, troubleshooting glitches, and finding lost devices are a breeze. Welcome to the world of Copilot, your new self-service champion built with Microsoft Power Virtual Agents.\nWhat is Copilot?Microsoft Copilot\u0026nbsp;is an exciting development in the world of conversational AI! Let me break it down for you:\nMicrosoft Power Virtual Agents (PVA): This platform was introduced in December 2019. It allows users to create chatbots and virtual agents without writing code. You can describe what you want, and the AI builds it for you. PVA significantly reduces the time it takes to create and update bot topics.\u0026nbsp;It’s a fantastic tool for creating conversational experiences without diving into complex programming.Microsoft Copilot Studio: Recently, Microsoft announced\u0026nbsp;Copilot Studio, which is a comprehensive low-code conversational AI solution. It combines the power of large language models with your organization’s data. Here’s what it offers:Customization: Copilot Studio allows you to connect Copilot to your data using pre-built or custom plugins and GPTs (Generative Pre-trained Transformers). You can create and orchestrate workflows and manage your Copilots in one central place.Tailored Responses: If you’re a Microsoft 365 customer, you can use Copilot Studio to customize responses and workflows for unique scenarios.Integration with Power Virtual Agents: Power Virtual Agents, which has been foundational, will now be part of Copilot Studio, along with other leading conversational AI technologies from Microsoft.Benefits of Copilot:Reduced IT Ticket Volume:\u0026nbsp;Copilot tackles common device issues, significantly reducing the number of support tickets your team receives.Improved User Experience:\u0026nbsp;Users get instant access to self-service solutions, eliminating wait times and frustration.Increased User Productivity:\u0026nbsp;Empowered users can quickly resolve issues themselves, minimizing downtime and maximizing productivity.24/7 Availability:\u0026nbsp;Users can access Copilot's assistance anytime, anywhere, for a truly on-demand solution.Behind the Scenes of \"Sparky\"At the heart of \"Sparky\" lies a powerful synergy between Microsoft's Power Virtual Agents and a robust device management platform. This no-code platform allows anyone in your organization to create intelligent chatbots without needing coding expertise. Copilot empowers you to streamline interactions with customers and employees by offering instant answers to FAQs, simplifying support processes, and providing 24/7 self-service options. It can even handle complex conversations with its built-in AI capabilities, ensuring users get the right help every time. Plus, Copilot offers multilingual support and seamless integration across various channels like websites, mobile apps and Microsoft Teams, reaching your audience wherever they are. In this blog post, I will walk you through the process of creating a smart Copilot and show you how to leverage its features to build transformative chatbots!\nLet's get started!\nCreate a CopilotGo to the\u0026nbsp;Microsoft Copilot Studio home page.Select\u0026nbsp;+ New copilot\u0026nbsp;from the\u0026nbsp;Copilots\u0026nbsp;page, or select\u0026nbsp;Home\u0026nbsp;then choose\u0026nbsp;+ Create a copilot.For\u0026nbsp;Copilot name, enter a name for your copilot.For\u0026nbsp;What language do you want your copilot to speak?, select the language you want your copilot to speak.Provide a website you'd like the copilot to use for generating answers to increase the reach of your copilot.Select\u0026nbsp;Create.Once your bot is set up and available for use, it will direct you to the bot's Overview page. Configure Generative AnswersGenerative answers in Microsoft Copilot Studio enable your copilot to retrieve and display information from various sources, both internal and external, bypassing the need for predefined topics. This feature can serve as the main source of information or as a secondary option when existing topics fail to resolve a user's query. Consequently, it allows for the rapid creation and deployment of a fully operational copilot without the necessity of manually crafting numerous topics that may not cover every customer question.\nYou can customize further, after your copilot is created, from the\u0026nbsp;Generative AI\u0026nbsp;page.\nTo enable or disable generative answers, toggle the option in the\u0026nbsp;Boost conversational coverage with generative answers\u0026nbsp;section.To change the URL, add more websites or remove them in the\u0026nbsp;Websites\u0026nbsp;section.Create a new topic in Copilot StudioWith your copilot open on the\u0026nbsp;Topics\u0026nbsp;page, select\u0026nbsp;+ Add\u0026nbsp;\u0026gt;\u0026nbsp;Topic\u0026nbsp;\u0026gt;\u0026nbsp;Create from description. In the\u0026nbsp;Create it with Copilot\u0026nbsp;window that appears, enter a name in\u0026nbsp;Name your topic.Select\u0026nbsp;Create.Once your topic is created, your copilot is ready for testing.Create and Configure Copilot PluginsIn Microsoft Copilot Studio, plugins enhance the ability of your copilots to integrate with various Microsoft products seamlessly. These plugins enable connected services to be accessed, actions to be executed, and responses to be delivered to users of your copilot, all without the necessity for manually crafting intricate conversational flows.\nFunctioning as modular, interoperable components, plugins extend their utility across the Power Platform, Dynamics 365, and Microsoft 365 environments. A unified plugin registry housed in Dataverse facilitates the sharing of all plugins across your Microsoft 365 tenant. Any creation or modification of a plugin, once published, is automatically disseminated to all copilots leveraging that plugin.\nThe process of creating a plugin involves defining its function in straightforward language, followed by specifying a data source or another type of connection. This information empowers the copilot to assess a conversation and select the most suitable plugin. Additionally, the copilot can autonomously request further details from the user as necessary to ensure the plugin operates effectively.\nSparky - The IT Self Service CoPilot!To illustrate the copilot's utility in assisting users with self-service tasks for devices enrolled in Microsoft Intune, consider this scenario: I have set up few sample topics designed to cover a range of common inquiries and operational tasks that users might encounter. These topics include checking compliance, installing applications, and troubleshooting common device issues. The copilot -Sparky, equipped with these initial topics, serves as a starting point for automating user support. Depending on the specific requirements of your organization or the feedback received from users, you can further customize and expand the bot's capabilities. This adaptability not only enhances the support experience for users managing their enrolled devices but also significantly reduces the workload on IT support staff by automating repetitive inquiries and tasks. Through this approach, the bot becomes an evolving tool that continuously improves in assisting users efficiently, fostering a more productive and satisfied user base.\nThe copilot, with its advanced automation features, automatically captures the user's email address, setting the stage for a proactive and personalized interaction. It greets the user and seamlessly transitions into assisting with specific needs. By leveraging a dedicated plugin, the copilot efficiently gathers data on the user’s enrolled devices, ensuring that the user is kept informed about their devices' status, updates, or any relevant actions that need to be taken.\nFurthermore, the copilot utilizes conversation boosters, to enhance the communication flow. These boosters enable the copilot to present the information about the user's devices in a clear, concise, and user-friendly manner, facilitating a smoother user experience.\nThe progression of the copilot's capabilities doesn't stop there. It transforms into a virtual IT service desk, significantly empowering users. This transformation allows users not only to receive information but also to perform a variety of self-service tasks directly through the conversation interface. Users can troubleshoot common issues, request services, manage device settings, and more, all within the same interactive session.\nThe user selects the device id for which he/she needs support and Sparky comes-up with more support options.\nDemoLet's quickly explore a demonstration of the copilot to witness its comprehensive capabilities when used with Intune as MDM solution.\nConclusionIn conclusion, Copilot (formerly Power Virtual Agents) ushers in a new era of conversational AI accessibility. This no-code platform empowers anyone in your organization, regardless of technical background, to build intelligent chatbots that deliver tangible results. Gone are the days of complex coding and lengthy development cycles. Copilot streamlines the process, allowing you to focus on crafting engaging conversations and delivering exceptional user experiences.\nThe benefits extend far beyond ease of use. Copilot's chatbots can revolutionize the way you interact with both customers and employees. Imagine offering 24/7 self-service options, instantly resolving common issues, and simplifying support processes. Empower your employees with on-demand access to information and resources. Cater to a global audience with multilingual support. The possibilities are truly limitless.\nThis is just the beginning of your Copilot journey. The possibilities are endless! Whether you're looking to improve customer service, streamline employee onboarding, or automate routine tasks, Copilot can be your secret weapon.\n","externalUrl":null,"permalink":"/posts/copilot-to-the-rescue-empowering-users-and-streamlining-it-with-self-service-device-management/","section":"Posts","summary":"Imagine a world where basic device issues don't grind your workday to a halt.","title":"Copilot to the Rescue: Empowering Users and Streamlining IT with Self-Service Device Management","type":"posts"},{"content":" The major motive for exploring this was to have a website as an app and then publish it so that users can download and install it on their mobile devices. Yes, I know what you might be thinking, and you are correct; why do I need to create an app when we can use Intune to achieve it? But sometimes requirements are that weird 😁. And as I said, the requirements\u0026#8230;so these users are external and cannot have any M365 license (not even a standalone Intune license), and they should directly go to a secure location to download and install the apps. We have websites with a perfect mobile view, but it is expected to act as an application that helps the users view only the particular website instead of opening a browser and browsing it. This kind of application acts and works like a browser, but users should be able to install it as an app on their mobile devices. Sounds weird again\u0026#8230;and I said..the requirements!🤦‍♂️🤷‍♂️ But, this was something new, and I was excited to go the developer way. Why wait, then? Let\u0026#8217;s get started 💻\nIn this post, I will walk you through creating a web view application for the iOS family using a swift programming language.\nPre-requisites MacBookXcodeAccess to Apple Developer ProgramAccess to app icon and other details Let’s get started.\nXCode For this minimal iOS app, I will use the Xcode IDE by Apple. Xcode is Apple\u0026#8217;s integrated development environment for macOS and is used to develop software for macOS, iOS, iPadOS, watchOS, and tvOS.\u0026nbsp;Xcode\u0026nbsp;provides a unified user interface design, coding, testing, and debugging workflow. The Xcode IDE combined with the Swift programming language makes developing apps easy and fun. To test or run applications on an iPhone, iPad, Apple TV, or Apple Watch, all you need is a free Apple ID.\nThe best thing is it has a built-in default simulator that helps you to simulate the app you are developing, and you do not any third-party app for testing your app. By using that simulator, you can make a simulation of your application for almost all iOS devices depending upon the minimum required OS that you configure in the app settings.\nDownload Xcode from\u0026nbsp;Appstore. 📢📢 Xcode is around 13Gigs and will take time to download and install on your Mac.\u0026nbsp;\nMinimum requirements for Xcode:\u0026nbsp;https://developer.apple.com/support/xcode/\nCreate the app On your Macbook,\u0026nbsp;open Xcode\u0026nbsp;and click on Create a new Xcode project.\u0026nbsp;\nOn the next screen, under Application, select App and click next. In this case, you can use multiplatform as we create a webview app that should run on all iOS devices. Now, provide a\u0026nbsp;Product Name\u0026nbsp;and\u0026nbsp;Organization Identifier,\u0026nbsp;which will be used to define a\u0026nbsp;Bundle Identifier\u0026nbsp;for your app. You can also provide values for\u0026nbsp;Team\u0026nbsp;and\u0026nbsp;Organization Name\u0026nbsp;or leave it with the default values for now. When you press Next, you’ll be prompted to select the location where you will store the project. Select your preferred location and click on Create.\nThe next page is for defining your configurations for the app. You can choose the version of iOS from the drop-down menu. Open ViewController.swift file from your left-hand pane, which contains the code we need to change.\nTime to write some code To use the system UI and web configuration, we first import the UI kit and Web kit in ViewController.swift\nimport UIKit import WebKit Next, we extend\u0026nbsp;ViewController\u0026nbsp;class by implementing the WKNavigationDelegate protocol.\nclass ViewController: UIViewController, WKNavigationDelegate {\nThen within the ViewController class, define the WKWebView property, which will be used to store the reference objects.\nvar webView: WKWebView! We will not get into iOS development. Use the below lines of code, and your working app should be ready to run in the simulator. import UIKit import WebKit class ViewController: UIViewController { class ViewController: UIViewController, WKNavigationDelegate { var webView: WKWebView! override func loadView() { webView = WKWebView() webView.navigationDelegate = self view = webView } override func viewDidLoad() { super.viewDidLoad() let url = URL(string: \"https://www.intuneirl.com\")! webView.load(URLRequest(url: url)) webView.allowsBackForwardNavigationGestures = true } Play Around The simulator app within Xcode presents the iPhone, iPad, Mac, or Apple Watch user interface in a window on your Mac computer. You interact with Simulator using the keyboard and the mouse to emulate taps, device rotation, and other user actions.\nFor this blog, we will stick to the basics of using a Simulator and perform all these steps using our own iOS webview app.\nFrom the top bar, select the iOS device on which you would like to test your app and press the button with the \u0026#8220;Play\u0026#8221; icon to launch the simulator. You can also see the performance of your app in the simulator. It will show how much CPU or memory your app is consuming.\nPublish The App Everything looks good till here. Now, follow the steps in this blog post to create a .ipa for the app, and then you can publish it to Apple App Store or even distribute it through your MDM solution. If you want to use MAM capabilities, wrap the app and distribute it. The steps are here \u0026#8211; Wrap me Up!.\nAwesome..I can imagine that feeling. You just created \u0026amp; developed your first iOS app \u0026#8211; High5✋\nShare your feedback and comments, and keep learning. \u0026#8220;Challenges drive Us\u0026#8220; #mempowered\nStay In(tuned) to create a webview app for Android. ","externalUrl":null,"permalink":"/posts/create-a-webview-app-for-ios-ipad-os-or-macos/","section":"Posts","summary":"The major motive for exploring this was to have a website as an app and then publish it so that users can download and install it on their mobile devices.","title":"Create a Webview App For iOS, iPad OS or macOS","type":"posts"},{"content":" Overview Being an Intune administrator means that in addition to managing and deploying endpoints, you are also somewhat responsible for ensuring that they continue to comply to the security standards set forth by your company.\nLikewise, you may have heard a lot about utilizing Microsoft Defender for Endpoint to construct logic apps and do threat-hunting queries, and you may want to give those a shot as well. Excellent! Starting off with some field notes, I\u0026#8217;ve included a few use cases that you should also try or implement to gain a better grasp of your devices and their security posture.\nThe Need Proactively detecting and eliminating advanced threats via threat hunting is becoming increasingly important for many organizations and is actually a time consuming task. However, you may set up rules that automatically adjust to your security policies in accordance with the most recent threat information.\nThere are many ways to achieve this automation, like:\nAutomating SIEM/EDR/ATP queries Use runbooks for automation of incidents Use Logic apps Automate queries \u0026amp; reports using Power Automate \u0026amp; PowerApps Create dashboards using Power BI Now, let\u0026#8217;s get into some threat-hunting ideas to look for and build some simple must have queries.\nDevices Not Onboarded to MDE It is quite common in any environment to have endpoints that have not been successfully onoarded to defender for endpoint. Such devices are shown as \u0026#8220;can be onoarded\u0026#8221; in recommendations. Logging into your Defender admin portal and verifying the list on daily basis can be a daunting task. However you can easily automate this by scheduling a report of such devices using Power Automate or Logic Apps.\nI am using Power Automate for this and the configuration is as below:\nSign in to\u0026nbsp;Power Automate. Select\u0026nbsp;My flows\u0026nbsp;\u0026gt;\u0026nbsp;New flow\u0026nbsp;\u0026gt;\u0026nbsp;Scheduled cloud flow. In the fields next to\u0026nbsp;Starting, specify the date and time when your flow should start. In the fields next to\u0026nbsp;Repeat every, specify the flow\u0026#8217;s recurrence. Select\u0026nbsp;Create. Select\u0026nbsp;Recurrence\u0026nbsp;\u0026gt;\u0026nbsp;Show advanced options and configure the schedule. Choose\u0026nbsp;Microsoft Defender Advance Hunting\u0026nbsp;for the new step and type your query: Create a CSV to export all the results from the query. Schedule the report. Local Admin Report This is one of the most common requirements and you can easily use KQL query in the Advanced Hunting to create \u0026amp; schedule a report for machines having users added as local admin to them.\nDeviceLogonEvents | where Timestamp \u0026gt;= ago(7d) | where IsLocalAdmin == true | summarize count() by DeviceName, AccountName,LogonType | sort by AccountName Hunting For Legacy Authentication Basic authentication has been depreciated so it\u0026#8217;s time to hunt down the applications and clients with Basic Authentication and switch to newer authentication methods.\nSigninLogs | where ClientAppUsed !in (\"Mobile Apps and Desktop clients\", \"Browser\") | where isnotempty(ClientAppUsed) | evaluate pivot(ClientAppUsed, count(), UserPrincipalName) You can easily automate a daily report using it in Power Automate.\nIf you are using Microsoft Defender for Endpoint for your Android Enterprise and iOS devices then there are certain configurations required in defender portal to avoid unnecessary alerts on end-users devices.\nWhitelist Your Trusted Root Certificate If you are deploying trusted root certificates on your enterprise devices then you might receive alerts in defender portal for \u0026#8220;Suspicious certificates installed on one endpoint\u0026#8221;. Since these devices are corporate owned devices and have your root certificate installed then you can classify these alerts as false positive i.e. detected and identified as malicious even though the entity isn\u0026#8217;t actually a threat.\nOnly apps/programs signed with the exact signed certificate uploaded as indicator are affected. Do not expect to upload a root certificate and all sub certificates will be handled the same.\nThe full chain of trust for the certificate must be valid and either be trusted through a root certificate in the Microsoft Trusted Root Program or the root certificate must be present in the Trusted Root Certification Authorities store.\nTo do so, the steps are as below:\nSelect Settings \u0026gt; Endpoints \u0026gt; Indicators (under Rules) in the navigation pane. Select\u0026nbsp;Add indicator. Specify the following details: Indicator \u0026#8211; Specify the entity details and define the expiration of the indicator. Action \u0026#8211; Specify the action to be taken and provide a description. Scope \u0026#8211; Define the scope of the machine group. Review the details in the Summary tab, then click\u0026nbsp;Save. Supress iOS/Android Upgrade Notifications If you have configured software update deferral policies for your iOS \u0026amp; Android Enterprise devices then you might observe that the end users are ntofied to update iOS update notifications in Defender for Endpoint app. And this causes confusion and a bad user experience.\nTo avoid these notifications on end user\u0026#8217;s devices, you simply need to create an exception for iOS Upgrade in Defender portal. The process is pretty simple- select the security recommendation for iOS update and then select\u0026nbsp;Exception options\u0026nbsp;and fill out the form.\nThese are merely a few extremely simple instances, and the list is by no means complete. You can engage in a wide variety of approaches and methods when hunting. As you begin to evaluate your environment and choose the types of approaches and data you can use, your hunting maturity will increase.\n","externalUrl":null,"permalink":"/posts/defender-for-endpoint-some-queries-that-you-must-use-right-now-2/","section":"Posts","summary":"Overview Being an Intune administrator means that in addition to managing and deploying endpoints, you are also somewhat responsible for ensuring that they continue to comply to the security standards set forth by your company.","title":"Defender for Endpoint: Some Essential Queries That You Must Use Right Now!","type":"posts"},{"content":"As companies increasingly adopt cloud-based technologies, managing user authentication across multiple platforms and applications has become a complex task. Single Sign-On (SSO) solutions have emerged as a way to simplify the user login experience while enhancing security. Recently, Microsoft Intune announced the support for Platform SSO, a feature that enables macOS devices to integrate with the company's IdP infrastructure. In this blog post, let's explore the events involved in this process.\nMac SSO Extension and Microsoft IntuneThe Mac SSO Extension is a powerful feature that revolutionizes the way macOS users access the corporate data. By leveraging this extension, as an MDM admin you can can seamlessly manage user authentication across multiple platforms and applications, providing a streamlined and secure login experience.\nWith the Mac SSO Extension, Intune now offers a comprehensive solution for managing authentication on macOS devices within the same infrastructure that handles other platforms.\nUnderstanding The Events in a Mac SSO EnvironmentOur journey begins with an in-depth analysis of the network logs from a Mac device managed by Microsoft Intune. These logs, encapsulated in a HAR file, reveal the nuances of network interactions essential for SSO functionality.\n","externalUrl":null,"permalink":"/posts/demystifying-mac-sso-extension-with-microsoft-intune-an-in-depth-analysis-of-network-events/","section":"Posts","summary":"As companies increasingly adopt cloud-based technologies, managing user authentication across multiple platforms and applications has become a complex task.","title":"Demystifying Mac SSO: An In-Depth Analysis of Events","type":"posts"},{"content":" Background This post is once again focused on macOS devices since, over the past few days, there have been discussions in various communities about installing the Cisco AnyConnect VPN solution on business-owned macOS machines. So, I thought of sharing my own experience of deploying the VPN solution with no user interaction required and, at the same time, securing it 2FA. Reason for 2FA – Ensure that users can only connect to this VPN solution from a corporate device, as anyone can easily download \u0026 connect the VPN client from their personal devices.\nCisco AnyConnect VPN Deployment Like any other VPN solution, the Cisco AnyConnect VPN allows you to connect to the corporate network allowing access to specific allowed resources and services as if you are on the corporate network.\nDeploying AnyConnect involves silently installing, configuring, and upgrading the AnyConnect client and its related files on end user’s devices:\nThe Cisco AnyConnect Secure Mobility Client can be deployed remotely to devices by the following methods:\nPredeploy – The end-user does new installations and upgrades, or it is pushed using an enterprise device management system. Web Deploy – The AnyConnect package is loaded on the headend, an ASA or FTD firewall, or an ISE server. When the user connects to a firewall or ISE, AnyConnect is deployed to the client. You can include optional modules that enable supplemental features, client profiles that set up the VPN, and optional features when you deploy AnyConnect.\nAs we are focused on Intune as an enterprise device management system, in this article, we will focus on the first approach of deployment, i.e. “Predeploy”.\nWhat Do You Need To Start With? To start with, you need to have access to the following:\nAnyConnect packageModules to support extra featuresClient profiles that configure AnyConnect and the extra features, which you will createLanguage files, images, scripts, and help files for customizing the deploymentAnyConnect ISE Posture and the compliance module AnyConnect System Extension AnyConnect uses a network system extension on macOS 11 (and later), bundled into an application named Cisco AnyConnect Socket Filter. The AnyConnect extension has the following three components that are visible in the macOS System Preferences-Network UI window:\nDNS proxyApp/transparent proxyContent filter AnyConnect requires its system extension and all its components to be active for proper operation, which implies that the mentioned components are all present and show as green (running) in the left pane of the macOS Network UI.\nFor installation in the system context, macOS requires the extension to be approved via MDM without end-user interaction. Intune Configurations To approve the AnyConnect system extension without end-user interaction, we need to push the system extension payload to the devices using Intune. To do so, follow these steps:\nLogin to Intune portal. Navigate to Devices -\u003e macOS -\u003e Configuration Profiles and select create a profile. From the profile type dropdown, select Templates -\u003eExtensions profile In Basics, enter the name \u0026 description to match the purpose of the profile. In the System Extensions – Set the Team identification to “DE8Y96K9QP” and the Bundle identifier to “com.cisco.anyconnect.macos.acsockext“ Under Allowed system extension types, add a line to allow team identifier “DE8Y96K9QP” to provide “Network extensions”. Next, review and assign it to the required group. This is how the configuration profile should look like:\nWebContentFilter Payload Settings Sadly, there isn’t a way to accomplish this via the online UI of Microsoft Intune. You must first build an XML configuration and then upload it as a configuration profile. To do so, please follow the steps:\nLogin to Intune portal. Navigate to Devices -\u003e macOS -\u003e Configuration Profiles and select create a profile. From the profile type dropdown, select Templates -\u003eCustom profile In Basics, enter the name \u0026 description to match the purpose of the profile. You can use the below table to create your XML file: Or, you can copy-paste and save this as XML to upload to the profile:\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n\u003c!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"\u003e PayloadContent\nEnabled\nFilterType\nPlugin\nAutoFilterEnabled\nFilterBrowsers\nFilterSockets\nFilterPackets\nFilterGrade\nfirewall\nFilterDataProviderBundleIdentifier\ncom.cisco.anyconnect.macos.acsockext\nFilterDataProviderDesignatedRequirement\nanchor apple generic and identifier “com.cisco.anyconnect.macos.acsockext” and (certificate leaf[field.1.2.840.113635.100.6.1.9] /* exists */ or certificate 1[field.1.2.840.113635.100.6.2.6] /* exists */ and certificate leaf[field.1.2.840.113635.100.6.1.13] /* exists */ and certificate leaf[subject.OU] = DE8Y96K9QP)\nPluginBundleID\ncom.cisco.anyconnect.macos.acsock\nVendorConfig\nUserDefinedName\nCisco AnyConnect Content Filter\nPayloadDisplayName\nCisco AnyConnect Content Filter\nPayloadIdentifier\ncom.cisco.anyconnect.webcontentfilter.42B8BA0E-57F4-4E57-872B-1F5FCB8527EA.2512DB6A-B5EA-41DB-B6C6-3A07726C214E\nPayloadType\ncom.apple.webcontent-filter\nPayloadUUID\n2512DB6A-B5EA-41DB-B6C6-3A07726C214E\nPayloadVersion\n1\nPayloadDisplayName\nCisco AnyConnect Content Filter\nPayloadIdentifier\ncom.cisco.anyconnect.webcontentfilter.42B8BA0E-57F4-4E57-872B-1F5FCB8527EA\nPayloadScope\nSystem\nPayloadType\nConfiguration\nPayloadUUID\n42B8BA0E-57F4-4E57-872B-1F5FCB8527EA\nPayloadVersion\n1\nCisco AnyConnect Profile As a next step, we will create the required profile for the VPN client and will push it to the devices as a shell script.\nShell Script for profile:\n!/bin/sh\nmkdir -p /opt/cisco/anyconnect/profile\ncat \u003c/opt/cisco/anyconnect/profile/profile.xml\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\nx.x.x.x\nhttps://x.x.x.x\nEOF\nSign in to the Intune portal. Select Devices \u003e macOS \u003e Shell scripts \u003e Add. In Basics, enter the name and description and click Next. In Script settings, upload the script and configure the parameters as follows:Run the script as a signed-in user: NoHide script notifications on devices: Not ConfiguredScript frequency: Not ConfiguredMax number of times to retry if script fails: 3 Times Assign the script to your device group Cisco AnyConnect Package When it comes to iOS/macOS devices, I prefer to push the corporate apps as LOB apps as it gives more control over the app. P.S – The feature is in public preview\nThe following prerequisites must be met before a macOS DMG app is installed on macOS devices.\nIntune manages devices.DMG app is smaller than 2GB in size.The Microsoft Intune management agent for macOS is installed. Follow the steps to push the VPN client to the devices:\nSign in to the Intune portal. Select Apps \u003e All apps \u003e Add. In the Select app type pane, under the Other app types, select macOS app (DMG). In the App package file pane, select the browse button. Then, select the Cisco AnyConnect VPN DMG file with the extension .dmg. The app details will be displayed. When you’re finished, select OK on the App package file pane to add the app. Once done, deploy the app to your device group. Trespassing Not Allowed Alright, so by now, you have deployed the VPN app and configured all the required settings so that the app gets installed without any user interaction.\nNow, as the last part of this post, let’s control the configuration so that the connection can only be initiated from a corporate device.\nAnd to achieve this, you need to define specific parameters in the Cisco ISE platform that ensures that the device initiating the connection is a corporate device. There are numerous ways of doing it; you just need to make sure that the parameter you define is unique and cannot be modified at the device level.\nAn example of configuration:\nYou check for your SHA1 signature of any signed/wrapped app deployed on the macOS devices.You specify the path of a specific file that is hardcoded in the system preferences where user access is restricted.Device latest patch level with MDE So, when the user initiates the VPN connection, the device will be evaluated first and once passed, only then will it be allowed to access corporate resources.\nSummary You can easily deploy the Cisco Anyconnect VPN client to your corporate macOS devices. I’d love to know what you think, so do leave your comments below, and if you liked it, then do share it. Cheers/\nSomesh\n","externalUrl":null,"permalink":"/posts/deploy-cisco-anyconnect-vpn-on-macos-devices-with-2fa/","section":"Posts","summary":"Background This post is once again focused on macOS devices since, over the past few days, there have been discussions in various communities about installing the Cisco AnyConnect VPN solution on business-owned macOS machines.","title":"Deploy Cisco AnyConnect VPN on macOS devices with 2FA","type":"posts"},{"content":" On the last week\u0026#8217;s post for Cisco AnyConnect VPN on macOS, I had a request for publishing a similar guide for deploying Palo Alto\u0026#8217;s VPN on corporate macOS devices. So on the request of Mieszko Ślusarczyk, this article will help you as an exhaustive guide for installing and configuring GlobalProtect VPN on your macOS devices.\nGlobalProtect VPN GlobalProtect is Palo Alto Networks’ VPN solution, which delivers the capabilities of their Security Operating Platform to remote workers and mobile devices. It provides excellent protection for network connections and in-depth visibility into who is accessing an organization’s network. GlobalProtect establishes a secure SSL or IPsec VPN connection between users and the network.\nThe GlobalProtect app software runs on endpoints and enables access to your network resources through the GlobalProtect portals and gateways you have deployed. The GlobalProtect app for Windows and macOS endpoints is deployed from the GlobalProtect portal. You can configure the app\u0026#8217;s behaviour—for example, which tabs the users can see—in the client configuration(s) you define on the portal. See Define the GlobalProtect Agent Configurations, Customize the GlobalProtect App, and Deploy the GlobalProtect App Software for details.\nIllustration to show how the GlobalProtect portals, gateways, and apps work together to enable secure access for all your users, regardless of what endpoints they are using or where they are located. Licenses You don\u0026#8217;t require GlobalProtect licenses if you wish to use them to offer a secure remote access or virtual private network (VPN) solution via one or more internal/external gateways. However, you need to buy an annual GlobalProtect Gateway license to access more sophisticated services (such as HIP checks and related content updates, support for the GlobalProtect mobile app, or IPv6 compatibility). This license needs to be set up on each firewall that controls a gateway that:\nSupports the GlobalProtect app for mobile endpoints Supports the GlobalProtect app for Linux endpoints Provides IPv6 connections Split tunnel traffic based on the destination domain, application process name, or HTTP/HTTPS video streaming application. Supports identification of managed devices using the endpoint’s serial number on gateways Enforces GlobalProtect connections with FQDN exclusions For GlobalProtect Clientless VPN, you must also install a GlobalProtect Gateway license on the firewall that hosts the Clientless VPN from the GlobalProtect portal. You also need the\u0026nbsp;GlobalProtect Clientless VPN\u0026nbsp;dynamic updates to use this feature.\nFor detailed info on licenses, you can refer \u0026#8211; Palo Alto Licenses\nDownload and Install the GlobalProtect App You must download and install the GlobalProtect app on your macOS endpoint before you can join the GlobalProtect network. You should always download the app directly from a GlobalProtect portal within your organization. Because of this, you will not find any direct download link for the GP app on the Palo Alto Networks website.\nTo download the installer, ask your administrator for the IP address or FQDN of the GlobalProtect site. Your administrator should also confirm the username and password you can use to log into the portal and gateways. You usually connect to your company network using the same username and password.\nFollow the steps to download the app:\nLog in to the GlobalProtect portal login with your admin credentials Navigate to the app download page and download the latest package for macOS ","externalUrl":null,"permalink":"/posts/deploy-globalprotect-palo-alto-vpn-to-macos-using-intune/","section":"Posts","summary":"On the last week\u0026#8217;s post for Cisco AnyConnect VPN on macOS, I had a request for publishing a similar guide for deploying Palo Alto\u0026#8217;s VPN on corporate macOS devices.","title":"Deploy GlobalProtect (Palo Alto) VPN to macOS using Intune","type":"posts"},{"content":" Overview Zscaler Cloud Connector (ZCC) is a cloud-native zero trust access service that provides fast and secure app-to-app, app-to-Internet connectivity across multi- and hybrid cloud environments. An integrated, automated connectivity and security stack eliminates the complexity and cost of managing multiple network services in cloud environments. It serves as a faster, smarter and more secure alternative to legacy network-centric solutions such as Cloud VPN, virtual firewalls and cloud routers.\nSecure Multi- and Hybrid Cloud Connectivity\nZCC eliminates the need for provisioning and managing cumbersome VPN/MPLS connections between clouds and on-premise environments. It establishes inside-out DTLS connections across multi- and hybrid clouds, brokered through Zscaler Zero Trust Exchange. The inside-out connectivity approach provides zero trust access between applications without the need for network access.\nUsing Zscaler Client Connector, you can get all of the benefits of the Zscaler service for Internet traffic and granular, policy-based access to internal resources from a single point.\nWith Zscaler Client Connector\u0026#8217;s Internet Security feature, you can protect your users\u0026#8217; web traffic even when they are outside your corporate network. With Zscaler Private Access (ZPA), you can securely enable your users to access enterprise applications outside the corporate network. ZPA establishes a secure transport for accessing your enterprise apps and services. You can also configure app profiles and specify, for example, how the app detects when a user is connected to a trusted network and, if a trusted network is detected, whether the app must disable its service. For greater flexibility, you can configure app profiles to apply to all users or specific groups of users in your organization.\n","externalUrl":null,"permalink":"/posts/temp-slug-35-2/","section":"Posts","summary":"Overview Zscaler Cloud Connector (ZCC) is a cloud-native zero trust access service that provides fast and secure app-to-app, app-to-Internet connectivity across multi- and hybrid cloud environments.","title":"Deploy ZCC App to corporate macOS Devices","type":"posts"},{"content":" Overview Zscaler Cloud Connector (ZCC) is a cloud-native zero trust access service that provides fast and secure app-to-app, app-to-Internet connectivity across multi- and hybrid cloud environments. An integrated, automated connectivity and security stack eliminates the complexity and cost of managing multiple network services in cloud environments. It serves as a faster, smarter and more secure alternative to legacy network-centric solutions such as Cloud VPN, virtual firewalls and cloud routers.\nSecure Multi- and Hybrid Cloud Connectivity\nZCC eliminates the need for provisioning and managing cumbersome VPN/MPLS connections between clouds and on-premise environments. It establishes inside-out DTLS connections across multi- and hybrid clouds, brokered through Zscaler Zero Trust Exchange. The inside-out connectivity approach provides zero trust access between applications without the need for network access.\nUsing Zscaler Client Connector, you can get all of the benefits of the Zscaler service for Internet traffic and granular, policy-based access to internal resources from a single point.\nWith Zscaler Client Connector\u0026#8217;s Internet Security feature, you can protect your users\u0026#8217; web traffic even when they are outside your corporate network. With Zscaler Private Access (ZPA), you can securely enable your users to access enterprise applications outside the corporate network. ZPA establishes a secure transport for accessing your enterprise apps and services. You can also configure app profiles and specify, for example, how the app detects when a user is connected to a trusted network and, if a trusted network is detected, whether the app must disable its service. For greater flexibility, you can configure app profiles to apply to all users or specific groups of users in your organization.\n","externalUrl":null,"permalink":"/posts/temp-slug-35/","section":"Posts","summary":"Overview Zscaler Cloud Connector (ZCC) is a cloud-native zero trust access service that provides fast and secure app-to-app, app-to-Internet connectivity across multi- and hybrid cloud environments.","title":"Deploy ZCC App to corporate macOS Devices","type":"posts"},{"content":"I was assisting a user today with adding his Android device to our MDM system (Microsoft Intune), and he came across the message \"Activate Outlook as Device Administrator App,\" which probably all of us have undoubtedly seen and handled.\nJust like any other organization, we also deploy mobile devices as both business owned and Bring Your Own Devices with a combination of iOS and Android, and host mailboxes on Microsoft Exchange.\nAlso, it is a legitimate question for the end user to wonder why the Outlook software needs to be added as the device administrator on his own Android smartphone. And why is this required? I was able to convince him of its necessity and significance, which made me wonder: Why not spread the word to everyone so that everyone is aware of what the Device Admin App is and why it is necessary? So, let's get going, then!\nWhat is Device Administration?Android 2.2 was the first version of Android to support managing mobile devices. Enterprise requirements have changed since then. Devices are being used in a wider range of use cases and accessing more private resources than the original device admin API for Android was intended for. Some examples of these use cases are:\nFully managed corporate devicesBring your own deviceDedicated devices (Kiosks)It doesn't support several enterprise use cases because a device admin can be activated by any program for which the user grants permission. Examples include:\nSetting factory reset protection (FRP) to ensure devices remain managed and can be recovered when employees leave.Secure reset of device passwords on encrypted devices.Prevent removal of the device administrator.Establishment of admin-defined passcodes to lock the user out of a device.Since Android 5.0 introduced device owner and work profile modes, device administration has been seen as an outdated technique. With the release of Android 9.0, Google has been removing a few policies to make Android Enterprise more secure. Few policies that are deprecated now: USES_POLICY_DISABLE_CAMERA\nUSES_POLICY_DISABLE_KEYGUARD_FEATURES\nUSES_POLICY_EXPIRE_PASSWORD\nUSES_POLICY_LIMIT_PASSWORDThe Necessity We now know about \"Device Administration\", so let's understand why it is needed.\nEnterprise apps need support from the underlying operating system to implement or enforce device administration features, which require access to specific APIs at the system level. Using these APIs, app developers can enable the app to be \"security-aware\"; that is, the app knows that it has to behave/work in an enterprise context and at the same time, it helps the enterprise control corporate devices. For example, the native Android email app leverages these APIs to support Exchange policies. IT administrators can use the email app to enforce password policies — including alphanumeric passwords or numeric PINs — across devices. Administrators can also remotely wipe on lost or stolen handsets. Few apps that use the Device Administrator APIs:\nEmail clientsApps that can initiate device wipeDevice management apps/profilesVPN appsBehind the SceneLet's know understand how these app(s) that have access to device admin APIs can control the device features:\nAn app developer creates an app that has access to system APIs and can enforce/modify/update device policies - remotely and locally. The end user installs the apps on their personal devices, or the app is deployed through an MDM solution on end-user devices.The app will prompt the user to enable/activate it as a \"device admin app\".The security policies are enforced as soon as the user enables/activates the app as a device admin app. If the user denies activating the app as device admin app, then it will not enforce it's policies and the app remains on the device as in-active app.It depends on the actions configured in the app as to what it should do in the event of non-compliance when the app is deployed and the dependent policies are enforced.\nIn most cases, a user is denied from accessing corporate resources if their device is evaluated to be non-compliant with the security policies in place. In a nutshell, if a device (for example, a legacy device) does not support all of the stated policies, there is no way to allow the device to connect.\nThe strictest policy is enforced if a device contains multiple enabled admin apps. There is no way to target a particular admin app. Users must first unregister the app as an administrator to remove an existing device admin app.\nDevice Administration API currently only supports passwords for screen lock.Policies supported by the Device Administration APIThe ImportanceIn the modern era there is a variety of mobile devices that play a great role in contributing towards organizations success. One of the main challenge with exotechnology is with securing corporate data. An end user accesses corporate data from all type of devices like personal, corporate or kiosks and for each type of device there exists a policy for securing the data.\nComing back to Android devices, usage of device admin configuration depends upon the management type of your device:\nManaging personal devices (bring-your-own):An EMM deploys a work profile to create an OS-level container that separates a user's personal and work data and programs on their devices. The option to deploy applications utilizing managed Google Play gives businesses greater assurance that data won't be unintentionally or knowingly shared with unapproved applications. Furthermore, if a person leaves the company, IT administrators have the ability to selectively delete enterprise data without affecting their private files.\nManaging company-owned devices (Fully Managed):An EMM has full lifecycle management over the Android device and its data when a managed device is enrolled as fully managed.\nLockdown of hardware features, defense against factory reset and unenrollment, administrative remote wipe and reset of the entire device, and customization of programs with support for kiosk or single application deployments are all included in this. The three deployment modes listed below are often administered by organizations utilizing managed device mode, though these can be combined throughout an organization's fleet depending on its needs:\nWork only: Work only deployments generally target users who use a device for a variety of applications. Personal use isn’t supported with this method.Personally-enabled: Personally enabled deployments generally target users who have a device provided to them by their employer, but want the flexibility to also use personal applications on the device. The deployment of a work profile on a managed device allows the employee to run work applications alongside personal applications without compromising corporate data.Dedicated device: Dedicated device deployments generally encompass managed devices, sometimes called \"corporate owned, single use,\" or \"COSU,\" that lock down hardware and applications to tailor the device to the specific work functions an employee must perform.Sample ManifestHere is an excerpt from the Device Administration sample manifest:\noverride fun onPreferenceChange(preference: Preference, newValue: Any): Boolean { if (super.onPreferenceChange(preference, newValue)) return true val value = newValue as Boolean if (preference == enableCheckbox) { if (value != adminActive) { if (value) { // Launch the activity to have the user enable our admin. val intent = Intent(DevicePolicyManager.ACTION_ADD_DEVICE_ADMIN).apply { putExtra(DevicePolicyManager.EXTRA_DEVICE_ADMIN, deviceAdminSample) putExtra(DevicePolicyManager.EXTRA_ADD_EXPLANATION, activity.getString(R.string.add_admin_extra_app_text)) } startActivityForResult(intent, REQUEST_CODE_ENABLE_ADMIN) // return false - don't update checkbox until we're really active return false } else { dpm.removeActiveAdmin(deviceAdminSample) enableDeviceCapabilitiesArea(false) adminActive = false } } } else if (preference == disableCameraCheckbox) { dpm.setCameraDisabled(deviceAdminSample, value) } return true }ConclusionDevice Administration is an old way to get Admin access for your App and access features which otherwise is not available, like getting failed login notification, change pin and lock screen. It used to be difficult to uninstall an app on an Android phone with device admin enabled, but with newer Android versions, it's simpler because the user will receive a popup instructing him to turn off the program's admin privileges.\nUse the most recent Android Management APIs if you want to make it very tough to uninstall the app. The organization controls the app, and only has the authority to unlock it for uninstallation. This is typically utilized by companies who give their staff mobile devices and have stringent regulations requiring that they install a certain number of apps.\nThank you for staying with me on this topic. Would be looking out for your sugestions. 😃\n","externalUrl":null,"permalink":"/posts/device-admin-app/","section":"Posts","summary":"I was assisting a user today with adding his Android device to our MDM system (Microsoft Intune), and he came across the message \"","title":"Device Admin App: The necessity and importance","type":"posts"},{"content":"Welcome to part three of the All-In-One guide to managing Apple devices with Microsoft Intune. In previous parts, we discussed how the devices are enrolled in any MDM solution and how MDM communicates with devices. We also discussed different types of enrollment, and you can take advantage of them. Here's the link to the first two parts:\nThe need to manage devices and dataGetting Started - Apple Device Enrollment types \u0026amp; MDMOverviewApple Business Manager, Apple School Manager \u0026amp; Apple Business Essential are web-based portals that inetgrates with the Microsoft Intune. They allow you to manage your company's and school's iPad, iPhone as well as macOS devices. As an Intune administrator you use these portals to automate MDM enrollment and set up devices for users without having to touch or prepare the devices beforehand. This helps to simplify initial device setup, which can save time and hassle for users.\nYou can buy and manage content for a user’s iPhone, iPad, and Mac as well as organization-owned Apple TV devices. You can also create, edit, and publish content quickly and easily across these devices. ABM/ABE and Apple School Manager are required before you enroll any Apple products. You must sign up your organization for either of these before you can use them. Before you sign up for ABM or ASM or ASE, be sure that you meet the requirements and you gather the necessary information. Make sure you understand what the program entails, what the benefits may be, and what you need to do in order to be eligible. Be sure to ask any questions you have so you can make the best decision for your organization.\nYou can also manually add Apple devices by using Apple Configurator. To be eligible for these programmes, you need to meet certain requirements. Let's begin with comprehending the prerequisites for these programs.\nRequirements for ABM \u0026amp; ASMMake sure you are using a compatible browser on a supported operating system and should have the information needed to set up your initial administrator account available before signing up for Apple Business Manager.\nSupported browserOperating system requirementsPrerequisites for enrolling iOS/iPadOS via ABMor ASMTo enroll the Apple device, you must have an Apple Customer Number. This number can be obtained directly from Apple, or if you have previously enrolled in Apple's Customer Account Services, you can use that number to activate your device.If the device was bought from an Apple-authorized reseller or mobile network provider, you need to link the device to the reseller's number.To be eligible to purchase products from our organisation, your organisation must add the Reseller Number to its approved supplier list.What is Apple Business Manager?Apple Business Manager or ABM is a web-based portal that helps manage the deployment, content, and accounts for organizational devices. It provides a centralized location for managing all devices in an organization, making it easier to keep track of which devices are currently in use and to manage and update their content.\nApple Business ManagerWith ABM, you have the eligibility to enroll your corporate owned their devices in the Device Enrollment Program (DEP) and the Volume Purchase Program (VPP). These programs allow customers to purchase devices and content in bulk and receive discounts on their purchase. The ABM was made publicly available in 2018 and provides a variety of features that were previously provided by the two separate programs of the Apple Device Enrollment Program (DEP) and the Volume Purchase Program (VPP).\nWhat is Apple School Manager?Apple School Manager or ASM is an online portal that allows schools and educational institutions to configure and deploy Apple devices to classrooms. The portal also provides schools with tools to monitor and manage devices and user data. To use Apple School Manager, you must first enroll your school in Apple School Manager.\nOne of the great features of Apple School Manager is the ability to create managed Apple IDs, which are unique types of Apple IDs specifically designed for organizations. This makes it easy to manage user accounts and keep track of who is accessing what resources and providing educational institutions the ability to create separate accounts for students, teachers, and staff, this becomes the core functionality of the product. Managed Apple IDs can be used to sync with school data, such as Classroom information and the school’s student information system.\nApple School ManagerEducators can use Apple School Manager to access Apple's Classroom app, which provides a variety of resources for teaching students. Apple's Classroom app also allows educators to direct students to the resources they need, making learning more organized and efficient. With ASM, teachers and students can use the Shared iPad feature to share a single device between multiple students, allowing collaboration and enhanced learning opportunities. When another user signs in to the shared device, their work is automatically saved for their next session.\nWhen setting up Apple School Manager for integration with Intune for Education, you may also configure Microsoft School Data Sync (SDS) to synchronize user accounts and attributes from Apple School Manager to Azure Active Directory. This can be useful if you want to manage users and groups centrally in Azure Active Directory, and then use that data in Apple School Manager.\nWhat is Apple Business Essentials?Apple Business Essentials or ABE includes all the features of Apple Business Manager, plus a number of additional features specifically designed for small business.\nApple Business Essentials is a subscription service that helps businesses manage their devices and data more efficiently. It includes 24/7 support, cloud storage, and device management for employees' iPhones, iPads, Macs, and Apple TVs.\nCurrently Apple Business Essentials is only available for organizations registered in US.How is ABE different from ABM?The major difference between Apple Business Manager and Apple Business Essentials is the availability and the size of the organizations, with ABE limited to US only and a best fit for SMBs. The another difference is that Apple Business Essentials also comes with few plans that you have to add and assign to users or devices, providing them with device management, iCloud storage, and AppleCare support.\nYou can get started using Apple Business Essentials by choosing from employee or device plans, and mixing and matching plans based on the services you need. You can also get a two-month free trial of Apple Business Essentials.\n💡Services included with Apple Business Essentials are not supported with third-party MDM solutions.MDM server is automatically created when you purchase a Apple Business Essential plan. You can access it under Preferences \u0026gt; Your MDM servers.\nAn Apple Business Essentials MDM server can be used in addition to other MDM servers, but devices enrolled in an Apple Business Essentials plan cannot be enrolled in a third-party MDM server.\nBusiness Essentials - AppleWrapping UpApple Business Manager, Apple School Manager and Apple Business Essentials, all three programs helps businesses \u0026amp; educational institutions to buy, manage \u0026amp; distribute corporate-owned devices and content on them. I hope this article has helped you understand these three important Apple programs better. I would be happy to answer any questions you may have. Thank you for taking the time to read this article.\n","externalUrl":null,"permalink":"/posts/apple-school-managerapple-business-manager-or-apple-business-essentials/","section":"Posts","summary":"Welcome to part three of the All-In-One guide to managing Apple devices with Microsoft Intune.","title":"Device Deployment: ABM or ASM or ABE?","type":"posts"},{"content":"Apple has unleashed its latest developer darlings:\u0026nbsp;the iOS 18 and macOS 15 betas!\u0026nbsp;For the tech-savvy and curious,\u0026nbsp;these pre-release versions offer a glimpse into the future of Apple's software.\nThis is where Microsoft Intune swoops in.\u0026nbsp;As a powerful mobile device management (MDM) tool,\u0026nbsp;Intune can streamline the enrolment process for your iOS 18 and macOS 15 beta devices.\u0026nbsp;\n💡At the time of writing this post, Microsoft Intune does not support iOS 18 \u0026amp; macOS 15.Don't worry,\u0026nbsp;early birds!\u0026nbsp;This post will guide you through the process of enrolling your devices with Intune, so you can be among the first to explore the exciting new features of iOS 18 and macOS 15.\nBefore We Begin: A DisclaimerBeta software is inherently unstable and can contain bugs,\u0026nbsp;glitches,\u0026nbsp;and unexpected behavior.\u0026nbsp;It's best to avoid installing it on your primary devices.\u0026nbsp;Make sure you have a dedicated test environment and back up your data before proceeding.\n💡These operating systems are currently in Beta, and any issues encountered with enrollment, profiles, setup, apps, etc., are not yet supported. If you encounter any problems, you can open a support ticket with Microsoft to notify them. The details will be forwarded to the engineering team to help improve the product.Enrolment Essentials: What You'll NeedAn active Microsoft Intune subscriptionA compatible Apple device for iOS 18 beta \u0026amp; macOS 15 beta An Apple ID registered for the Apple Beta Software ProgramEnroll in Apple's Beta ProgramEnrolling in Apple's Beta Software Program allows you to test the latest operating systems before their official release. Here’s a step-by-step guide to enroll your devices in the beta program:\nStep 1: Sign Up for Apple’s Beta Software ProgramVisit the Apple Beta Software Program Website.Open your web browser and go to the\u0026nbsp;Apple Beta Software Program\u0026nbsp;website.Sign In with Your Apple IDClick on \"Sign Up\" or \"Sign In\" at the top right corner of the page.Use your Apple ID credentials to log in. If you don’t have an Apple ID, you can create one.Step 2: Installing and using Apple beta softwarePrepareBefore installing the beta software, ensure that you have a recent backup of your device. You can back up your iPhone using iCloud or iTunes/Finder.\nRelease notesBe sure to read the release notes for the version of software that you plan to install. Release notes provide details on API changes, known issues, fixes, workarounds, and deprecations for recent software releases.\nEnroll Your iOS Device:Go to Settings \u0026gt; General \u0026gt; Software Update \u0026gt; Beta Updates and choose the Developer beta.When a new developer beta is available, you can install it from Software Update.Install the iOS 18 Beta:After installing the profile, go to Settings \u0026gt; General \u0026gt; Software Update.The iOS 18 beta should appear. Tap “Update Now” and follow the prompts to complete the installation.Note: Your iPhone must be signed in with the Apple\u0026nbsp;ID you use to sign into to the Apple\u0026nbsp;Developer\u0026nbsp;website in order to access the beta software.\nThe method is absolutely same for macOS devices also.\nFor devices running macOS\u0026nbsp;13.4\u0026nbsp;Ventura or laterGo to System Settings \u0026gt; General \u0026gt; Software Update, then click the info button\u0026nbsp;ⓘ\u0026nbsp;next to ”Beta updates“. Choose the macOS Developer beta you’d like to install.When a new developer beta is available, you can install it from Software Update.Note: Your Mac must be signed in with the Apple\u0026nbsp;ID you use to sign into to the Apple\u0026nbsp;Developer\u0026nbsp;website in order to access the beta software.\nTesting macOS 15 Beta with Microsoft IntuneWe're taking our \"Early Bird Gets the Worm\" experiment a step further! As you may recall, we explored upgrading our device to the brand new macOS 15 beta. But what if your device was already supervised and enrolled with Intune before the beta update? Here’s how to handle that scenario.\nChanges in System Settings in macOS 15Before we delve into enrolment \u0026amp; the new Platform Single Sign-On (SSO) experience, let’s take a quick look at some of the notable changes in the system settings of macOS 15. Apple has made several adjustments to enhance usability and streamline configuration processes.\nThe system settings interface has received a major overhaul, featuring a more intuitive and modern design.An improved Privacy and Security settings menu makes it easier to manage how much information you’re sharing with apps.Settings are now grouped more logically, making it easier to find and configure various options.Device Management is moved to General in System SettingNew Password AppThe Passwords app will store logins and passwords for websites, Wi-Fi network passwords, and Passkeys—a feature that uses Face ID or Touch ID for logging into websites instead of a traditional password. Data from the app can be automatically inserted into websites and apps when a user logs in. Similar to the existing Passwords section in Settings, this dedicated Passwords app will be built on iCloud Keychain, Apple's feature that syncs login and password details across all Apple devices. These are just a few highlights, marking the beginning of what's to come. Most of the features announced at WWDC will be available with the first beta of macOS 15.\nA Quick Check Before We Re-Enrol the DeviceWipe the Device:Ensure any important data on the device is backed up, as wiping the device will erase all content and settings.Erase All Content and Settings:On your Mac, go to\u0026nbsp;Settings \u0026gt; General \u0026gt; Transfer or Reset \u0026gt; Erase All Content and Settings.Confirm the action. The device will restart and begin the wiping process.Enrolment ExperienceThe enrollment experience for a Mac running macOS 15 was smooth and straightforward, mirroring the process for previous versions. The steps involving the setup assistant, remote management profile, FileVault, and configuring the local account remain unchanged. However, there are noticeable changes in the overall look and feel of the operating system, particularly in the system settings where some options have been re-arranged. Now, let's move on to my favourite part – Platform Single Sign-On (SSO).\nNew UI Experience for Platform Single Sign-On (SSO) As we transition from macOS Sonoma to macOS 15, one of the significant improvements can be seen in the UI for Platform Single Sign-On (SSO). Here’s a comparison of the old and new UI to highlight the enhancements for both Password Authentication, Secure Enclave methods \u0026amp; Smart Card Authentication.\nPassword Authentication macOS Sonoma UIIn macOS Sonoma, the SSO registration process is straightforward but somewhat basic. The user is prompted to enter their Mac local password followed by the Entra (Azure AD) password. While functional, the interface is minimalistic and lacks detailed guidance.\nMinimalistic design with simple text fieldsmacOS Sequoia UIWith macOS 15, Apple has introduced a more polished and user-friendly interface for SSO registration. The new UI provides clearer instructions and a more detailed explanation of the process, making it easier for users to understand each step. The improved design not only enhances the visual appeal but also improves usability.\nDetailed instructions and explanations provided on the registration screen, guiding users through the process with more clarity.Enhanced visual design with icons and structured layout, making it more visually appealing and easier to follow.Enhanced visual design with icons and structured layoutSecure Enclave Authentication with PSSOmacOS Sonoma UIMinimalistic design with simple text fieldsmacOS Sequoia UISmart Card Authentication with PSSOConclusionThe overhaul of the SSO registration UI in macOS 15 is a significant improvement over macOS Sonoma. It offers a more intuitive and informative experience for end users, making the SSO process smoother and more transparent. The integration of the Secure Enclave \u0026amp; Smart Card authentication methods further enhances security by utilising hardware-based authentication. This is just one of the many enhancements in macOS 15 aimed at improving user experience and functionality. Happy exploring!\n","externalUrl":null,"permalink":"/posts/early-bird-gets-the-worm-testing-ios-18-macos-15-beta-devices-with-intune/","section":"Posts","summary":"Apple has unleashed its latest developer darlings:\u0026nbsp;the iOS 18 and macOS 15 betas!","title":"Early Bird Gets the Worm: Testing iOS 18 \u0026 macOS 15 (Beta) Devices with Intune","type":"posts"},{"content":"In the realm of macOS app deployment, Intune continues to improve and evolve, providing with an ever-increasing level of control and enhanced functionality. One of the standout features released with the recent release of Microsoft Intune is the ability to execute pre-install and post-install scripts, offering granular oversight throughout the app installation lifecycle. In this article will explore the advantages of these scripts and illustrate their utility with a practical example of Google Chrome.\nPre-Install Script: Laying the Groundwor\nBefore diving into the actual app installation, the pre-install script sets the stage. This preliminary phase allows administrators to carry out tasks such as verifying system prerequisites, adjusting settings, or downloading additional components. For instance, if a macOS PKG app requires certain system configurations to function optimally, the pre-install script can ensure these are set up prior to the installation.\nPost-Install Script: Fine-Tuning the Installation\nUpon successful installation of the app, the post-install script comes into action. This script is designed for post-processing tasks, such as registering the app with the system, fine-tuning user preferences, or activating specific features. If the app you're deploying requires particular permissions or configurations, the post-install script can seamlessly integrate these elements.\nCustomizing App Installation with Scripts\nThe combination of pre-install and post-install scripts empowers administrators to tailor the app installation process to their specific needs. These scripts offer a versatile toolset for addressing unique requirements and ensuring seamless app deployment.\nHere's an example scenario:\nDeploying Microsoft Defender for Endpoint on macOSThe pre-install script can check for the presence of Microsoft Defender for Endpoint and the Microsoft Intune management agent. If either is missing, the script can initiate their installation.\nThe post-install script can handle tasks such as configuring Microsoft Defender for Endpoint settings, adding system extensions to the list of allowed extensions, and granting necessary permissions.\nConclusion\nIntune's evolving capabilities in macOS app deployment, particularly with the use of pre-install and post-install scripts, empower MDM admins to create a more customized and efficient installation process. These scripts not only facilitate optimal app configurations but also contribute to a seamless user experience.\n","externalUrl":null,"permalink":"/posts/enhancing-macos-app-deployment-with-pre-install-and-post-install-scripts/","section":"Posts","summary":"In the realm of macOS app deployment, Intune continues to improve and evolve, providing with an ever-increasing level of control and enhanced functionality.","title":"Enhancing macOS App Deployment with Pre-Install and Post-Install Scripts","type":"posts"},{"content":" Apple will remove the Company Portal authentication method for all new and existing iOS/iPadOS ADE enrollment profiles in November 2022. This will include removing the Run Company Portal in Single App Mode until authentication with Comp Portal. in this post, and I will help you switch to modern authentication in enrollment profiles on the latest iOS build \u0026#8211;\u0026nbsp;iOS16.\nWhy the change: Impact of this change:\u0026nbsp;If you are currently using a legacy authentication method wherein your users are required to authenticate using the comp portal VPP token, then the devices will not be able to re-enroll until you switch the enrollment authentication method to Setup Assistant with modern authentication.\u0026nbsp;\nPlan for Change:\u0026nbsp;The new enrollment profile will have modern authentication configured so that the users will not get a “Guided Access App Unavailable” message. The authentication will occur before the user presses the home screen. This will also reduce the overall time taken to enroll a device.\nAssumption In this post, I assume you are using the legacy authentication method. During the enrolment process, Company Portal runs in a single App Mode with a “Guided Access App Unavailable” message until authentication for ADE is completed.\u0026nbsp;\nPrerequisites\u0026nbsp; Devices purchased in Apple\u0026#8217;s ADEMobile device management (MDM) authorityAn Apple MDM push certificate Device Enrollment in Intune Before you start to enroll iOS/iPadOS devices with ADE, there are a series of steps that you need to follow.\nCreate \u0026amp; Upload Apple MDM Push CertificateCreate \u0026amp; Upload the Apple Automated Device Enrollment tokenAssign devices to the Apple token (MDM server)Create an Apple enrollment profile A few months back, I wrote a post on\u0026nbsp;automated device enrollment for corporate-owned devices, detailing the first three steps. Now let\u0026#8217;s complete the series by creating an enrollment profile and enrolling an iPhone in Intune with brand new iOS 16.\nCreate an Apple Enrollment Profile The device enrollment profile helps you configure the setting you would like to apply/configure on devices during the enrollment phase. Follow the steps to create an enrollment profile:\n1. From the Microsoft Endpoint Manager portal, navigate to Devices \u003e iOS/iPadOS \u003e iOS/iPadOS enrollment \u003e Enrollment program tokens.\n2. Select a token, and then select\u0026nbsp;Profiles.\n3. Select\u0026nbsp;Create profile\u0026nbsp;\u0026gt;\u0026nbsp;iOS/iPadOS or\u0026nbsp;select the existing profile to modify it.\u0026nbsp;\n(If you are modifying an existing profile, then you can skip all steps except step 6)\n4. If you are creating a new profile, then Provide a\u0026nbsp;Name\u0026nbsp;and\u0026nbsp;Description\u0026nbsp;for the profile\n\u0026nbsp;\u0026nbsp;\u0026nbsp;(These details will not be visible to users) and click\u0026nbsp;Next.\n5. In the management settings page, select \u0026#8220;Enroll with User Affinity\u0026#8221; as we will use this profile to enroll devices associated with users.\n6. As we selected Enroll with User Affinity for the User Affinity field, we can choose the authentication methods to use when authenticating users.\nLet\u0026#8217;s check both options:\nCompany Portal: You can use the Company Portal app to authenticate users if you\u0026nbsp;want to use multi-factor authentication, prompt users to change their\u0026nbsp;passwords after first signing in, or reset their expired passwords\u0026nbsp;during enrollment.Setup Assistant with modern authentication:\u0026nbsp;This authentication method has two\u0026nbsp;major differences. First, only iOS/iPadOS 13.0 and higher devices are eligible for this\u0026nbsp;method. Second, the user can start using the device immediately\u0026nbsp;rather than wait until the company portal installs on the device. Irrespective of which option you choose, the Company Portal app will be installed without user interaction; as such, it must be pushed as a \u0026#8220;mandatory app\u0026#8220;.\n7. For\u0026nbsp;locked enrollment,\u0026nbsp;I would recommend using \u0026#8220;Yes\u0026#8221; for supervised devices, as it\u0026nbsp;disables iOS/iPadOS settings for removing the management profile from the device. The\u0026nbsp;only option to remove the profile is to wipe it.\n8. If you allow users to sync their devices with any computer, select \u0026#8220;Allow All\u0026#8221; from\u0026nbsp;Sync with the Computer option.\n9. Configure naming template or cellular data if required and click\u0026nbsp;Next\u0026nbsp;to proceed.\n10. On the Setup Assistant page, update settings for \u0026#8220;Department\u0026#8221; \u0026amp; \u0026#8220;Department Phone Number\u0026#8221;.\n11. Next, you can toggle the options to modify the Setup Assistant screens on the device\u0026nbsp;during user setup.\n\u0026nbsp;Sync managed devices\n\u0026nbsp;Now that Intune has permission to manage your devices, we have to synchronize Intune with Apple to see your managed devices in Intune portal.\nA delta sync runs automatically every 12 hours; however, we can also trigger a delta sync by selecting the\u0026nbsp;Sync\u0026nbsp;button (no more than once every 15 minutes). All sync requests are given 15 minutes to finish. The\u0026nbsp;Sync\u0026nbsp;button is disabled until a sync is completed.\nAssign an enrollment profile to devices (If you are modifying an existing profile or if you do not want to add new devices to the profile, then you can skip this step)\nIf you have multiple enrollment profiles or do not have a default profile set, you will need to assign an enrollment program profile to devices before they can be enrolled.\nIn Intune portal, navigate to\u0026nbsp;Devices\u0026nbsp;\u0026gt;\u0026nbsp;iOS/iPadOS\u0026nbsp;\u0026gt;\u0026nbsp;iOS/iPadOS enrollment\u0026nbsp;\u0026gt;\u0026nbsp;Enrollment Program Tokens. Select a token in the list.Select\u0026nbsp;Devices. Select devices in the list, and then select\u0026nbsp;Assign profile.Choose a device profile from the Assign profile, then select\u0026nbsp;Assign. We have everything in place now to distribute devices to users. However, before that, please take note of the following:\nUser affinity devices require each user to be assigned an Intune license.An activated device needs to be wiped before it can enroll properly using ADE in\n\u0026nbsp;Intune.\u0026nbsp; End User Experience Let\u0026#8217;s have a look at device enrollment flow with both authentication methods.\n1. Company Portal Authentication (old method)\n2. Setup Assistant with Modern Authentication (Recommended):\nNotice the difference here that authentication with Azure Active Directory (Azure AD) happens in out-of-box experience (OOBE) during enrollment with Setup Assistant before users access the home screen.\u0026nbsp;\n","externalUrl":null,"permalink":"/posts/enroll-supervised-ios-devices-with-modern-authentication-with-ios16-2/","section":"Posts","summary":"Apple will remove the Company Portal authentication method for all new and existing iOS/iPadOS ADE enrollment profiles in November 2022.","title":"Enroll Supervised iOS Devices With Modern Authentication With iOS16","type":"posts"},{"content":"In today's digital age, remote assistance has become an essential tool for providing technical support to users. Microsoft Intune offers a powerful solution for secure help desk connections through its Remote Help feature. Designed specifically for macOS users, Remote Help allows support staff to remotely connect to a user's device and provide assistance. In this comprehensive guide, we will explore the capabilities, requirements, and step-by-step instructions for using Remote Help on macOS with Microsoft Intune.\nIntroduction to Remote Help with Microsoft Intune\nRemote Help is a cloud-based solution offered as an add-on to Microsoft Intune. It enables secure help desk connections with role-based access controls, allowing support staff to remotely connect to a user's device. In this context, users who provide help are referred to as \"helpers,\" while users who receive help are called \"sharers.\" Both helpers and sharers sign in to their organization's web app using Azure Active Directory (Azure AD) credentials.\nDuring a Remote Help session, the helper has the ability to view the sharer's device display, enabling them to diagnose and resolve technical issues remotely. To ensure security and control, Remote Help uses Intune role-based access controls (RBAC) to define the level of access a helper is allowed. Through RBAC, administrators can determine which users can provide help and the extent of help they can offer.\nRemote Help on macOSRemote Help on macOS offers several key capabilities that enhance the support experience. These capabilities include:\nHelp users on unenrolled devices\nBy default, the Remote Help feature is turned off for devices not enrolled in Intune. However, as an Intune admin you can choose to enable this function for unenrolled devices as well. This adaptability allows for a broader spectrum of devices to receive support, irrespective of whether they’re enrolled in Intune or not.\nConditional Access\nYou can also take advantage of conditional access features when configuring policies and criteria for Remote Help. This functionality allows for more nuanced control over who is eligible for Remote Help and the specific conditions under which it can be accessed.\nCompliance Warnings\nPrior to initiating a Remote Help session, helpers receive a non-compliance alert if the device sharing the screen doesn’t meet the set policies. Although this warning doesn’t prevent access, it offers visibility into potential security risks, like the exposure of administrative credentials, that may arise during the session.\nChat during remote support session\nRemote Help comes with an advanced chat function that keeps a running log of all messages sent and received throughout the session. This chat feature accommodates special characters and supports multiple languages, such as Chinese and Arabic.\nPrerequisites for Remote Help on macOSBefore using Remote Help on macOS, there are several general prerequisites that need to be met. These prerequisites include:\nProper licensing and configuration of Microsoft Intune.Access to the Microsoft Intune admin center.User accounts with the necessary permissions to provide or receive help.In addition to the general prerequisites, there are specific requirements for using Remote Help on macOS. These requirements include:macOS versions: 11 Big Sur, 12 Monterey, and 13 Ventura.Safari (version 16.4.1+), Chrome (version 109+), and Microsoft Edge (version 109+).Enable Remote HelpSign in to\u0026nbsp;Microsoft Intune admin center\u0026nbsp;and go to\u0026nbsp;Tenant administration\u0026nbsp;\u0026gt;\u0026nbsp;Remote Help.Set\u0026nbsp;Enable Remote Help\u0026nbsp;to\u0026nbsp;Enabled\u0026nbsp;to allow the use of remote help. By default, this setting is\u0026nbsp;Disabled.Set\u0026nbsp;Allow Remote Help to unenrolled devices\u0026nbsp;to\u0026nbsp;Enabled\u0026nbsp;if you want to allow this option. By default, this setting is\u0026nbsp;Disabled.Set\u0026nbsp;Disable chat\u0026nbsp;to\u0026nbsp;Yes\u0026nbsp;to remove the chat functionality in the Remote Help app. By default, chat is enabled and this setting is set to\u0026nbsp;No.Select\u0026nbsp;Save.Network RequirementsRemote Help depends on network connectivity to create and sustain secure links between helpers and those sharing their screens. Communication between devices happens over port 443 (https) and uses the Remote Desktop Protocol (RDP). For a smooth connection, the following endpoints must be reachable via port 443:\nDomain/NameDescription*.aria.microsoft.comAccessible Rich Internet Applications (ARIA) service for providing accessible experiences to users*.cc.skype.comRequired for Azure Communication Service*.events.data.microsoft.comMicrosoft Telemetry Service*.flightproxy.skype.comRequired for Azure Communication Service*.registrar.skype.comRequired for Azure Communication Service*.support.services.microsoft.comPrimary endpoint used for the Remote Help application*.trouter.skype.comUsed for Azure Communication Service for chat and connection between parties*.aadcdn.msauth.netRequired for logging in to the application Microsoft Azure Active Directory*.aadcdn.msftauth.netRequired for logging in to the application Microsoft Azure Active Directory*.edge.skype.comUsed for Azure Communication Service for chat and connection between parties*.login.microsoftonline.comRequired for Microsoft sign-in service. Might not be available in preview in all markets or for all localizations*.remoteassistanceprodacs.communication.azure.comUsed for Azure Communication Service for chat and connection between parties*.turn.azure.comAzure Communication Service*.remotehelp.microsoft.comPrimary endpoint for Remote Help Web App*.trouter.teams.microsoft.comAllows for the Remote Help Web App to become directly addressable within the web browser*.trouter.communication.microsoft.comAllows for the Remote Help Web App to become directly addressable within the web browser*.alcdn.msauth.netRequired to sign in to the application Microsoft Azure Authentication Library*.wcpstatic.microsoft.comUsed to confirm cookie compliance in accordance with various lawsTo Request Help as a SharerTo request assistance as a sharer using Remote Help, you’ll first need to contact the support team to get the process started. Here’s a detailed guide on how to go about it:\nContact your IT Team to request assistance.Once both you and the helper are ready to start the session, the helper will send you a Remote Help session link. This link will be in the format:https://remotehelp.microsoft.com/quickconnect?passcode=p0uq6kjlOpen your browser and navigate to the provided session link. If required, sign in with your Azure AD credentials.After signing in, you will see information about the helper, including their full name, job title, company, profile picture, and verified domain.At this point, the helper can only request a screen sharing session. You will be prompted to allow remotehelp.microsoft.com to use your microphone. Select \"Allow\" to continue.To proceed with the session, select \"Share screen\" Again, you may see a prompt to allow remotehelp.microsoft.com to share your screen. Select \"Allow\" to continue.Once the session is established, the helper will be able to assist you in resolving any issues on your device.If your device is unenrolled with Intune and your administrator allows help on unenrolled devices, you may need to enter a security code provided by the helper during the session setup process.Providing HelpAs a helper, your role is essential in offering remote support to sharers. Here’s how to go about it step-by-step:\nNavigate to the device you're trying to help from within the Microsoft Intune admin centerSign into\u0026nbsp;Microsoft Intune admin center\u0026nbsp;and go to\u0026nbsp;Devices\u0026nbsp;\u0026gt;\u0026nbsp;All devices\u0026nbsp;and select the macOS device on which assistance is needed.From the remote actions bar across the top of the device view, select\u0026nbsp;New remote assistance session\u0026nbsp;and select\u0026nbsp;Remote Help, and then\u0026nbsp;Continue.Copy and share session link with the sharer that you're trying to help, before selecting\u0026nbsp;Start\u0026nbsp;to launch a new Remote Help session.When the sharer navigates to the session link with the passcode embedded, they're able to directly get to the specific session. As an alternative, you can copy and share the 8-digit passcode with the sharer. The sharer can navigate to aka.ms/rh and follow the stepsWhen Remote Help opens in a new tab, you must sign in to authenticate to your organization.After the sharer navigates to the Remote Help session, as the helper you'll see information about the sharer, including their full name, job title, company, profile picture, and verified domain. The sharer sees similar information about you.At this time, you can only request a screen sharing session of the sharer's device. The sharer can choose\u0026nbsp;Allowor\u0026nbsp;Decline\u0026nbsp;the request. You can also configure Conditional access allows administrators to define policies and conditions for accessing Remote Help. By configuring conditional access, administrators can ensure that only authorized users can utilize Remote Help and that specific conditions are met. Video TutorialKnown Issues While Remote Help is a powerful tool for remote assistance, there are a few known issues to be aware of. One such issue is that if the sharer exits a Remote Help session early, the helper may not be notified for 60+ seconds. Additionally, when using Microsoft Edge, the sharer may need to sign in to the browser before starting a session, or the device may be reported as unenrolled.\nConclusionThis is just the beginning! Currently, Remote Help on macOS only supports session viewing, but it's poised to become an indispensable resource for delivering secure and effective tech support. Whether you're on the receiving end of help or the one providing it, Remote Help promises a smooth and efficient support experience on macOS devices.\n","externalUrl":null,"permalink":"/posts/exploring-microsoft-intune-remote-help-on-macos/","section":"Posts","summary":"In today's digital age, remote assistance has become an essential tool for providing technical support to users.","title":"Exploring Microsoft Intune's Remote Help on macOS: A Hands-On Guide","type":"posts"},{"content":"Apple Business Manager, along with Microsoft Entra ID, offers a powerful solution for enhancing business security through federated authentication. By seamlessly integrating these two platforms, organizations can strengthen their security measures, streamline authentication processes, and protect their valuable assets. In this article, we will explore the benefits and features of federated authentication in Apple Business Manager and how it can help enhance your business security.\nThe Importance of Business SecurityEnsuring the security of your enterprise sensitive data and information should be a top priority. Cyber threats and breaches continue to loom over, making it crucial to implement robust security measures. Without proper security protocols in place, your organization can face significant financial losses, reputational damage, and legal consequences.\nFederated authentication is a powerful solution that can enhance your security. By implementing federated authentication in Apple Business Manager, you can establish a secure and streamlined authentication process for your employees. In addition to protecting your assets, federated authentication also simplifies the user experience. Employees can use their existing credentials to access multiple applications and platforms, eliminating the need for multiple passwords and reducing the risk of password-related security vulnerabilities.\nUnderstanding Federated AuthenticationFederated authentication is a method that allows users to access multiple applications and platforms with a single set of credentials. Instead of having separate usernames and passwords for each system, federated authentication enables users to sign in once and gain access to all authorized resources.\nIn the context of Apple Business Manager, federated authentication is the process of using an account’s username and password from one directory system allowing the same username and password to be used in other systems. When a user attempts to access an application, they are redirected to the IdP, where they enter their credentials. The IdP verifies the user's identity and issues a digitally signed token, also known as an SAML assertion. This token is then sent back to the application, which uses it to verify the user's identity and grant access.\nHow ABM Can Enhance Security?Apple Business Manager is a comprehensive solution that not only simplifies management of your organization's Apple devices but also enhances security through federated authentication. By utilizing this powerful feature, you can reinforce your business's security measures in multiple ways.\nFirstly, with federated authentication, your employees no longer need to remember and manage multiple usernames and passwords for different applications and platforms. This eliminates the risk of weak passwords or password reuse, significantly reducing the chances of unauthorized access to your company's resources. Furthermore, federated authentication ensures that only authorized individuals can access your organisation's data and applications. When users attempt to access an application, they must authenticate themselves through the identity provider (IdP) using their credentials. This adds an extra layer of security, as the IdP verifies the user's identity before issuing a digitally signed token.\nAdditionally, Apple Business Manager supports industry-standard protocols for federated authentication. This compatibility allows seamless integration with a wide range of applications and identity providers, making it easier to implement and manage federated authentication in your organisation. So let's start and delve into the step-by-step process of implementing federated authentication in Apple Business Manager and explore some of its new features in greater detail.\nImplement Federated Authentication in ABMNow that we understand the importance and benefits of federated authentication in enhancing business security, let's dive into the step-by-step process of implementing this feature in Apple Business Manager.\nTo add the Apple Business Manager Entra ID app with Microsoft tenants, the administrator of the tenants must go through the federated authentication setup process, including testing authentication. When authentication has succeeded, the Apple Business Manager Entra ID app is populated in the tenant and the administrator can federate domains and configure Apple Business Manager to use SCIM (System for Cross-domain Identity Management) for directory sync.\u0026nbsp;\nPrepare ABM for Federation\nTo use\u0026nbsp;Managed Apple IDs, you must verify the domains you want to use, or you can use the reserved domain. The verification process ensures that your organisation is the one that has authority to modify the domain name service (DNS) records for your domain.\nIn Apple Business Manager\u0026nbsp;,\u0026nbsp;sign in as a user that has the role of Administrator or People Manager.Select your name at the bottom of the sidebar, select Preferences\u0026nbsp;,\u0026nbsp;then select Accounts\u0026nbsp;.Select Edit in the Domains section, select Add Domain, add the domain you want to use, then select Continue.Select Verify next to the domain.A TXT record appears and you’ll receive an email saying that the domain you selected is now attempting to be verified. 💡You have 14 calendar days to complete the verification process. The TXT record contains a string with random characters at the end, for example, “apple-domain-verification=RaNdOmLeTtErSaNdNuMbErS.”Select Copy.After the TXT record is added,\u0026nbsp;finalise the verification process.Finalise the Verification Process\nIn Apple Business Manager\u0026nbsp;,\u0026nbsp;sign in as a user that has the role of Administrator or People Manager.Select your name at the bottom of the sidebar, select Preferences\u0026nbsp;,\u0026nbsp;then select Accounts\u0026nbsp;.Locate the domain whose TXT record was added, then select Check Now.After a domain has been successfully verified, you can remove the TXT record from the zone file.Copy SCIM Token from ABM\nIn Apple Business Manager\u0026nbsp;,\u0026nbsp;sign in as a user that has the role of Administrator or People Manager.Select your name at the bottom of the sidebar, select Preferences\u0026nbsp;,\u0026nbsp;then select Directory Sync\u0026nbsp;.Select Connect next to SCIM, carefully read the warning, select Copy, then select Close.💡Leave this window open to copy the tenant URL from Apple Business Manager to Entra ID.Configure Automatic User Provisioning to ABM\nSign in to Microsoft Entra Admin center (https://entra.microsoft.com)Browse to\u0026nbsp;Identity\u0026nbsp;\u0026gt;\u0026nbsp;Applications\u0026nbsp;\u0026gt;\u0026nbsp;App registrations.Search for Apple Business Manager Azure AD app (you will see the Apple Business Manager icon\u0026nbsp;).Select Provisioning in the sidebar, select Get StartedSelect the\u0026nbsp;Provisioning\u0026nbsp;tab.Set the\u0026nbsp;Provisioning Mode\u0026nbsp;to\u0026nbsp;Automatic.Under the\u0026nbsp;Admin Credentials\u0026nbsp;section, input the\u0026nbsp;SCIM 2.0 base URL and Access Token\u0026nbsp;values retrieved from Apple Business Manager in\u0026nbsp;Tenant URL\u0026nbsp;and\u0026nbsp;Secret Token\u0026nbsp;respectively.Click\u0026nbsp;Test Connection\u0026nbsp;to ensure Microsoft Entra ID can connect to Apple Business Manager.Connection is successful💡This process can take up to 60 seconds for Apple Business Manager to reflect the latest connection status.In the\u0026nbsp;Notification Email\u0026nbsp;field, enter the email address to receive the provisioning error notifications and check the checkbox -\u0026nbsp;Send an email notification when a failure occurs.Under the\u0026nbsp;Mappings\u0026nbsp;section, select\u0026nbsp;Synchronize Microsoft Entra users to Apple Business Manager.Define the users and/or groups that you would like to provision to Apple Business Manager by choosing the desired values in\u0026nbsp;Scope\u0026nbsp;in the\u0026nbsp;Settings\u0026nbsp;section.Check the\u0026nbsp;progress bar\u0026nbsp;to see the status of the provisioning cycle and how close it is to completion.Status of provisioning cycleFederation Status.At this point, we've successfully set up Federated Authentication in Apple Business Manager, and it's now time to delve into some of its forthcoming exciting features. These beta functionalities offer you the opportunity to assist Apple in their evaluation process. By integrating these features into your IT infrastructure, and with a select group of users, you can ensure that your organization is well-prepared to support your workforce once these features officially graduate from beta status.\nExploring Beta Features After Federated AuthenticationTo enable Beta Features in ABM, follow the below steps:\nIn Apple Business Manager\u0026nbsp;,\u0026nbsp;sign in with your account.Select\u0026nbsp;your name at the bottom of the sidebar, select Preferences\u0026nbsp;,\u0026nbsp;then select Beta Features\u0026nbsp;.Do one of the following:If any user from this organisation with AppleSeed for IT administrator privileges has already accepted the AppleSeed for IT terms and conditions, select Enable to have the beta feature appear in Apple Business Manager.If no user from this organisation has accepted the AppleSeed for IT terms and conditions, select Begin Enrolment, sign in to AppleSeed for IT, and accept the terms and conditions.💡Please Note: Beta Features once toggled ON, CANNOT be switched-off! Do Not Proceed with next steps in your PRODUCTION Environment!The new feature I am trying out today is customizing the user access to certain apps and services on managed and unmanaged devices using ABM. Customise access to certain apps and services using ABMIf you're looking to grant users signed in with a Managed Apple ID access to various Apple apps and services, Apple Business Manager allows you to do just that. As an Administrator or People Manager, you have the flexibility to customize app and service accessibility for individual users. For instance, you can enable particular iCloud features, define what app data can be stored in the cloud, or even restrict access to FaceTime and iMessage.\nTo further customise, you can choose what devices users can sign in to, and you can tailor their access to specific privacy and security features.\n💡A user’s\u0026nbsp;Managed\u0026nbsp;Apple\u0026nbsp;ID\u0026nbsp;is automatically signed out of all devices if any access feature is changed or if the device state does not meet the access management requirements.Requirements\niOS 17,\u0026nbsp;iPadOS 17macOS 14Rights to create policy/configurations in IntuneAccess Management for Apple Services\nOnce activated, a section for Apple Services will appear under the Access Management tab, and any modifications made will affect all users. These restrictions will only apply to devices running iOS 17, iPadOS 17, or macOS 14 Sonoma. Users on devices with older operating systems won't be able to sign in, or will be automatically signed out.\nBeta-specific issues to be aware of:\nChanges to iCloud service permissions will only take effect upon a user's next sign-in. Users already signed in must log out and log back in on their device to receive the updated policy.If a user is logged in on a device that fails to meet your designated device management criteria, they may be logged out after a delay of up to 24 hours.Manage iCloud Features \u0026amp; Access\nYou can customise any of the features below to meet your business requirements. This includes deciding what devices a user can sign in with their Managed Apple ID:\nAny device: The user can sign in on any device, regardless of whether the device appears in Apple Business Manager.Managed devices only: The serial number of the device must appear in Apple Business Manager and be managed Intune.Supervised devices only: The device must be supervised (and managed) and the serial number of the device must appear in Apple Business Manager and be managed by Intune.Below are the steps to configure the access:\nIn Apple Business Manager\u0026nbsp;,\u0026nbsp;sign in with an account that has the role of Administrator or People Manager.Select Access Management\u0026nbsp;\u0026nbsp;in the sidebar, then select Apple Services\u0026nbsp;.Select iCloud, then select what devices users can sign into with their\u0026nbsp;Managed Apple ID:OffAny device (default)Managed devices onlySupervised devices onlySelect Collaboration, then turn on the ability for users to collaborate on files created using Keynote, Numbers and Pages, and whether to allow those files to be accepted automatically.Anyone (default)Organisation onlyOffAuto Accept FilesSelect iCloud from the top, then turn off access to the following iCloud features:iCloud Drive:\u0026nbsp;Users can store data in\u0026nbsp;iCloud Drive.iCloud Keychain:\u0026nbsp;Users can store their passwords and passkeys in\u0026nbsp;iCloud Keychain.iCloud Backup:\u0026nbsp;Users can use\u0026nbsp;iCloud Backup\u0026nbsp;to back up their devices.Turn off access to storing app data in iCloud for the appsManage user access to FaceTime \u0026amp; iMessage\nBy default, users who sign in with a\u0026nbsp;Managed Apple ID\u0026nbsp;can access FaceTime and iMessage. You can modify that access.\nFaceTime:\u0026nbsp;FaceTime (both audio only and video) can be turned off, allowed with only other users in your organisation, or anyone inside and outside of your organisation.iMessage:\u0026nbsp;iMessage can be turned off, allowed with only other users in your organisation, or allowed with anyone inside and outside of your organisation.Note:\u0026nbsp;If iMessage is turned off, users can still send and receive SMS/MMS messages.Steps to configure:\nIn Apple Business Manager\u0026nbsp;,\u0026nbsp;sign in with an account that has the role of Administrator or People Manager.Select Access Management\u0026nbsp;\u0026nbsp;in the sidebar, then select Apple Services\u0026nbsp;.Select FaceTime, turn it off or on. If you turn it on, select one of the following:Anyone (default)Organisation onlySelect Apple Services from the top, select Messages, turn it off or on. If you turn it on, select one of the following:Anyone (default)Organisation onlyChoose what devices users can sign in to\nYou can choose what devices users can sign in to with their\u0026nbsp;Managed Apple ID.\nIn Apple Business Manager\u0026nbsp;,\u0026nbsp;sign in with an account that has the role of Administrator or People Manager.Select Access Management\u0026nbsp;\u0026nbsp;in the sidebar, then select Apple Services\u0026nbsp;.Select 'Allow\u0026nbsp;Managed Apple ID\u0026nbsp;on', then select one of the following:Any device (default):\u0026nbsp;The user can sign in on any device, regardless of whether the device appears in Apple Business Manager.Managed devices only:\u0026nbsp;The serial number of the device must appear in Apple Business Manager.Supervised devices only:\u0026nbsp;The device must be supervised and the serial number of the device must appear in Apple Business Manager.End User ExperienceConclusionIn conclusion, integrating federated authentication with Apple Business Manager and Microsoft Entra ID offers a robust and streamlined solution for enhancing business security. The process not only simplifies user experience by allowing single sign-on capabilities across various platforms but also adds multiple layers of security to protect sensitive organizational data. This integration supports industry-standard protocols, making it highly compatible and easy to implement. Additionally, Apple Business Manager's beta features and customization options for app and service accessibility provide businesses with the flexibility to meet specific security and usability requirements. With cyber threats on the rise, leveraging these integrated features could be a game-changer in fortifying your organization's security infrastructure.\n","externalUrl":null,"permalink":"/posts/look-beyond-federated-authentication/","section":"Posts","summary":"Apple Business Manager, along with Microsoft Entra ID, offers a powerful solution for enhancing business security through federated authentication.","title":"Extending Access Management for Apple Services: Beyond Federated Authentication","type":"posts"},{"content":"A security feature called Factory Reset Protection (FRP) makes sure that if your phone is lost or stolen, it cannot be quickly reset by someone else. FRP has been a part of stock Android since Android Lollipop, which is automatically activated after you have added a Google account to Android. This is important since it makes a stolen phone more challenging, deterring someone from stealing a corporate device. The screen will show the message of signing in with the previous account synced on this mobile, making the phone useless.\nHow does it work, and why should you use it?When you perform a Factory Data Reset, all settings are returned to the factory default settings. All data is erased, including files and downloaded apps.\nIf it's a personal Android phone, then can erasing it or doing a factory reset is a relatively simple task. You need to go to settings and initiate a full factory reset. On the other hand, for a corporate device, the option to allow/block a user to do a factory reset is controlled through MDM restrictions. However, a hard reset can still be performed if you have not configured FRP, and this is a risk of losing your corporate data and device. If you have a Google account set up on the device, resetting it will require you to log in with your username and password. If you have multiple Google accounts set up on the device, you can log in with any of them. If an unauthorized person tries to reset the device by another method, the device would still require log-in in using the Google username and password. This means that if your device is lost or stolen, another person cannot reset it and use it.\nThere are various ways to bypass security measures to use a phone, but these methods are usually patched quickly. To legitimately use the phone, you will need to know the login information for the last account.\nHow to enable Factory Reset ProtectionUsing Microsoft Intune, you can easily configure FRP in a few clicks. Steps as below:\nCreate an Android device restrictions configuration profile.Give it a name and description to suit the purpose.Expand \"General\" and navigate to \"Factory reset protection emails\" configuration.Select Factory reset protection emailsChoose Google account email addresses. Enter the email addresses of device administrators that can unlock the device after it's wiped. Be sure to separate the email addresses with a semi-colon, such as admin1@gmail.com;admin2@gmail.com. These emails only apply when a non-user factory reset is run, such as running a factory reset using the recovery menu.Enter the email addresses of device administrator(s)How to find your Google Account ID?Google Account ID refers to the 21-digit ID of your Google Account and if you are using Intune as MDM solution then you do not need th ID. However for other MDM solution, to enforce FRP you will need the Google account ID. To find your Google Account ID, head over to Google Developer page by following this link.\nUnder Request parameters, enter people/me under resourceName.Under personFields enter metadata.Click on Execute.Login using your Google Account.Consent for API accessThe 21-digit ID corresponding to id under application/json is your Google Account ID.\nGoogle ID : 21 digit idCaveat!Factory Reset Protection won’t work if the device wipe is authorized (for example,if you perform a device wipe from Settings \u0026gt; Factory data reset). In such cases you may be able to skip Google Account verification during the set-up process.This behavior is expected. When you do a factory reset on the device through the Settings menu or you wipe the device from Intune in the Microsoft Endpoint Manager admin center, all your data is removed. This includes the Factory Reset Protection (FRP) data.\nSolutionThe only way to do a factory reset on the device without losing the FRP data is through Recovery Mode. It is recommended that you set the Factory reset value to Block to prevent users from using the factory reset option in the device settings.\nThen, use one of the following methods when you reset the device to the factory settings:\nReset the device through Recovery mode.Wipe the device from Intune when the device is in your possession and is expected to be reset for further use.FRP protection promptRecovering Google FRP locked devices using KMEIf you are using Samsung Knox devices and you are in a situation where you are unable to sign-in with the FRP Google account, then you can use the below steps to recover such locked devices:\nKME can only be used for Google FRP removal on devices utilizing Knox version 2.7.1 or above.Ensure the device is assigned a KME profile with the following options properly set:\nVerify Skip Setup Wizard is enabled for the profile. This setting is enabled by default for DO KME profiles, but must be manually enabled for DA KME profiles.Ensure the user is not allowed to cancel enrollment (the Allow end user to cancel enrollment checkbox is unselected). This setting is disabled by default for DO KME profiles, but must be manually disabled for DA KME profiles.Once the device is assigned a profile with the above settings, perform a hard factory reset using a combination of external button actions.After the device powers on, connect to the network. You will be prompted for a reboot.Perform the reboot. The enrollment will proceed without prompting for Google account login credentials.Wrapping Up!Disabling FRP is easy. Most phones will do it automatically when you reset the data through the phone's settings. If your phone is a corporate phone with an additional layer of security then you'll need to disable that manually first!\nIf you try to reset a phone through the bootloader, FRP will kick in too, and it can't be set back up without the previous account's password.\nFactory Reset Protection (FRP) is an essential security method designed to ensure that someone can't just wipe and factory reset your corporate devices if they are lost or stolen. As such, which ever MDM solution you are using, you should always enforce this setting.\n","externalUrl":null,"permalink":"/posts/factory-reset-protection/","section":"Posts","summary":"A security feature called Factory Reset Protection (FRP) makes sure that if your phone is lost or stolen, it cannot be quickly reset by someone else.","title":"Factory Reset Protection: Secure your hardware","type":"posts"},{"content":" The foundation for configuring any services in the cloud is a “Tenant.” This post will help you plan/set up Intune as your Mobile Device Management solution. Following these steps, you will sign up for Intune tenant and add a domain, followed by adding test users.\nSign up or sign in to Microsoft Intune If you don’t have an Intune portal yet, you can sign in for a trial period – it allows you to evaluate Intune for 30 days.\nOpen Intune Sign-up page and follow the steps as shown below:\nThat’s all for today. In the next post, I will walk you through managing iOS/iPadOS devices, in which I will explain all about D-U-N-S, ABM, DEP(ADE), APNs \u0026 VPP. Managing Apple Devices will be a long series…so stay (In)tuned. Happy Learning 👩‍💻\n","externalUrl":null,"permalink":"/posts/fire-up-the-tenant-2/","section":"Posts","summary":"The foundation for configuring any services in the cloud is a “Tenant.","title":"Fire Up The Tenant!","type":"posts"},{"content":"Feeling overwhelmed by the sheer number of iPhones, iPads, and Macs under your wing? Juggling configurations, security, and user needs can quickly turn into a tech juggling act.\nMDM can feel like a black box at times, offering hidden magic without revealing its secrets. This blog post is your decoder, unlocking the mysteries of MDM and empowering you to leverage its full potential. Whether you’re a seasoned pro or just starting your MDM journey, we’ll delve into the core functionalities with deep dive into MDM logs.\nSo, buckle up! Together, let’s unleash the true power of MDM and transform your device management experience. Let’s get started!\nHow MDM Work for Apple DevicesThe four stages of enrolment into MDM are:\nService discovery:\u0026nbsp;The device identifies itself to the MDM solution.Enrolment:\u0026nbsp;The user provides credentials to an identity provider (IdP) for authorisation to enrol in the MDM solution.Session token:\u0026nbsp;A session token is issued to the device to allow ongoing authentication.MDM enrolment:\u0026nbsp;The enrolment profile is sent to the device with payloads configured by the MDM administrator.Let’s break it down further into basic blocks:\nEnrolling the DeviceFirst, the device has to enroll with an MDM solution, which installs an enrollment profile that links the device to the MDM solution.\nLog details:\nInstalling an Enrollment ProfileThe device downloads the enrollment profile during the enrollment process. In some cases the download is automatic, and in other cases an MDM administrator or the user downloads the profile to install it.\nNotifying the DeviceThe MDM server queues up a command for the device and sends a notification to the device through the Apple Push Notification service (APNs).\nContacting the ServerThe device receives the notification and contacts the MDM server.\nDelivering ContentAfter it’s connected to the MDM server, the device downloads — and acts on — the queued command. When your MDM solution wants to install an app, it sends a push notification to the device. The device checks in and processes an\u0026nbsp;InstallApplication\u0026nbsp;command and then fetches the actual app file.\nDeclarative Device ManagementMicrosoft Intune defines the declaration and sends them to the devices to asynchronously update the device settings, restrictions, assets, and more. With status channels, devices proactively report the status of objects like passcode compliance and MDM-installed apps — without constant polling from the MDM server.\nThe MDM server subscribes to a device’s status item, and updates to the device’s information for this specific item are then incrementally reported back to the server.\nMaster the Magic: The Power of LogsWe’ve explored the enrollment process and glimpsed the backend, but trust me,\u0026nbsp;this is just the beginning. Those MDM logs aren’t just technical mumbo jumbo – they’re a treasure trove of insights waiting to be explored. Think of them as your X-ray vision into the health and activity of your Mac fleet, offering the power to:\nTackle compliance like a detective:\u0026nbsp;Identify devices violating policies – apps not installed,\u0026nbsp;configurations out of sync – before they become security risks.\u0026nbsp;Drill down into specific logs to pinpoint the root cause and ensure everyone stays within the lines.Become an app installation guru:\u0026nbsp;Diagnose app installation failures.\u0026nbsp;No more wondering why that critical company app isn’t showing up on everyone’s Macs.\u0026nbsp;Logs reveal permission issues,\u0026nbsp;network hiccups,\u0026nbsp;or even user errors,\u0026nbsp;empowering you to resolve issues swiftly.Unravel the mysteries of script execution:\u0026nbsp;Did that automation script go rogue? Explore the logs to troubleshoot like a pro and ensure your scripts run smoothly every time.Forget relying on guesswork or waiting for problems to surface. By understanding and analyzing your MDM logs, you transform from a reactive admin to a proactive master of your Apple ecosystem. You’ll anticipate issues, address them before they impact users, and optimize your MDM setup for maximum efficiency and security.\nConclusionRemember, this is just the tip of the iceberg. We’ve cracked the surface of MDM logs, but there’s still a world of valuable insights waiting to be discovered. In the next installment of this series, we’ll embark on a deep dive into the fascinating realm of\u0026nbsp;Platform Single Sign-On (SSO) logs. We’ll unravel their secrets, learn how to decode them, and equip you with the skills to troubleshoot even the most complex SSO scenarios. So, stay tuned and get ready to unleash the full power of your MDM solution for seamless and secure device management!\n","externalUrl":null,"permalink":"/posts/from-newbie-to-pro-enrollment-logs-for-apple-devices/","section":"Posts","summary":"Feeling overwhelmed by the sheer number of iPhones, iPads, and Macs under your wing?","title":"From Newbie to Pro: Enrollment \u0026 Logs for Apple Devices","type":"posts"},{"content":"Welcome to part-2 of the AIO guide for managing the Apple platform with Microsoft Intune.\nPart 1: Apple Platform Deployment: An All-In-One guide to managing Apple devices with Microsoft Intune (intuneirl.com)\nMDM lets you manage devices securely and wirelessly, even if you don't own them. This means you can set up profiles and commands for the device so that you or your organization can get the most out of it. Mobile Device Management (MDM) is a system that helps you manage your mobile devices. iOS, iPadOS, macOS, and tvOS have built-in MDM support. This MDM framework and protocols allow you to control software updates and device settings, monitor compliance, and even remotely wipe or lock down the devices to ensure that devices are following your organisation's policies. Devices can be enrolled in Intune automatically, or users can enrol themselves.\nHow is a device enrolled?To use the device with an MDM solution, the mobile device management solution first needs to enrol/register the device with it. This sets up a profile that links the device to the MDM solution. User enrollment allows users to enrol their own devices (personal devices), whereas Apple's automated device enrollment allows the corporate-owned devices can be enrolled automatically enrolled in MDM.\nDevice communication using APNsDuring this process, the profile is downloaded and installed on the device. In the case of ADE, it is automatically installed, and for BYOD, the user downloads the profile to install it.\nThe MDM solution uses the Apple Push Notification service (APN) to communicate with the device. These APNs maintain persistent communication with devices across both public and private networks. Device communication using APNs\nThe device checks in with the MDM server to see if any new commands or updates are waiting for it. Suppose there are; the device downloads and processes the commands. The MDM solution can then send push notifications to the device to install new apps. Declarative device management (DDM) is a new way of managing devices using the MDM protocol. Declarations are payloads representing policies the MDM server defines and sends to devices. There are four types of declarations: configurations, assets, activations, and management.\n💡We'll go into more detail on DDM in a different post.Declarative device management automatically updates the server with new data from the device.\nDevice enrolment typesMDM solutions allow companies to enroll devices into their systems in three ways:\nEnrollment typesUser enrolmentUser Enrollment is intended for BYOD, in which the user owns the device rather than the organization. The four steps in enrolling these devices are:\nService discovery: The device identifies itself to the MDM solution and provides the necessary information to allow the MDM solution to manage the device. In addition, the MDM solution can use the device's information to manage the device's security, user data, and settings.User enrolment: An identity provider receives the user's credentials and authorizes enrollment permission in the MDM system. The MDM system can then use the credentials to access the user's device and manage the user's settings.Session token: A session token is given to the device to continue to be authenticated. This token keeps track of the device's authenticated state so that subsequent requests can be handled correctly.MDM enrolment: The MDM administrator sends payloads to the device that will be used to enrol the device. These payloads will help the device to register with the MDM server properly, and will provide the necessary information for the MDM server to manage the device.Managed Apple IDs are required for user enrollment. Employees can access specific Apple services through their employer's owned and operated Apple services. When a user removes an enrolment profile, all of the user's configuration profiles and associated settings are deleted. All managed apps that were based on that enrollment profile are also deleted.\nTo enrol a personal device in User Enrolment, users can create an account or use an enrolment profile.\nSeparation of user and business dataDevice EnrolmentOrganizations can use device enrollment to allow users to enrol devices into Microsoft Intune manually. From there, they can manage several features of the device. When a user removes an enrolment profile, all configuration profiles, their settings and Managed Apps based on that enrolment profile are removed with it.\nAutomated Device Enrolment (ADE)ADE is designed for devices that are owned \u0026amp; managed by the organisation. This system makes it easy for devices to be registered and tracked so that they can be used by the organisation effectively. With Automated Device Enrolment, organisations can configure and manage devices from the moment they are taken out of the box. This saves time and hassle, making it easier to get devices up and running.\nThe user can remove the MDM enrollment profile, but this can be restricted so that the device remains as supervised. With Auto Advance enabled in MDM, organisations can automatically order new Mac computers and deliver them to their office with just a quick plug-in to an Ethernet port and some power. To use auto-advance enrollment, make sure that you meet all the below requirements:\nThe MacBook's serial number is in ABM.It must have Automated Device Enrolment settings configured in Intune.It should be plugged into a power source.Active Ethernet connection.The device should be able to access Intune services internally or over the internet.SummaryWe've covered a lot of information today, so let's take a moment to recap. I hope you've found this information helpful. In the next section, we'll move on to more complex topics. First, we discussed how the devices are enrolled. Then, we looked at MDM communication with devices with a quick view of DDM. Finally, we discussed different types of enrollment, and you can take advantage of them. Now that we've covered all the basics, let's move on to more complex topics. In the next section, we'll discuss Apple Business Manager, Apple School Manager \u0026amp; Apple Business Essentials. ","externalUrl":null,"permalink":"/posts/getting-started-ade-mdm/","section":"Posts","summary":"Welcome to part-2 of the AIO guide for managing the Apple platform with Microsoft Intune.","title":"Getting Started - Apple Device Enrollment \u0026 MDM","type":"posts"},{"content":"In the ever-evolving world of cybersecurity, there's a constant tug-of-war between defenders and hackers. As experts work hard to secure systems, attackers are always on the lookout for a weak spot. But what happens when the line blurs? Interestingly, I stumbled upon a situation where Windows Defender, Microsoft's own security tool, seemed to be its own worst enemy.\nPrologue: Setting the Stage for a Security PuzzleTo provide context, I delved into a peculiar issue where several Windows devices sporadically showed as non-compliant due to the real-time protection appearing as deactivated. At first glance, it seemed like an isolated device problem. However, a deeper probe revealed a captivating turn of events: the Defender seemed to be sabotaging itself. In this account, I've structured the entire investigation as a series of unfolding scenes.\nAct I: Unraveling the Threads of Suspicious ActivityOur story starts with a chain of unassuming incidents, each softly suggesting a hidden irregularity. Diving into the security logs, these events hint at possible meddling with the core operations of Windows Defender.\nScene 1: Tamper Protection Disabled – A Breach in the Defense\nThe initial scene of this captivating drama reveals a seemingly benign occurrence, Event ID 1121, indicating the deactivation of Tamper Protection, an essential security feature to prevent unauthorized changes to security settings. What's strange is that the \"SecurityHealthService\" process, which usually just watches and reports on security, was behind this change. This isn't normal and raised more suspicion.\nTo determine what transpired, I began examining other actions taken by the SecurityHealthService process, such as initiating new tasks or altering system settings. As I delved deeper into this information, it became increasingly intriguing to uncover what went wrong, who or what caused the security feature to deactivate, and whether there were additional security concerns to address.\nScene 2: Real-time Monitoring Under Siege – A Compromised Watchtower\nEvent ID 1116 unveils a troubling change to the \"DisableRealtimeMonitoring\" registry value. Surprisingly, the responsible party is MsSense.exe, a trusted Windows Defender process, which appears to be acting contrary to its usual function.\nThis registry value controls whether real-time monitoring is enabled or disabled for Windows Defender. The event details mention that the \"MsSense.exe\" process modified the \"DisableRealtimeMonitoring\" registry value. This is concerning because MsSense.exe is a Windows Defender process, but it should not be modifying registry values related to real-time monitoring. This could be a sign of malware hijacking the MsSense.exe process or a misconfiguration issue in policy. To further investigate this event, I proceeded with checking for other events related to the MsSense.exe process, such as process creation or other registry modifications and surprisingly the device timeline was filled with these events!\nScene 3: Registry Tampering – A Veiled Manipulation\nThe concluding chapter of this puzzling saga reveals Event ID 1, a general yet foreboding sign of registry alteration. The exact registry value being modified is again related to Windows Defender's security protocols. The well-known entity of mssense.exe, once again a trusted process, emerges once more as the mastermind behind this secretive adjustment.\nPiecing Together the Puzzle – A Quest for Understanding\nWithin our unfolding narrative, the self-removal of the Real-time Protection service by Windows Defender is a startling twist. This unusual event points to two possibilities: the system may have fallen prey to malicious software manipulating Windows Defender, or there's a critical flaw within the security software.\nWithout the shield of real-time protection, the system stands exposed to various digital menaces, from viruses to ransomware. Without this safeguard, malicious entities can easily slip past defenses, threatening the system's data and overall well-being.\nIt's alarming to see a genuine Windows Defender process, TiWorker.exe, removing a file seemingly connected to securityhealthhost.exe, another Windows Defender component. This could indicate malware manipulating the TiWorker.exe process to erase security-related files, or it might be a system misconfiguration.\nDiving further sheds more light on the intricate process tree from Process Hacker, honing in on the MsMpEng.exe process and its descendants. Amidst the puzzling series of events, the provided screenshot further brings to light intriguing activity from Microsoft Defender. As per the details:\nservices.exe and svchost.exe: Both these processes, foundational elements of the Windows operating system, were seen operating as expected. Their typical roles involve managing various services and hosting multiple Windows services, respectively. Notably, no suspicious activity was detected for these two processes.TiWorker.exe: Things take an unexpected turn with this process. TiWorker.exe, typically involved with Windows updates, had been invoked with a specific command. Its interaction or possible deletion of files associated with security health services raises eyebrows. Specifically, a file tied to security health services seems to have been targeted, as evidenced by the path suggesting a link with securityhealthservice.exe.The Search Continues:It's really odd what's happening with Microsoft Defender. This program, built to keep our computers safe, is acting out of character. Instead of guarding our computer, Defender is, in a way, shooting itself in the foot by messing with its own important security parts. Imagine if a security guard, instead of watching the entrance, started locking people inside. That's how weird this is! Now, the big question is: \"Why is this happening?\", \"Is Defender attacking itself?.\nWe don't have all the answers yet, but the good news is that Defender Product team is aware of this situation. They've got their best folks trying to understand the reason behind Defender's strange actions. As they work on this mystery, I am eager to hear their findings and what steps might be taken next and I will keep you posted!\n","externalUrl":null,"permalink":"/posts/guardians-unexpected-defiance-when-defender-goes-astray/","section":"Posts","summary":"In the ever-evolving world of cybersecurity, there's a constant tug-of-war between defenders and hackers.","title":"Guardian's Unexpected Defiance: When Defender Goes Astray","type":"posts"},{"content":" iOS 16 is two weeks old, and iPad OS 16 is expected to be released in the next few weeks. There are so many new MDM functionality coming to the new iOS many of them are pretty cool features. They will change the way for iOS device management.\nI will walk you through some of these new features in this blog post with a few demos.\nSign in with Apple at Work \u0026amp; School Sign-in with Apple is a new thing that allows a fast and easy way for users to sign in to apps with their Apple ID. Users can create an account within the app with a simple tap.\nApple has now extended the capabilities of \u0026#8220;Sign-in with Apple ID\u0026#8221; to support Managed Apple IDs, i.e., it allows the same benefits for a fast and easy sign-in experience with Managed Apple ID.\nFor example, the user just downloaded JIRA to his iPhone and has the following sign-in options.\nTo use Sign in with Apple, the user can tap Continue with Apple and will see the welcome screen for Sign in with Apple.\nNow, with the new settings, users will see the welcome screen for Sign in with Apple at Work \u0026amp; School if they use a Managed Apple ID.\nYou can notice a difference in the welcome screen.\u0026nbsp;\nGenerally, when the users use their Apple ID with Sign in with Apple, they see the account creation screen where they may edit their name and choose whether to share or hide their email.\nBut now, with this new feature, the organizational context will be used, which forces the app to understand that the user is logging in with corporate (managed applied id), and accordingly level of access will change.\nSo this is an example, the app will provide access control using the name and email shared with their app when using Sign in with Apple at Work \u0026amp; School. It also means that when a user uses Sign in with Apple at Work \u0026amp; School, the name and email fields will always be accessible.\nSupport for OAuth Both iOS 16 and iPadOS 16 have added support for OAuth 2.0. This allows MDM solutions to implement solutions that support OAuth for user authentication. Enrollment SSO will also work with any SSO technology, including OAuth 2.0.\u0026nbsp;\nCorp v/s Personal Data Separation When users sign in with their Managed Apple ID on iOS/iPad OS 16 or higher devices, the Calendar and Reminder apps will create a second database containing all of the events and metadata for the organization’s calendars. This will allow full data separation for devices enrolled with User Enrollment to secure organizational data.\u0026nbsp;\nNew Software Update Features With the new OS, Apple has introduced a new mechanism to ship security fixes to users more frequently.\u0026nbsp;\nIf we want to configure it manually, then a new priority key can be passed when sending the OS update. Sending this command with a “High” priority key will be similar to a user-initiated update. This is only supported for minor OS updates.\u0026nbsp;\nThis new mechanism is called\u0026nbsp;Rapid Security Response.\nRapid Security Responses don’t adhere to the managed software update delay; however, because they apply only to the latest minor operating system version if that minor operating system update is delayed, the response is also effectively delayed.\u0026nbsp;\nApple Configurator for iPhone This is the best feature of iOS 16.\u0026nbsp;\nIn iOS 16 or iPadOS 16, Administrators, Site Managers (Apple School Manager only), and Device Enrollment Managers can add iPhone and iPad devices to their Apple School Manager, Apple Business Manager, or Apple Business Essentials organization with Apple Configurator for iPhone. To do so, the Setup Assistant must be at the Choose a Wi-Fi Network pane. This can be very useful for users at remote locations where an organization cannot ship hardware.\nThe process is super simple:\nIdentity management\u0026nbsp; Apple Business Manager now supports the federation of Managed Apple IDs with Google Workspace. “Apple Business Manager and Apple School Manager will also support the ability to configure an “allow list” of apps that Managed Apple IDs can be used to sign in to.\u0026nbsp;\nEnrollment Single Sign-On\u0026nbsp; Enrollment SSO is designed to make the User Enrollment flow faster and easier by reducing the number of sign-ins required during enrollment into MDM. This is accomplished by installing an identity app, then using it to handle repeated authentication during—and after—the enrollment process.\u0026nbsp;\nOnce the user verifies with managed apple id, the enrollment will be complete.\nManaged Device Attestation\u0026nbsp; Managed Device Attestation uses the\u0026nbsp;Secure Enclave\u0026nbsp;and cryptographic attestations to secure communications by managed devices when connecting to services such as MDM, VPN, and 802.1X.\u0026nbsp;\nThe MDM server issues a device information query for device information attestation and specifies some new keys. The device obtains an attestation from Apple’s servers and returns it to the MDM server. Then the MDM server evaluates the attestation.\nDefault Domains \u0026amp; Remote Authentication Save your users time by using the ManagedAppleIDDefaultDomains key so users will see a suggestion quickly to authenticate. After entering the user name portion of a Managed Apple ID, users can select their account’s domain from a list on the QuickType keyboard.\nAnd, with the new iPadOS 16, the shared iPad will, by default, use the local passcode for existing users on the device, requiring no network connection. Managing Network Traffic\u0026nbsp; With the new OS, Apple has also expanded DNS Proxy and Web Content Filter profiles to BYOD devices, which is quite similar to per-app VPN. These profiles can only be installed via MDM. All existing apps that require DNS Proxies or Web Content Filters will still work. However, you cannot mix system-wide and per-app proxies.\nThere are many more interesting features in the new Apple Operating System, but it won\u0026#8217;t be possible to cover them all in this post. There will be a few more posts covering these features in much more detail. Till then, be\u0026nbsp;#mempowered\u0026nbsp;\u0026amp; enjoy\u0026nbsp;#membeer. Stay In(tuned).\n","externalUrl":null,"permalink":"/posts/hands-on-with-ios-16-the-best-features-for-enterprises-2/","section":"Posts","summary":"iOS 16 is two weeks old, and iPad OS 16 is expected to be released in the next few weeks.","title":"Hands-On With iOS 16 - The Best Features For Enterprises","type":"posts"},{"content":" Integrating a Mobile Threat Defense solution with Intune will help you protect corporate data and mobile devices against any network attack or malware attacks and can alert MDM admins if a device is compromised or tampered with. In this blog, we will discuss setting up an MTD connector and will use MVISION as the MTD product.\nMcAfee MVISION Mobile detects malicious activity and can take actions locally on the device. When MVISION Mobile is integrated with an Intune, protection actions are performed by the MDM, providing a potent protection tool. When MVISION Mobile is integrated with MAM, the risk posture is identified as mobile threats are detected when the app is launched. We can configure MVISION Mobile Console with Microsoft Intune in three different modes: MDM onlyMAM onlyMDM and MAM Pre-requisites: There are typically no prerequisites for integrating MVISION with MEM, as all the communications between MEM \u0026 MTD will be over the internet. However, specific requirements exist for the minimum supported iOS \u0026 Android devices.\nAndroid Version – v6.0 or higher iOS Version – v10.0 or higherMVISION Mobile App for Android – v4.12 or higherFor MDM with MAM – v4.17 or higherPermission/Access – Initially GA \u0026 then minimum Intune Administrator or equivalent Configure the MTD Connector Perform the below steps to set up the MTD Connection:\n1. Log in to the Microsoft Endpoint Manager console.\n2. Navigate to Tenant Administration \u003e Connectors and tokens \u003e Mobile Threat Defense \u003e Add\n3. Click McAfee MVISION Mobile as the MTD Connector.\n4. Click Create.\n5. The connector is added in Intune but is not acting as a few more configurations are still required.\n6. Open a new tab and log in to the MVISION Mobile Console. 7. Navigate to Manage \u003e Integrations \u003e MDM. 8. Click Add MDM and select Microsoft Endpoint Manager.\n9. The next step is to add the ‘MVISION Console,’ ‘MVISION Mobile iOS,’ and the ‘MVISION Mobile Android applications to the Azure Active Directory to enable this integration. When you click Add to Azure Active Directory button, Microsoft sign-in window opens, wherein you have to authenticate yourself.\nRepeat the step for all three options. 10. Click the Next button, type a unique name in the MDM Name field for the environment in the Add MDM tab, field for the environment in the Add MDM and then click Next.\n11. The integration window will close, and Intune is added as MDM in MVISION. 12. Back to the MEM portal, navigate Tenant Administration \u003e Connectors and tokens \u003e Mobile Threat Defense. You will see McAfee MVISION Mobile showing as an active connector. Click on the connector and move the Connect Android and iOS Devices sliders to On.\nWith these steps, MVISION is integrated with Intune as a Mobile Threat Defense solution, but still, there are a couple more settings you have to configure before it starts protecting your devices. Add the MVISION app to Intune To deploy the MVISION Mobile application on your corporate-owned devices, it is recommended that you push the app directly from the App Store for the iOS version and the Google Play Store for the Android version and deploy it to your devices with install intent as “Required.”\nConfigure Auto-Activation of the MVISION App Since you are deploying the app through Intune and the connector is also integrated, it helps with the auto-activation of the app on the end user’s devices. The steps for activation of the app on iOS and Android Enterprise devices are provided below. 1. Navigate to Apps \u003e App configuration policies and Click on + Add. 2. From the dropdown, select “Managed Devices.”\n3. Provide the name and description and select iOS as the platform. 4. Search \u0026 select the MVISION app and press Next.\n5. Choose Use Configuration designer and set up the configuration keys as shown below:\nTenant ID: This will be the tenant id of your MVISION subscription.Default Channel: The value for the default channel will also be available in the MVISION tenant. 6. In Assignments, select the groups you want to apply to this configuration. 7. Repeat the same steps for creating an App Configuration Policy for managed Android devices as shown below:\n– Select the app from the app library\n– Give permissions on external \u0026 internal storage\n– Configure the app configurations for auto-activation\n– Assign the policy to device group. Configure Device Compliance Policy With all these configurations done, it’s time to configure compliance policies to evaluate devices based on configured threat levels. Microsoft Endpoint Manager takes actions based on the Device Threat Level configured in the compliance policies. The device threat levels that can be configured are Secured, Low, Medium, and High. As an Intune admin, you must configure the minimally acceptable device threat level in the compliance policy. These levels correspond to the McAfee MVISION Mobile severity levels as shown below:\n(As per McAfee, the minimum configured threat level should be Medium)\nThe MVISION app continuously collects file system, network stack, device, and application data on a real-time basis from the device. It sends the forensic data to the MVISION Mobile cloud to evaluate the device’s risk based on the threat level configured. You can configure conditional access policies to protect corporate data based on the device health attestation. For non-managed devices, you can configure app protection policies to perform selective wipes based on detected threats or block the device from accessing the corporate resources until it is marked as compliant. Create the compliance policy – Android Enterprise:\n1. Sign in to the Intune Portal.\n2. Select Devices \u003e Compliance policies \u003e Policies \u003e Create Policy.\n3. Select Android Enterprise – Fully Managed, dedicated, corporate-owned work profile from the dropdown menu and click Create.\n4. On the Basics tab, specify a Name and description for the policy.\n5. In the Compliance settings tab, expand the dropdown for Device Health and configure settings for Require the device to be at or under the Device Threat Level as shown below:\n6. Select “Check basic integrity \u0026 certified devices” for SafetyNet device attestation under Google Play protect.\n7. Provide value for the Minimum OS version allowed by your organization. PS – When a device doesn’t meet the minimum OS version requirement, it’s reported as non-compliant. 8. Configure options under System Security. 9. Set Intune app runtime integrity as “Required” and click Next.\n10. In the Actions for noncompliance tab, you can configure multiple actions to apply automatically to devices that don’t meet this compliance policy. 11. Click Next to choose scope tags and assign the policy to your groups.\nCreate the compliance policy – iOS Devices:\n1. Sign in to the Intune Portal.\n2. Select Devices \u003e Compliance policies \u003e Policies \u003e Create Policy.\n3. Select iOS devices from the dropdown menu and click Create.\n4. On the Basics tab, specify a Name and description for the policy.\n5. In the Compliance settings tab, configure the below settings:\nManaged email – Configure if you want to configure the iOS native mail client.Jailbroken devices – Block Device Threat Level – Medium or HighDevice Properties – Configure Min/Max iOS/iPadOSSystem Security – Configure device passcode policies 6. In the Actions for noncompliance tab, you can configure multiple actions to apply automatically to devices that don’t meet this compliance policy. 7. Click Next to choose scope tags and assign the policy to your groups.\nConfigure Groups in MVISION to sync policies\nAs the last part of this configuration, you have to add groups in the MVISION console to sync the policies.\n1. log in to MVISION Mobile Console.\n2. Navigate to the Manage page and select the Integrations tab. 3. Click on Edit and Add MDM Step 3 Setup window opens. Click Next.\n4. In the group filter, you can specify either the full name or group initials of the groups to which the MVISION App Configuration Policies were assigned and click Next. 5. Click the green plus icon to synchronize from the MDM Groups shown on the left.\nOnce you select a group will appear in the Selected MVISION Mobile Console Groups on\nthe right-hand side. 6. Click Next.\n7. Specify the MDM alerts if you want to be notified when there are MDM sync errors and click SYNC Now.\nAnd…your MTD connector is Up \u0026 Running to protect your devices and corporate data in real-time. End User Experience iOS Devices(supervised devices)\n– Activation Tasks are in sequential order (from left to right)\nAndroid Enterprise Devices (Corporate-Owned)\n","externalUrl":null,"permalink":"/posts/integrate-mtd-with-intune-2/","section":"Posts","summary":"Integrating a Mobile Threat Defense solution with Intune will help you protect corporate data and mobile devices against any network attack or malware attacks and can alert MDM admins if a device is compromised or tampered with.","title":"Integrate MTD With Intune","type":"posts"},{"content":"As the number of devices organisations control grows, keeping track of accurate inventory data becomes increasingly difficult. This can lead to inefficiencies and outdated information. You can use ServiceNow for end-to-end management of your devices, along with keeping your Configuration Management Database (CMDB) accurate by synchronizing data from Intune to ServiceNow. This way, you can ensure that all the information in your CMDB is accurate and up-to-date. When you sync data from Microsoft Intune, you can see more detail about the computers, mobile devices, and software programs running on them. This makes managing the entire device life cycle easy, from purchase to disposal.\nOverviewYou can integrate Microsoft Intune with ServiceNow using the Service Graph connector, but this connector is available as a paid add-on. With this post, I will show you how to set up your own dev instance for ServiceNow and integrate it with Microsoft Intune using Graph APIs - without paying a single buck! I will also show you how to configure the newly released feature of Intune Suite -\"ServiceNow connector.\"\nServiceNow Personal Developer InstanceServiceNow is a popular ITSM tool that automates various business processes. It is the most widely used among businesses and is often used to automate the management of IT services.\nServiceNow offers free, full-featured Personal Developer instances (PDIs) to registered users who want to develop applications on the ServiceNow platform or improve their skills with ServiceNow. Registered users can access PDIs through the online portal or through the ServiceNow application programming interface (API). The steps are as below:\nNavigate to https://developer.servicenow.com/ and select Sign Up \u0026amp; Start Building.Complete the Registration Form.Sign up for the instanceSign in to your email to verify your account.Verify your accountOnce registered, log in to https://developer.servicenow.com/ and select Request an Instance.Choose the latest release availableThe instance provisioning will take a few minutes, and once it is configured, you will receive a notification as shown below:Instance provisionedYou will also receive the login details of the PDI on the registered email address.Congratulations! Your Personal Developer Instance (PDI) has now been activated. There are still a few configuration steps before it can be used with Intune. The default role assigned to you on your PDI is App Engine Studio Creator and it needs to be elevated before we proceed further. Change the role to admin, log out and log in again with admin user.Elevate the user role from aes.creator to adminUpdate user roleCreate an Azure AD ApplicationSign in to the Azure portal.Search for and select Azure Active Directory.Select App registrations, then select New registration.Name the application, for example, \"ServiceNow-UAT\".Select a supported account type, which determines who can use the application.Select Register and note down the application ID.Add the following API permissions.Minimum required permissions for SNThese are the minimum required permissions to set up the connection. Since, I am using it for complete device management, so I have added few more permissons.Create a secret for the app and note it, as we will use it later. ServiceNow ConfigurationConfigure OAuth2.0 Profile The first step after creating the app is setting up the ServiceNow connection using OAuth. The steps are as below:\nNavigate to System OAuth \u0026gt; Application Registry and click New.Select Connect to a third party OAuth providerSelect the option for third-party OAuth provider.Enter the details as shown below:Fill the required detailsClick on the Hamburger Menu and click save.On the “OAuth Entity Scopes” tab - insert a new role and enter https://graph.microsoft.com/.default for both name \u0026amp; OAuth fields and click Update.Configure Outbound REST messagesTo test whether your application registry works, we will generate a token using your registry. Navigate to System Web Services \u0026gt; REST Messages and create a new one. Click NewConfigure the connection as shown below:Go to the hamburger menu and click Save.To get an OAuth token, go to the \"related links\" section and click \"Get OAuth Token.\" Once the window pops up, click the \"OAuth token flow completed successfully\" button.Perfect! You are getting a response from Intune with the list of devices in your tenant.So, the next part is to create a data source and put all the data you are getting from Intune into tables.\nJSON responseNavigate to System Import Sets -\u0026gt; Data SourcesClick NewFill up the required fields, and for importing data, you should use a script to keep the data import scheduled and automated. However, for the demo, I have converted the JSON response from the previous step to a CSV and have imported it into the table. You can also test by loading test data by clicking \"Test Load 20 Records\".\nOnce the data is successfully loaded, you will receive a message like this.\nTransform the dataThe next step is to categorize your CIs in your CMDB.\nNavigate to System Import Sets -\u0026gt; Run Transform -\u0026gt; Administration -\u0026gt; Transform MapsProvide some relevant name, e.g. Intune_managed_devices.Point the source table to the staging table.Point target to cmdb_ci_computer.Go to the Hamburger menu and click Save.Click “Mapping Assist” to configure device mappings.Once done, click Save.Data will be loaded into the cmdb_ci_computer table.In production environments, this is automated \u0026amp; scheduled using scripts. Similarly, you can create transform maps for all the device platforms you manage in your Intune tenant.Create a ServiceNow Client appIn the developer instance, select All and navigate to System OAuth \u0026gt; Application Registry.Set up a new OAuth application.Complete the following OAuth client application details and select Save.The redirect URL with the new Intune admin center was not working for me.The redirect URL with the new Intune admin center was not working for me. If it's the same for you, then use https://endpoint.microsoft.com/TokenAuthorize/ExtensionName/Microsoft_Intune_DeviceSettingsThe configuration should look like this:\nSN App for connectorCreate a CORS ruleIn the developer instance, select All and navigate to System Web Services \u0026gt; Rest\u0026gt; CORS Rules.Create a new CORS rule. Configure CORS rules to allow cross-domain requests to REST APIs from a browser-based application in a different domain.Complete the following CORS rule details and select Save.CORS rule for domainThe ServiceNow connectorIntune and ServiceNow integration allows helpdesk agents to use Intune to diagnose endpoint-related issues. This integration makes it easy for helpdesk agents to work with ServiceNow to solve endpoint problems. With ServiceNow integration, helpdesk agents licensed to use Remote Help and who use ServiceNow can view incidents that involve tech issues to learn more about the problem and see the details of the issue. This makes it easier for helpdesk agents to help the employee facing the issue and resolve it as quickly as possible.\nThe Intune ServiceNow Connector Integration helps manage ServiceNow incidents and issues by providing a ticketing system, device inventory, MEM insights, and software licensing and reclamation tools.\nPrerequisites:The ServiceNow connector is currently in Public Preview and does not need any license. Once it is in GA, you will need an active Remote Help add-on license to use this feature.You must have the Global Admin role or Intune Admin role to configure the connector. To view the incidents, you must have at least Read permission. These permissions can be fine-grained using RBAC in Intune.You must have ServiceNow permissions to perform the \"Test connection\" action in Intune admin center. Configure the ServiceNow integration with Microsoft IntuneSign into Microsoft Intune admin center and go to Tenant Administration \u0026gt; Connectors and Tokens \u0026gt; ServiceNow connector.Use the toggle to turn on the \"Exchange data with the ServiceNow instance\".Toggle to switch on the connecterOnce the connector is switched-on, you must enter details for the following configuration properties. Select Test connection to verify if your settings are correct. You will see a verification message to connect to your ServiceNow account. Click Allow.The Connection Status field is updated and now displays Verified.Connection verified!With the ServiceNow connector verified and enabled, you can view a real-time list of ServiceNow incidents for a worker from the Troubleshooting pane. The incident view with details helps you understand if there are other issues previously submitted by employees that may be related or have recurred.\nSummaryThis capability benefits your helpdesk and support agents as they can view a real-time list of ServiceNow incidents for users.\nThank you for being with me on this article for configuring ServiceNow with Intune. I hope it was helpful and that you now have a better understanding of the technical process involved.\nCredits:Integrating Microsoft Intune with ServiceNow | (mavembry.info)ServiceNow integration with Intune adds value to Remote Help - Microsoft Community Hub","externalUrl":null,"permalink":"/posts/integrate-microsoft-intune-with-servicenow/","section":"Posts","summary":"As the number of devices organisations control grows, keeping track of accurate inventory data becomes increasingly difficult.","title":"Integrate ServiceNow with Microsoft Intune","type":"posts"},{"content":"With the burgeoning growth of remote work and digital environments, many organizations are relying heavily on cloud storage solutions like Microsoft OneDrive for Business and mobile device management (MDM) systems like Microsoft Intune. Adding to this, Adobe Acrobat Reader is a ubiquitous tool for managing PDF files, widely used in professional settings. This post will guide you through the process of integrating Adobe with OneDrive for Business on iOS/iPadOS devices that are enrolled in Intune.\nPrerequisites Before getting started, ensure that you have the following:\nAn active Office 365 subscription with OneDrive for Business.Microsoft Intune is set up for your organization.iOS devices enrolled in Intune.Adobe Acrobat Reader is installed on your iOS devices. Some Pre-Work Adobe Acrobat updated their application to include deeper integration with Microsoft including access to OneDrive for Business files. This integration allows users to access their OneDrive for Business files from the Acrobat app. The improvements have a few configuration changes which will require that Intune admins approve the Adobe Acrobat app to connect to the Intune service. This is a one-time approval that you may not have had to do historically when connecting Adobe Acrobat and OneDrive for Business.\nThere are two options for this one-time approval:\nUse the latest Adobe Acrobat iOS and enable the OneDrive feature: Then associate the product with your organization: Configurations Required In Intune Configure OneDrive for Business with Intune. You can add ODB as an app store or as a VPP app. I prefer using VPP apps with device-based licensing. Add Adobe Reader as a VPP app and deploy it to the required group. Configure the SSO profile to allow Adobe Reader for SSO Configure App Protection Policy to keep the personal \u0026amp; corporate data separated: Configurations Required at End User Side After the device enrollment and app distribution process is complete, the only action required from the user is to activate the \"Intune App Protection\" switch within the Adobe Reader application. To do this follow the below steps:\nLaunch the Adobe Reader app on the deviceNavigate to \"Preferences\"Toggle the \"Intune App Protection\" switch to ONFollow the prompts for App Protection Policy for setting app PIN. That's all needed!\nTime For Demo 0:00 /0:49 1× \u0026lt;/figure\u0026gt; Wrapping Up There you have it! Adobe Acrobat Reader is now linked with OneDrive for Business on your Intune-enrolled iOS devices. Users can now open, edit, and save PDFs directly to their OneDrive for Business, offering greater flexibility and along with protecting your corporate data.\n","externalUrl":null,"permalink":"/posts/enable-adobe-to-read-pdf-from-one-drive/","section":"Posts","summary":"With the burgeoning growth of remote work and digital environments, many organizations are relying heavily on cloud storage solutions like Microsoft OneDrive for Business and mobile device management (MDM) systems like Microsoft Intune.","title":"Integrating Adobe With OneDrive for Business on iOS/iPadOS Devices Enrolled in Intune","type":"posts"},{"content":"The world of iOS app distribution is experiencing a shakeup, particularly in the European Union (EU). With the recent changes in iOS 17.4, users in the EU now have the ability to download and install alternative app stores on their iPhones and iPads. These app stores operate independently of the official Apple App Store, offering users a potentially wider range of app choices.\nThis change stems from the EU's Digital Markets Act (DMA) regulations, aimed at fostering fairer competition in the digital market. The DMA specifically targets large gatekeepers like Apple, requiring them to open their platforms to alternative app stores and loosen their control over app distribution.\nWhile this change brings new possibilities for individual users, it raises significant concerns for organizations managing supervised iOS devices. Let's delve deeper into the potential risks and explore strategies to maintain control over your supervised device ecosystem.\nThe Looming Risks of Alternative App Stores on Supervised DevicesWhile the ability to explore alternative app stores might seem appealing to some users, it introduces several security and management challenges at enterprise level for managing supervised iOS devices. Here's why you should tread carefully:\n1. Compromised Security:Unvetted Apps:\u0026nbsp;Unlike the rigorously reviewed apps on the App Store, alternative stores might have\u0026nbsp;less stringent vetting processes. This increases the risk of malicious apps infiltrating your device ecosystem, potentially compromising sensitive data and disrupting functionality.Side-loading Vulnerabilities:\u0026nbsp;Supervised devices often restrict \"sideloading\" (installing apps from outside the App Store). Allowing alternative app stores potentially opens doors for bypassing these security measures, exposing devices to vulnerabilities and malware attacks.2. Loss of Management Control:Bypassing App Policies:\u0026nbsp;At enterprise level, you often implement whitelisting or blacklisting policies to control which apps can be installed on supervised devices. Allowing alternative app stores could render these policies ineffective, making it harder to enforce compliance and maintain control over the apps on your devices.Increased Management Complexity:\u0026nbsp;With multiple app sources, managing device security and app installations becomes more complex. Organizations might need to adjust their Mobile Device Management (MDM) strategies and potentially invest in additional tools to effectively monitor and manage apps from alternative stores.3. Compliance Concerns:Policy Violations:\u0026nbsp;Allowing access to alternative app stores could potentially\u0026nbsp;violate pre-existing policies and compliance requirements\u0026nbsp;within your enterprise, especially those related to data security and app management.Regulatory Risks:\u0026nbsp;Depending on your industry and regulations, allowing app installations from untrusted sources might pose additional compliance challenges regarding data security and user privacy.Strategies to Fortify Your Supervised Device EcosystemThe good news is that you have options to mitigate the risks associated with alternative app stores and maintain control over your supervised iOS devices. Here are some key strategies to consider:\n1. Leverage MDM Capabilities:App Whitelisting and Blacklisting:\u0026nbsp;Utilize your Mobile Device Management (MDM) solution to create comprehensive app whitelisting and blacklisting policies. This allows you to specify which apps are authorized for installation on your devices, effectively blocking unauthorized apps from both the App Store and alternative stores.App Distribution and Updates:\u0026nbsp;Consider leveraging your MDM solution for secure app distribution and updates. This allows you to distribute pre-approved apps from a trusted source and manage updates centrally, ensuring devices only run authorized and secure app versions.2. User Education and Awareness:Educate Users:\u0026nbsp;Inform your users about the potential risks associated with downloading and installing apps from untrusted sources, including alternative app stores. This helps them understand the importance of adhering to your organization's app policies and avoiding unauthorized app installations.Clear Communication:\u0026nbsp;Clearly communicate your organization's policies regarding app installations and the consequences of violating them. This reinforces the seriousness of the matter and encourages responsible device usage.3. Continuous Monitoring and Evaluation:Regular Monitoring:\u0026nbsp;Regularly monitor your supervised devices for unauthorized app installations using your MDM solution. This allows you to identify and address any potential security breaches promptly.Stay Informed:\u0026nbsp;Keep yourself informed about the evolving landscape of alternative app stores and any potential security vulnerabilities associated with them. This allows you to proactively adapt your security measures and stay ahead of emerging threats.4. Consider Alternative Approaches:App Distribution Alternatives:\u0026nbsp;Explore alternative app distribution methods like private app stores or direct app deployment through MDM. These options allow you to distribute pre-approved apps securely within your organization, maintaining control over the app ecosystem without relying on the App Store.Consult with Security Experts:\u0026nbsp;If you have complex compliance requirements or manage a large fleet of devices, consider consulting with security experts to develop a comprehensive strategy tailored to your specific needs and risk profile.Enforcing Restrictions Using IntuneWhile the ability to block installation of alternative marketplace apps will be soon shipped with Microsoft Intune. You can still achieve this using a custom configuration profile (.mobileconfig) file to test it out.\nSign in to the\u0026nbsp;Microsoft Intune admin center.Select\u0026nbsp;Devices\u0026nbsp;-\u0026gt;\u0026nbsp;iOS -\u0026gt; Configuration\u0026nbsp;-\u0026gt;New Policy -\u0026gt;\u0026nbsp;Create.Profile type -\u0026gt; Select\u0026nbsp;Custom -\u0026gt; Select\u0026nbsp;Create.In Basics, type the profile name \u0026amp; descriptionCustom configuration profile name -\u0026gt; Enter a name for the policyConfiguration profile file -\u0026gt; Browse to the configuration profile you created\u0026nbsp;You can use the below xml file to prevent installation of alternative marketplace apps from the web and prevents any installed alternative marketplace apps from installing apps. \u0026lt;?xml version=\"1.0\" encoding=\"UTF-8\"?\u0026gt; \u0026lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"\u0026gt; \u0026lt;plist version=\"1.0\"\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;PayloadContent\u0026lt;/key\u0026gt; \u0026lt;array\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;PayloadIdentifier\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;com.apple.applicationaccess.48963245-1DAE-8E53-0652-1AE00S0123Z01\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadType\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;com.apple.applicationaccess\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadUUID\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;30682134-6CEB-4B98-8950-6CC54F244C05\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadVersion\u0026lt;/key\u0026gt; \u0026lt;integer\u0026gt;1\u0026lt;/integer\u0026gt; \u0026lt;key\u0026gt;allowMarketplaceAppInstallation\u0026lt;/key\u0026gt; \u0026lt;false/\u0026gt; \u0026lt;key\u0026gt;ratingRegion\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;NL\u0026lt;/string\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/array\u0026gt; \u0026lt;key\u0026gt;PayloadDisplayName\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;DMA Restrictions\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadIdentifier\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;com.IRL.Alt Marketplace Restrictions\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadType\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;Configuration\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadUUID\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;89Z13C98-02Y6-2468-7J5K-6F69D2H087HG\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadVersion\u0026lt;/key\u0026gt; \u0026lt;integer\u0026gt;1\u0026lt;/integer\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/plist\u0026gt;Let's VerifyConclusionIn conclusion, the advent of iOS 17.4 and the introduction of alternative app stores represent a significant pivot in the landscape of app distribution for users in the European Union. While this move heralds a new era of choice and flexibility, it simultaneously underscores a vital need for vigilance and proactive management in safeguarding supervised iOS devices within organizational environments.\nThe path forward is one of cautious optimism, armed with the knowledge and tools to navigate the complexities of this new digital landscape.\n","externalUrl":null,"permalink":"/posts/alternative-app-stores-not-on-my-supervised-devices/","section":"Posts","summary":"The world of iOS app distribution is experiencing a shakeup, particularly in the European Union (EU).","title":"iOS Alternative App Stores? Not on My Supervised Devices!","type":"posts"},{"content":" Overview Apple provides a wide range of application distribution options, each of which serves a particular purpose. This guide will dive into the different distribution methods and when to use each, depending on your distribution needs.\nWhether you\u0026#8217;re an Intune administrator, creating apps for the App Store, or focusing on creating customized private apps for business or enterprise, this post will walk you through all your options for distributing iOS apps.\nIt all begins with an idea! Everything begins with a problem you want to solve. Once you figure it out and know what to build, you create an app, and it makes it into the hands of your end users, most often through the App Store.\nIt appears simple, and it is for many apps on the store. However, there are several ways to distribute an app. And it all depends on your customer. It all comes down to determining the best way to reach your target audience. Your customers could be members of the general public, businesses, or enterprise users. There are various ways to distribute your app depending on its intended audience.\nThere are four distribution methods that we\u0026#8217;re going to discuss in this post:\nAd hoc App Store In-house Custom apps Different types of distribution methods I\u0026#8217;ll explain all the approaches by using the distribution path of an app that started as a prototype, went through the App Store, was then adapted for a business, and was distributed privately in a few different ways.\nPersonal Team As the first step, you will download\u0026nbsp;Xcode and will log in with your Apple ID to build your prototype. But how would you get this prototype to run on your devices? Sign in to Xcode using your Apple ID and take advantage of the free Personal Team account that comes with it. This isn\u0026#8217;t a real distribution method because, with this approach, you can only deploy it to a limited number of devices, and the app will expire after a few days. Here\u0026#8217;s what Xcode looks like when logged in with a personal team. You create and run your app. Xcode installs it on your device, but for it to launch, you must trust your device\u0026#8217;s developer certificate.\nYou need to trust the developer certificate by going into settings, general, profiles, and device management.\nThe user has to manually trust the developer\u0026#8217;s certificate Personal team app distribution in a nutshell: Intended for students, teachers and getting started Apps will be deployed to devices you own Intended for a few apps and a few devices Certain capabilities are not available with free accounts (ex: CloudKit) Apps cannot be distributed on the App Store Features like CloudKit, Siri, or APNS aren\u0026#8217;t available, and there\u0026#8217;s no way you can publish your \u0026#8220;grocery\u0026#8221; app to the store with this program so let\u0026#8217;s move to the next distribution stage.\nAd-hoc Distribution Until now, you\u0026#8217;ve been mostly just testing the app in the simulator or on your device or your friend\u0026#8217;s devices and would also have got the feedback. So the next step is to sign-up for the \u0026#8220;Apple Developer Program\u0026#8221;. If you don\u0026#8217;t already have an account, you need to sign-up for one \u0026#8211; either as a company or an individual and once you\u0026#8217;re signed up, you\u0026#8217;re ready to start distributing the app.\nWhen you leverage ad hoc distribution, a limited number of users can install your app directly from their devices for testing. The process requires that you register their devices from the developer\u0026#8217;s website. However, you can register 100 devices per product family per year for development and testing.\nTo install an app on a device for a user, you need to know their device\u0026#8217;s identifier, which you can find either from the Finder sidebar or from Xcode. Once you have the identifier, you can register the device with the Apple Developer website. After registering the device, you can create a build and install it for the user. There are several different ways to do this, depending on the device and the app.\nRegistering a Device You can connect your device to your Mac or use Apple\u0026#8217;s configurator to install the app. You can also host the app and have it installed automatically over the air.\nThis is a manual way of achieving a limited distribution to a small group. This program is designed to let you deploy to registered devices for testing. It\u0026#8217;s not a long-term or scalable distribution solution, and the provisioning profiles used to sign these apps expire yearly, so eventually, the apps will stop working or need to be re-signed.\nAdd-hoc app distribution in a nutshell: Meant for testing apps on registered devices Short-term distribution solution Apps expire and will eventually stop working Device limits reset once per year App Store By now, your user base is growing, and you realize that ad-hoc distribution is not the right fit for you. So you decide to distribute your all-star grocery app to the Apple app store.\nThe App Store offers beta testing features that are easier to use and allow more users to participate. TestFlight makes it easy for developers and users to test apps, and installation and updates are simple. Beta builds last for three months; for a user, installing an app is a familiar and simple process. TestFlight also offers beta testing for users who are not developers through app review.\nBefore submitting an app to the App Store, ensure it meets review guidelines and is stable and ready for a broader audience. However, if you\u0026#8217;re only releasing the app to your App Store Connect team members, you don\u0026#8217;t need to review it. And TestFlight, which is only available to Apple Developer Program members, will help you test the app before submission.\nOnce you\u0026#8217;re satisfied with the stability of your build, the next step is submitting it to the App Store.\nThe users for your app can be both the general public and enterprises; anyone can sign up for the Apple Developer Program to distribute to the App Store. Apps are available to the general public based on the markets you choose to support, making them public stores or enterprise apps.\nPublic app store distribution in a nut-shell: Know and follow the App Store Review Guidelines Keep the app current Make sure the app is appropriate for the general public In-House Distribution So now your grocery app is on the Apple app store, a highly rated app. Things are progressing very fast, and you need to customize your app as a business app intended to be used privately and internally by an organization. There are two ways to distribute apps internally -\u0026gt; In-House and Custom Apps. Let\u0026#8217;s first discuss in-house distribution.\nIn-house distribution lets you control the entire distribution process and host the app yourself. It requires membership in the Apple Developer Enterprise Program. Still, there are strict eligibility requirements to get into that program, and it is meant for those cases that can\u0026#8217;t be solved by custom app distribution. Distribution is handled completely outside of the App Store by the organizations and is usually through MDM. There are a few important aspects of in-house distribution that you should be aware of:\nApps deployed through in-house distribution can only be accessed by your employees. Apps need to be signed with a distribution certificate owned by the organization, which needs to be protected. Distribution certificates expire every three years, and the provisioning profiles expire annually. There\u0026#8217;s no TestFlight access for enterprise accounts. In-House app distribution in a nutshell: Users must be employees Distribution certificates should be protected The certificate lifecycle needs to be managed DIY Beta Testing and Hosting Apps require periodic access to the internet Custom Apps Distributing business apps as custom app is a new way forward. Custom apps are designed for private distribution to organizations that manage apps on behalf of their employees. These can be apps you develop in-house for distribution to your employees, or they can be apps you develop and make available directly to specific businesses/customers that you designate (e.g. your grocery app).\nCustom apps are purchased using Apple Business Manager and deployed through MDM, e.g. Intune. The benefit of using custom apps is that you make a standard version of your apps available on the public App Store and, at the same time, can also design a tailored version of your app for specific customers that will be only available to them.\nCustom Apps apps don\u0026#8217;t expire, so you don\u0026#8217;t need to worry about distribution certificates being revoked or expiring. Additionally, Custom Apps makes it easier to work with third-party developers, as you can get and distribute an app without having access to the source code, and there\u0026#8217;s no need to re-sign binaries. Additionally, Custom Apps\u0026#8217; auto-update infrastructure makes sure your app is always up-to-date.\nHere are the high-level steps for creating custom apps: Step 1: Account setup\nAccept both the Apple Developer Program License Agreement and the Paid Application agreement. Provide tax and banking in App Store Connect Leverage roles in defining proper access for all team members Step 2: New App ID and App Record (developer.apple.com/account)\nStep 3: Upload a valid build\nUpload a build and attach it to the working version in App Store Connect Step 4: Beta test with TestFlight\nStep 5: List the app for sale as a Custom App\nMark it as private Provide the customer\u0026#8217;s DEP ID and organization name Step 6: Submit for review\nNote, once an app is submitted for review as either a custom app or a public app, you can't go back and change the audience from public to private for vice versa later on. Once the app is approved and available, your customer can purchase and distribute the app through Apple Business Manager.\nCustome apps distribution in a nutshell: The customer is required to have Apple Business Manager Apps have to support the countries they will be distributed in Redemption codes will not be made publicly available Reviewers need to access the full functionality of the app Once submitted, apps can not be moved between public and private availability Summary We\u0026#8217;ve covered the four distribution methods that you have to choose from:\nAd Hoc lets you distribute to a limited private audience for testing. The App Store lets you distribute apps to the general public. In-House and Custom App distribution let you distribute apps privately. The easiest way to decide which is right for you is to think about the audience for your app. A brief summary is shown below:\nDistribution Scenarios Wrapping it up! I hope this article provided you with more in-depth knowledge of iOS app distribution strategies and explained the advantages and disadvantages of each. Depending on your app\u0026#8217;s needs, one distribution method may be more optimal. If you enjoyed reading my post, please spread the word about them and follow my page.\nRef: https://developer.apple.com/\n","externalUrl":null,"permalink":"/posts/ios-app-distribution-from-private-apps-to-enterprise-apps/","section":"Posts","summary":"Overview Apple provides a wide range of application distribution options, each of which serves a particular purpose.","title":"iOS App Distribution – From Private Apps to Enterprise Apps","type":"posts"},{"content":" Overview The feature all Intune admins managing corporate macOS devices have been waiting for a long is out! It appeared on my test tenant, and I could not resist myself to test it out. Let me take you through all these brand-new features and help you configure the policies in Intune to manage macOS software updates for enrolled devices using Automated Device Enrollment (ADE).\nWhat\u0026#8217;s new With this new feature, you will now be able to configure the below update types will include:\nCritical updatesFirmware updatesConfiguration file updatesAll other updates (OS, built-in apps) In addition to scheduling when a device receives the updates, you’ll be able to manage the following features:\nDownload and Install: Download or install the update, depending on the current state.Download only: Download the software update without installing it.Install immediately: Download the software update and trigger the restart countdown notification.Notify only: Download the software update and notify the user through the App Store.Install later: Download the software update and install it at a later time.Not configured: No action was taken on the software update. Updates and Upgrades Apple operating systems use a version numbering scheme to distinguish major upgrades from minor updates. Unlike iOS/iPadOS/TV OS, macOS uses a simple integer (for example, macOS 11 and macOS 12) with a name like Big Sur and Monterey. Upgrades are released much less frequently than updates and can take a while to install because of their large size. In comparison, updates are more frequently released patches for the current operating system and help protect the device against vulnerabilities. Updates use a second and sometimes a third number to denote increments. For example,\u0026nbsp;iOS 15.1\u0026nbsp;is an update to\u0026nbsp;iOS 15.\nWith this new feature, Intune allows you to manage, download, install, or even defer macOS software upgrades and updates remotely.\nThe Magic Behind These Updates The MDM solution (Intune) uses the Apple Software Lookup service to be aware of available updates to push the update commands directly to the device. Earlier Approach:\nFirst, the MDM server gets a list of available updates from Apple, and when the policy is configured and applied correctly, the MDM will send the updated version to the device. Then the device goes to the Apple lookup server to verify if the update is eligible and begins downloading and installing it. New Approach:\nApple introduced a new workflow for both macOS \u0026amp; iOS by introducing a new command \u0026#8220;SofwtareUpdateModeIID\u0026#8221; key. This key returns the hardware model ID to Intune. The Apple lookup software service will look for the appropriate hardware ID match for macOS, allowing Intune to determine the applicable updates without using the old approach of the AvailabelOSUpdates command.Intune will then determine the update applicability by comparing the result from the DeviceInformation query to the deviceID returned in the same query. Once Intune knows which OS update applies to devices, the ScheduleOSUpdate command is used to push to update the macOS. Intune can trigger this command even during a software deferral window also. The five options available now for macOS have their own significance; let\u0026#8217;s understand the logic behind each of them:\nDownload and Install (Immediately) Thumb Rule: Avoid It! The InstallASAP command is the default mechanism for the ScheduleOSUpdate command, with a default for InstallAction to download the updates. It downloads the software update and triggers the restart countdown notification. This command may require a restart (if the InstallForceRestart option is used). This may result in data loss on the end user\u0026#8217;s device.\nDownload Only This command downloads the software update in the background without installing it on the device. It will not start the installation. All these requests are in json format. Below is the example of a device requesting an update and the response given back:\nRequest Update:\n\u0026lt;?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u0026lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"\u003e \u0026lt;plist version=\"1.0\"\u003e \u0026lt;dict\u003e \u0026lt;key\u003eCommand\u0026lt;/key\u003e \u0026lt;dict\u003e \u0026lt;key\u003eRequestType\u0026lt;/key\u003e \u0026lt;string\u003eScheduleOSUpdate\u0026lt;/string\u003e \u0026lt;key\u003eUpdates\u0026lt;/key\u003e \u0026lt;array\u003e \u0026lt;dict\u003e \u0026lt;key\u003eInstallAction\u0026lt;/key\u003e \u0026lt;string\u003eDownloadOnly\u0026lt;/string\u003e \u0026lt;key\u003eProductKey\u0026lt;/key\u003e \u0026lt;string\u003eiOSUpdate17A576\u0026lt;/string\u003e \u0026lt;key\u003eProductVersion\u0026lt;/key\u003e \u0026lt;string\u003e13.0\u0026lt;/string\u003e \u0026lt;/dict\u003e \u0026lt;/array\u003e \u0026lt;/dict\u003e \u0026lt;key\u003eCommandUUID\u0026lt;/key\u003e \u0026lt;string\u003e0001_ScheduleOSUpdate\u0026lt;/string\u003e \u0026lt;/dict\u003e \u0026lt;/plist\u003e Request Update: \u0026lt;?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u0026lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"\u003e \u0026lt;plist version=\"1.0\"\u003e \u0026lt;dict\u003e \u0026lt;key\u003eCommandUUID\u0026lt;/key\u003e \u0026lt;string\u003e0001_ScheduleOSUpdate\u0026lt;/string\u003e \u0026lt;key\u003eStatus\u0026lt;/key\u003e \u0026lt;string\u003eAcknowledged\u0026lt;/string\u003e \u0026lt;key\u003eUDID\u0026lt;/key\u003e \u0026lt;string\u003e00008020-000915083C80012E\u0026lt;/string\u003e \u0026lt;key\u003eUpdateResults\u0026lt;/key\u003e \u0026lt;array\u003e \u0026lt;dict\u003e \u0026lt;key\u003eInstallAction\u0026lt;/key\u003e \u0026lt;string\u003eDownloadOnly\u0026lt;/string\u003e \u0026lt;key\u003eProductKey\u0026lt;/key\u003e \u0026lt;string\u003eiOSUpdate17A576\u0026lt;/string\u003e \u0026lt;key\u003eStatus\u0026lt;/key\u003e \u0026lt;string\u003eDownloading\u0026lt;/string\u003e \u0026lt;/dict\u003e \u0026lt;/array\u003e \u0026lt;/dict\u003e \u0026lt;/plist\u003e Notify only Notify only alerts users that there is an action pending for installation. The user is notified about the software update through the App Store. It will also not start the installation.\nInstall Later It will allow you to schedule the installation later tonight. The device will usually choose a time between 02:00 and 04:00 based on when the machine is least used to allow the update to install. The update will only install if the device is plugged into the power source.\nConclusion I hope this article has been insightful in giving you a detailed understanding of how Intune \u0026amp; Apple help you to update your devices. Follow the three-step approach and keep your macOS devices updated with all the latest patches \u0026amp; updates. Recommended approach:\nKeep learning and keep sharing. Stay In(tuned). #intuneinspired\n","externalUrl":null,"permalink":"/posts/its-out-now-the-all-new-macos-update-policies-in-intune/","section":"Posts","summary":"Overview The feature all Intune admins managing corporate macOS devices have been waiting for a long is out!","title":"It's Out Now! The All New macOS Update Policies in Intune","type":"posts"},{"content":" In about 42 days, Microsoft will disable the ability to use basic authentication for Outlook, Exchange Web Services, POP, IMAP, Remote PS \u0026amp; EAS protocols for Exchange Online. This means you\u0026nbsp;have\u0026nbsp;to change your apps \u0026amp; scripts to use OAuth (modern authentication). It will also impact mobile devices where users are using legacy authentication (EWS) is used for mail sync. If you have configured the native mail client on your managed Apple devices to use basic authentication, continue reading further to move to modern auth using Intune easily.\u0026nbsp;\nWhat is Basic Authentication \u0026amp; Why is Microsoft disabling it? Basic authentication means the application\u0026nbsp;sends user names and passwords over the Internet as text\u0026nbsp;that is Base64 encoded, and the target server is not authenticated.\u0026nbsp;In most cases, these credentials are also stored locally on the device/servers/systems. It increases the risk of compromised accounts as MFA is hard to be forced when basic authentication is enabled. \u0026nbsp;\nBackground As you might know, Apple has supported OAuth on clients in iOS/iPad OS \u0026amp; macOS devices for many years, so if you are configuring a \u0026#8220;new\u0026#8221;\u0026nbsp;Exchange Online account in the\u0026nbsp;native mail client app\u0026nbsp;on these devices, then it should use the\u0026nbsp;modern auth. However, it is important to note that the Exchange Online account will use modern auth only if it was added to the device after OAuth support was added to the mail app. For iOS/iPad OS, Apple confirmed to include it as a part of the iOS 15.6 upgrade, which means if your devices are on a lower version than iOS 15.6, you will have to use the MDM solution to push this configuration for a native mail client.\u0026nbsp;\nCatch-22: On a device with old iOS, ff modern auth is not configured or pushed from MDM:\u0026nbsp;When you restore a backup from an old device to a new one or use the built-in migration process to move your data and settings to a new one, your mail settings might still be configured to use Basic auth.\nSolution Please note: If you are blocking basic authentication using Azure AD Conditional Access, then you don\u0026#8217;t need to worry because the clients on your devices using EAS connections will use modern authentication.\nHowever, if you currently allow your users to use basic authentication for EAS, then it\u0026#8217;s time you should start using modern authentication!\nThe easiest way to find these details for users still using basic auth is to look into your Azure AD sign-in logs and filter it for\u0026nbsp;Client-Apps -\u0026gt; Exchange ActiveSync,\u0026nbsp;and here you will get details of devices on which basic auth is being used.\u0026nbsp;\nMicrosoft \u0026amp; Apple helps you to do a smooth transition to OAuth for thousands of users in your organization by simply using the Azure AD service principal (enterprise app) called \u0026#8220;iOS accounts.\u0026#8221; With the help of Graph APIs, Apple uses this service principal to retrieve account information and access user mailboxes with EAS. As the device is managed and already has the user\u0026#8217;s credentials, this ROPC workflow allows the application to sign in by directly handling their password, giving you an added advantage.\nPlease ensure that you grant consent to allow the app to use the three Graph permissions it needs on behalf of the organization else, users will have to consent while they configure the native mail client.\nMDM as an Exception If you are using Intune or any other MDM solution to configure the native mail client on your iOS/iPad OS or macOS devices, then this enterprise app\u0026nbsp;will NOT update\u0026nbsp;the mail app profile on your managed devices.\nA. Update existing email profiles to use OAuth:\nFollow the steps below to\u0026nbsp;update the existing email profile\u0026nbsp;for your iOS and iPadOS devices to\u0026nbsp;switch to\u0026nbsp;modern authentication.\n1. Sign in to the\u0026nbsp;Microsoft Endpoint Manager admin center.\n2. Select\u0026nbsp;Devices\u0026nbsp;\u0026gt;\u0026nbsp;iOS/iPad OS Devcies \u0026gt;\u0026nbsp;Configuration profiles\n3. Search for the email profile that you have configured \u0026amp; pushed to the devices.\n4. Scroll down to\u0026nbsp;Configuration Settings\u0026nbsp;and click\u0026nbsp;Edit.\u0026nbsp;\n5. Toggle for OAuth to \u0026#8220;Enable\u0026#8221; to force the connection to switch to Modern\u0026nbsp;Authentication.\n6. Click \u0026#8220;Review \u0026amp; Save\u0026#8221; and then Save on the next page to save the configurations.\nThe following steps show you the sequence of changes on the user\u0026#8217;s end \u0026#8211;\u0026nbsp;\n\u0026#8211; \u0026nbsp;As soon as the iOS device sync with Intune and gets the new policy, the user will get a pop-up message on the device screen to\u0026nbsp;Enter the password for\n\u0026nbsp;Exchange Account.\n\u0026#8211; Click\u0026nbsp;Edit Settings,\u0026nbsp;which will automatically take you to the iPad Settings, then into the configured email account. Where it will open the web-based modern authentication login. Enter your password and press\u0026nbsp;Sign in.\n\u0026#8211; \u0026nbsp;\u0026nbsp;It will then automatically verify everything and step through a couple of screens before completing it.\nB. Create an email device profile for iOS/iPadOS:\nFollow the steps below to automatically configure email device profiles on your end user\u0026#8217;s device and let them access company email on their devices without any required setup on their part. You can also use these pre-configured email profiles to evaluate device compliance and Conditional Access (CA) to block any non-compliant devices from accessing corporate email.\nP.S: You have forced \u0026#8220;Require\u0026#8221; for \u0026#8220;Unable to set up email on the device\u0026#8221; in the Compliance policy if you want to use it with Conditional Access.\n1. Sign in to the\u0026nbsp;Microsoft Endpoint Manager admin center.\n2. Select and go to\u0026nbsp;Devices\u0026nbsp;\u0026gt;\u0026nbsp;iOS/iPad OS Devcies \u0026gt;\u0026nbsp;Configuration profiles \u0026gt;\u0026nbsp;Create profile\n3. Select\u0026nbsp;Email\u0026nbsp;as\u0026nbsp;Profile\u0026nbsp;from the\u0026nbsp;Templates\u0026nbsp;menu.\n4. \u0026nbsp;In\u0026nbsp;Basics, enter the\u0026nbsp;Name\u0026nbsp;\u0026amp;\u0026nbsp;Description\u0026nbsp;for the profile and click\u0026nbsp;Next.\n5. In\u0026nbsp;the Configuration settings page,\u0026nbsp;enter the required configurations and click\u0026nbsp;Create:\n6. On the next page,\u0026nbsp;Assign\u0026nbsp;the policy to the required groups.\nAwesome\u0026#8230;Job done and your iOS devices are now using modern authentication for exchange mail services.\u0026nbsp;\n","externalUrl":null,"permalink":"/posts/its-time-to-move-to-modern-authentication-2/","section":"Posts","summary":"In about 42 days, Microsoft will disable the ability to use basic authentication for Outlook, Exchange Web Services, POP, IMAP, Remote PS \u0026amp; EAS protocols for Exchange Online.","title":"It's Time To Move To Modern Authentication!","type":"posts"},{"content":" Overview Just in Time, more commonly referred to as JIT, is a management philosophy used in several industries for decades. “Waste” is taken in its most general sense and includes time, resources, and materials. There are many elements to JIT in production; however, when referring to Mobile Device Management, the key features are:\nContinuous Improvement Set-up time reduction Automation Eliminating waste Waste here refers to the total “non-value-addition time” in the device enrollment activity, i.e. from powering on the device to completing its enrollment. And with this new JIT device registration, it no longer requires the Company Portal app for Azure Active Directory (Azure AD) registration or compliance checking. Microsoft has removed the Non-VA steps; removed required app downloads that can’t be changed, and put an end to switching between apps to get the device compliant, thereby streamlining the user flow and reducing the overall enrollment time.\nSo, let us check what has changed and how it will help with device enrollment.\nThe Move to Modern Authentication A few months back, we all received a notification that Apple will remove the Company Portal authentication method for all new and existing iOS/iPadOS ADE enrollment profiles in November 2022. I have also written a post on it with all the steps needed to enrol the device with modern authentication. You can follow the steps in this article to configure the DEP profiles to use Setup Assistant with modern authentication.\nEnrol Supervised iOS Devices With Modern Authentication With iOS16 – Intune – In Real Life (intuneirl.com)\nBehind the Scene : The Magic of SSO Single sign-on is a way of communications between services to which end-users want access and an identity providers that can confirm whether or not those end-users are who they say they are. Once enabled, SSO lets users access multiple services after providing their credentials only once—rather than requiring them to sign in to each service individually.\nWith the new approach, as soon as the user completes enrollment during Setup Assistant and lands on the home screen of the device, the user authentication has to be completed in any Microsoft Office application to register the device with Azure AD and kick off compliance. The compliance checks are integrated into the Office app so as soon as the user authentication is completed the device will be evaluated for complaince. Which removes the unnecessary step of switching between multiple apps to make the device compliant.\nThe enrollment SSO is based on Apple’s extensible SSO and on account-driven user enrollment, which was introduced in iOS and iPadOS 15.\nAfter the enrollment profile is downloaded, the first authentication happens in Setup Assistant and it completes enrollment with establishing the user device affinity while the next authentication handles Azure AD registration within a pre-authorized Office app. This ensures that SSO is fully established across the device.\nConfigure JIT Registration for ADE Create a device configuration policy under Device features \u003e Category \u003e Single sign-on app extension.\nSet the SSO app extension type to Microsoft Azure AD. Add the App bundle IDs for all the apps including Microsoft Office apps you want the SSO extension to apply to. The first sign in must go through an app that is configured with the SSO extension so that Azure AD registration can be completed. After that, the user will be signed into any app that’s part of the SSO extension policy. Add the required key value pair under the additional configuration.Key: device_registrationType: StringValue: {{DEVICEREGISTRATION}} Key: browser_sso_interaction_enabledType: IntegerValue: 1 Assign the profile to the required group Once these configuration steps are complete, the user will be able to complete setup and authentication on the device. They simply need to turn on the device, go through the Setup Assistant screens, and authenticate with their Azure AD credentials to fully enroll the device with Intune and establish user device affinity. When the user opens a managed Microsoft Office app that has an established SSO extension, the app automatically establishes SSO.\nPlease ensure that Microsoft Authenticator app is deployed as a required app the user group. Wrapping Up This new feature of JIT device registration all super cool and you should try it out and implement it as it will change the way we have been enrolling ADE devices till now. And will also make the user productive quickly within minutes.\n","externalUrl":null,"permalink":"/posts/just-in-time-registration-for-ios-ipados/","section":"Posts","summary":"Overview Just in Time, more commonly referred to as JIT, is a management philosophy used in several industries for decades.","title":"Just in Time Registration for iOS/iPadOS","type":"posts"},{"content":" With iOS/iPadOS 16 scheduled to be released in the next few days, many organizations will put restrictions on deferring software updates to buy in time to get ready with the new OS. At the same, there will be many zero-day vulnerabilities for which you might want to keep your devices updated to a specific version.\u0026nbsp;\nHope this will help you to configure the software update policies and keep your iOS devices updated. The software update policies can only be applied to devices enrolled as\u0026nbsp;supervised. This seems straightforward, but practically speaking, it\u0026#8217;s NOT that simple!\u0026nbsp;\nContinue reading the post to configure the policy for your tenant.\nThe software update policies can only be applied to supervised devices with iOS/iPadOS 13 minimum required version.\u0026nbsp;\nConcept: With these software update policies, you can:\nEither choose to deploy the\u0026nbsp;latest available update\u0026nbsp;or choose to deploy an older update.\u0026nbsp;Configure the update to install at a specific time.\u0026nbsp; If you are configuring software update policies for\u0026nbsp;Shared iPads,\u0026nbsp;then the update will only install when no user is signed in to a Shared iPad and the device is charging. Else the update will fail.\nConfigure The Policy Sign in to the\u0026nbsp;MEM Portal.Select\u0026nbsp;Devices\u0026nbsp;\u0026gt;\u0026nbsp;Update policies for iOS/iPadOS\u0026nbsp;\u0026gt;\u0026nbsp;Create profile.On the\u0026nbsp;Basics\u0026nbsp;tab, specify a name for this policy, specify a description (optional), and then select\u0026nbsp;Next. On the next page, you have the options to configure the policy options:Select a specific version to installConfigure the schedule for the policy These options look interesting. But before we apply the policy, let us understand them in detail.\nLatest update: Deploys the most recently released update for iOS/iPadOS.If you select a\u0026nbsp;previous version, you must also deploy a\u0026nbsp;device restriction policy\u0026nbsp;to hide the visibility of software updates from the device.Update at next check-in: The update installs on the device the next time it checks in with Intune. This option requires no extra configurations.Update during scheduled time: You configure one or more windows of time during which the update will install upon check-in.Update outside of scheduled time: You configure one or more windows of time\u0026nbsp;during which updates won\u0026#8217;t install upon check-in.Weekly schedule: If you choose a schedule type other than\u0026nbsp;update at the next check-in, configure the following options. Configure the policy as required and\u0026nbsp;assign\u0026nbsp;it to the respective security group. End User Experience When you assign these policies, you might notice discrepancies between expected and experienced behavior.\nExpected behavior when OS update is released to iPad: Notification on the device that the new OS is available.OS version and \u0026#8220;Download and Install\u0026#8221; is displayed in the Settings app.Installation is prompted for acceptance with the possibility to Postpone or Install during the time window (configured in the policy) if connected to power.If accepted, by entering Passcode, the iPad will install new iOS; if connected to power.If postponed, the iPad will not update, and a new prompt will appear from time to time.If power is not connected, the iPad will not update \u0026nbsp;\u0026nbsp;2.\u0026nbsp;Experienced behavior when new OS is released to iPad:\nNotification on the device that a new OS is available.OS version and \u0026#8220;Download and Install\u0026#8221; is displayed in Settings.Installation is prompted for acceptance with the possibility to Postpone or Install during a limited time (configured policy) if connected to power.If accepted, by entering Passcode, the iPad will install new iOS; if connected to power.If accepted, the iPad will install randomly outside the time frame by entering the Passcode.If accepted, by entering the Passcode, the iPad will install even if power is not connected (more than 50% battery).If Postponed, the iPad will install after 3 Postponed warnings.iPad shows a notification that a new OS is available. When checked in Settings iPad shows the latest MDM released OS. After some time, a warning prompt is displayed.\u0026#8220;Pad shows \u0026#8220;New update available\u0026#8221; – Installation is accepted. Bonus Content: Reasons for Discrepancies (Reasons are in chronological order)\nWhen the user checks for the update in Settings Apps, the update can be deleted if it falls within the delay period set on the device. This behavior ties in with most of the other scenarios.When the Passcode is stashed, and the MDM uses the \u0026#8216;Download\u0026#8217; and \u0026#8216;InstallASAP\u0026#8221; options in the ScheduleOSUpdate command \u0026#8211; the device will update.Update Cadence. This was introduced in iOS 14.6 and can be configured with the Settings command. This value defines how the system presents software updates to the user. When there\u0026#8217;s\u0026nbsp;more than one available update for the user, the system behaves as follows:\n0: Presents both options to the user.\n1: Presents the lower numbered (oldest) software update version.\n2: Presents only the highest numbered (most recent) release available for the device.\nHope this will help you to configure the software update policies and keep your iOS devices updated.\nShare this post:\nFacebook Twitter LinkedIn ","externalUrl":null,"permalink":"/posts/keep-me-updated-2/","section":"Posts","summary":"With iOS/iPadOS 16 scheduled to be released in the next few days, many organizations will put restrictions on deferring software updates to buy in time to get ready with the new OS.","title":"Keep Me Upadted!","type":"posts"},{"content":" So, you have decided to use Intune for the modern management of your devices; now, let’s get you started with the basics of setting up the tenant and some required configurations. Microsoft Intune (formerly Windows Intune) is a part of Microsoft Endpoint Manager, a Microsoft cloud-based management tool that provides unified endpoint management of both corporate and personal devices. This helps organizations to protect corporate data. It also extends some of the “on-premises” functionality of Microsoft System Center Configuration Manager to the Windows Azure cloud. To start with, your first question would be about licensing – “What license do I need for managing my devices?” Intune license is included under the following products:\nMicrosoft 365 E5Microsoft 365 E3Enterprise Mobility + Security E5Enterprise Mobility + Security E3 Microsoft 365 Business PremiumMicrosoft 365 F1Microsoft 365 F3Microsoft 365 Government G5Microsoft 365 Government G3Intune for Education Microsoft Intune also offers a device-only subscription service that will help you manage devices that aren’t affiliated with specific users, e.g., shared workstations.\nYou can’t assign an Intune device license. Instead, the usage will be based on trust, i.e., device usage. Now that you know which license you will need to manage your devices, let’s start and fire up the tenant! Tenant Configuration… (Coming Soon)\n","externalUrl":null,"permalink":"/posts/lets-get-started-2/","section":"Posts","summary":"So, you have decided to use Intune for the modern management of your devices; now, let’s get you started with the basics of setting up the tenant and some required configurations.","title":"Let's get Started..","type":"posts"},{"content":" Overview Microsoft Intune allows you to easily \u0026#8220;locate a device\u0026#8221; if it\u0026#8217;s lost or stolen. However, this functionality is still unavailable for all devices/platforms. As of today, only this functionality works for the below platforms:\nAndroid Enterprise dedicated devices iOS/iPadOS 9.3 and later Windows 10 Windows 11 Whereas the below-listed platforms do not support this functionality from Intune admin portal, and that\u0026#8217;s the reason that the \u0026#8220;locate device\u0026#8221; remote command is greyed out when for these platforms:\nAndroid device administrator Android Enterprise: Corporate-owned work profile Personally-owned work profile Fully managed macOS Windows Holographic for Business Windows Phone But there is always a way out 😃. With this post, I will show how you can use Samsung Knox to get device location information. Let\u0026#8217;s get started, then.\nMandatory Requirements As we are discussing Android Enterprise devices, I assume you already have a purchased KNOX Enterprise and devices are enrolled with KMS. Apart from this, the other pre-requisites are:\nLocation policy configured in KM and assigned to the device. Location policy configured and assigned correctly to the device Configure Location Policy You must configure and assign a policy for getting device locations utilizing Knox Management APIs. Create the API Client ","externalUrl":null,"permalink":"/posts/temp-slug-52-2/","section":"Posts","summary":"Overview Microsoft Intune allows you to easily \u0026#8220;locate a device\u0026#8221; if it\u0026#8217;s lost or stolen.","title":"Locate lost or stolen Android Enterprise devices with Intune","type":"posts"},{"content":" Overview Microsoft Intune allows you to easily \u0026#8220;locate a device\u0026#8221; if it\u0026#8217;s lost or stolen. However, this functionality is still unavailable for all devices/platforms. As of today, only this functionality works for the below platforms:\nAndroid Enterprise dedicated devices iOS/iPadOS 9.3 and later Windows 10 Windows 11 Whereas the below-listed platforms do not support this functionality from Intune admin portal, and that\u0026#8217;s the reason that the \u0026#8220;locate device\u0026#8221; remote command is greyed out when for these platforms:\nAndroid device administrator Android Enterprise: Corporate-owned work profile Personally-owned work profile Fully managed macOS Windows Holographic for Business Windows Phone But there is always a way out 😃. With this post, I will show how you can use Samsung Knox to get device location information. Let\u0026#8217;s get started, then.\nMandatory Requirements As we are discussing Android Enterprise devices, I assume you already have a purchased KNOX Enterprise and devices are enrolled with KMS. Apart from this, the other pre-requisites are:\nLocation policy configured in KM and assigned to the device. Location policy configured and assigned correctly to the device Configure Location Policy You must configure and assign a policy for getting device locations utilizing Knox Management APIs. Create the API Client ","externalUrl":null,"permalink":"/posts/temp-slug-52/","section":"Posts","summary":"Overview Microsoft Intune allows you to easily \u0026#8220;locate a device\u0026#8221; if it\u0026#8217;s lost or stolen.","title":"Locate lost or stolen Android Enterprise devices with Intune","type":"posts"},{"content":"In this step-by-step guide, I delve into the process of setting up a macOS virtual machine, integrating it seamlessly with Microsoft Intune, and optimizing it with the Enterprise SSO Plugin. 🌟\nBy leveraging this powerful combination, you can enhance your organization’s device management capabilities, simplify user authentication, and improve productivity across your macOS environment. 💪\nWhether you’re an IT professional, system administrator, or simply interested in macOS management, this blog post is a must-read! 📚🔍\nWhat is Parallels Software? Parallels is a globally recognized software that allows users to run Windows, Linux, and indeed another instance of macOS, on their Mac, without rebooting. The software provides a seamless way to run applications and perform tasks on different operating systems simultaneously.\nPreparing for the Installation\nDownload Parallels Software: The first step is to get your copy of Parallels Desktop for Mac. You can download it directly from the Parallels website. Application and Desktop Delivery | Parallels RASParallels Official Site | Mac \u0026amp; Windows Virtualization, Mac ManagementEnabled by Ensure System Requirements: To create a virtual macOS, your system must meet the minimum requirements set by Parallels. The details of these requirements can also be found on the Parallels website. Install Parallels on your Mac\nDouble-click on the downloaded .dmg file, followed by another double-click on \"Install Parallels Desktop\" within the resulting window. If prompted for admin confirmation, choose \"Open\" to proceed. Following that, please wait while Parallels downloads the required installation data. Once completed, enter your Password and click on \"Continue\" if prompted to choose between the Trial version. Then, proceed to accept the license agreement and select \"OK\" for any permission prompts that may appear. Finally, follow any remaining instructions to successfully finish the installation process. Creating a macOS Virtual Machine\nOnce Parallels has been successfully installed, it will automatically launch and present you with the option to install Windows 11. All you need to do is click on the \"Install macOS\" button, patiently wait for the installation process to finish, and then agree to the terms of use.\nWe can use the virtual macOS just like we would use a physical Mac, with access to all macOS features and applications.\nGreat! At this point, we have successfully set up a virtual Mac machine that is now prepared for enrollment in Microsoft Intune. In the upcoming steps, we will proceed with enrolling this macOS virtual machine in Microsoft Intune. Enroll Your macOS VM using the Company Portal App Our newly installed macOS VM will appear in the Parallels Desktop Control Center. Install Company Portal app Go to Enroll My Mac. Wait while the Company Portal installer .pkg file downloads. Open the installer when it's ready. On the Introduction page, select Continue. On the License page, read through the Microsoft Application License Terms. Select Continue. Select Agree to agree to the terms of the software license agreement. On the Installation Type page, select Install. Wait for Company Portal to finish installing. Enroll your Mac Sign in to the Company Portal app with your work or school account. On the Set up access page, select Begin. On the Install management profile page, select Download profile. Your macOS system settings open in a new window. The management profile you just downloaded is shown. Select the profile to install it. Wait while the management profile installs and then enrolls your device. Return to the Company Portal app and verify that there's a green checkmark next to Install management profile. When setup is complete, select Done. Your device is ready to use for work. You can go to Devices in the Company Portal app to view and manage your enrolled Mac. Excellent! With the Mac VM created and successfully enrolled in Intune, we are now ready to proceed with configuring the Enterprise Single Sign-On (SSO) plug-in as the final step of this process.\nUse the Microsoft Enterprise SSO Plug-in On macOS Devices Prerequisites To use the Microsoft Enterprise SSO plug-in on macOS devices:\nThe device is managed by Intune.The device must be running on macOS 10.15 and newerThe Microsoft Company Portal app must be installed and configured on the device. In the Microsoft Intune admin center, create a device configuration profile. This profile includes the settings to configure the SSO app extension on devices.\nSign in to the Microsoft Intune admin center.Select Devices \u0026gt; Configuration profiles \u0026gt; Create profile.Enter the following properties:Platform: Select macOS.Profile: Select Templates \u0026gt; Device features.Select Create:In Basics, enter the following properties:Name: Enter a descriptive name for the policy. Name your policies so you can easily identify them later. For example, a good policy name is macOS: Microsoft Enterprise SSO plug-in.Description: Enter a description for the policy. This setting is optional, but recommended.Select Next.In Configuration settings, select Single sign-on app extension, and configure the following properties:SSO app extension type: Select Microsoft Azure AD:App bundle ID: Enter a list of bundle IDs for apps that don't support MSAL and are allowed to use SSO. Continue creating the profile, and assign the profile to the users or groups that will receive these settings. End User Experience with Enterprise SSO Plug-in macOS/enterprise-sso.mp4 at main · pathaksomesh06/macOSmacOS. Contribute to pathaksomesh06/macOS development by creating an account on GitHub.pathaksomesh06GitHub 0:00 /1:18 1× \u0026lt;/figure\u0026gt; Conclusion Creating a virtual macOS with Parallels Software is a convenient and simple procedure that opens a world of opportunities for testing macOS with Microsoft Intune. This process endows you with the ability to run several instances of macOS concurrently, perfect for scenarios like software testing, operating applications that aren't compatible with your primary system, or for exploring the features of a new macOS version.\n","externalUrl":null,"permalink":"/posts/mac-on-mac-running-a-virtual-macos/","section":"Posts","summary":"In this step-by-step guide, I delve into the process of setting up a macOS virtual machine, integrating it seamlessly with Microsoft Intune, and optimizing it with the Enterprise SSO Plugin.","title":"Mac-on-Mac: Running a Virtual macOS using Parallels Desktop","type":"posts"},{"content":"The world of managing Macs just got a whole lot friendlier (or potentially foe-ish?) with the introduction of a new exciting feature: Managed Local Accounts. Announced at WWDC 2023 and released in Intune today with service release 2402, these features promise to revolutionize the way you handle Mac enrollment and administration. But before you jump in headfirst, let's explore their potential impact from both sides of the coin.\nFriend: Managed Local AccountsSay goodbye to the hassle of individual user accounts and hello to streamlined management! Managed Local Accounts allow you to pre-configure local accounts directly through Intune admin center. This means:\nSimplified deployment:\u0026nbsp;No more manual setup for each user.\u0026nbsp;Assign pre-configured accounts instantly.Enhanced security:\u0026nbsp;Lmit privileges,\u0026nbsp;and enforce other policies remotely.Improved control:\u0026nbsp;Manage account configured effortlessly.Foe: Managed Local AccountsWhile the benefits are undeniable, some things to consider are:\nLimited User Privileges: User account ms created as standard user accounts lack admin rights,\u0026nbsp;which can hinder tasks requiring elevated permissions like installing software or modifying system settings.\u0026nbsp;As the Mac management ecosystem is still evolving, this can create friction for users and potentially require IT intervention for routine tasks.No Official LAPS Equivalent: macOS doesn't have a built-in tool like Microsoft's LAPS for centrally managing local admin passwords.\u0026nbsp;This means more complex password management and potential security risks if credentials aren't rotated regularly.View-Only Remote Support: While Intune offers remote access to devices,it's limited to viewing the screen without interaction.\u0026nbsp;This makes troubleshooting and assisting users more challenging,\u0026nbsp;especially for issues requiring admin privileges.New Friend Alert: Await Final ConfigurationJoining the party is Await Final Configuration, a feature that releases the device to deaktop only when all the configurations and restrictions from Intune are applied installed/configured on the device. This means:\nEnhnaced security: Setup Assistant will only release the device to deaktop once all configurations are installed before allowing user the access to the device.Enhanced user experience deployment:\u0026nbsp;User access the device which is fully configured and secured with all settings/configurations.Decoding the Friend: Diving Deep into Managed Local AccountsNow that we've introduced the dynamic duo of Managed Local Accounts and Await Final Configuration, let's delve deeper into the friend, Managed Local Accounts, and understand it before tackling its partner.\nUnderstanding the Command:The magic behind Managed Local Accounts lies in the AccountConfigurationCommand, which is pushed via Intune. This command enables Intune to remotely create and configure local accounts on macOS devices enrolled. Here's a breakdown of the key elements involved in the AccountConfigurationCommand:\nThe Final Stretch: The Waiting RoomNow that we've explored power of Managed Local Accounts. Let's also understand: How the devices is released from the \"waiting room\" once everything is configured? This is where the ReleaseDeviceFromAwaitConfiguration command comes in, playing a crucial role in the final act of the Mac enrollment.\nAwait Final Configuration holds the device's desktop until it applies all the required policies and settings through the MDM solution. While it offers great control, users might experience a delay before accessing their devices. This is where ReleaseDeviceFromAwaitConfiguration steps in, allowing you to signal \"showtime!\" when everything is ready.\nThe MDM send the command to inform a device that it can allow the user to continue in Setup Assistant.\n\u0026lt;?xml version=\"1.0\" encoding=\"UTF-8\"?\u0026gt; \u0026lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"\u0026gt; \u0026lt;plist version=\"1.0\"\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;Command\u0026lt;/key\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;RequestType\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;DeviceConfigured\u0026lt;/string\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;key\u0026gt;CommandUUID\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;0001_DeviceConfigured\u0026lt;/string\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/plist\u0026gt;And when all the policies and settings are applied successfully, the device sends back a response to MDM to acknowledge.\n\u0026lt;?xml version=\"1.0\" encoding=\"UTF-8\"?\u0026gt; \u0026lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"\u0026gt; \u0026lt;plist version=\"1.0\"\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;CommandUUID\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;0001_DeviceConfigured\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;Status\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;Acknowledged\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;UDID\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;00008020-000915083C80012E\u0026lt;/string\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/plist\u0026gt;So it's like, you've carefully prepared the stage with Managed Local Accounts and added the finishing touches with Await Final Configuration. Now, ReleaseDeviceFromAwaitConfiguration raises the curtain, granting users access to their fully equipped and secure workspace.\nIntune ConfigurationIn the\u0026nbsp;Intune admin center, go to\u0026nbsp;Devices\u0026nbsp;\u0026gt;\u0026nbsp;Enrollment.Select the\u0026nbsp;Apple\u0026nbsp;tab.Under\u0026nbsp;Bulk Enrollment Methods, select\u0026nbsp;Enrollment program tokens.Select an enrollment program token.Select\u0026nbsp;Profiles\u0026nbsp;\u0026gt;\u0026nbsp;Create profile\u0026nbsp;\u0026gt;\u0026nbsp;macOSEnter a name and description for the profile so that you can distinguish it from other enrollment profiles.On the\u0026nbsp;Management Settings\u0026nbsp;page, configure\u0026nbsp;Enrol with User Affinity \u0026amp; Modern Authentication.💡Await Final Configuration \u0026amp; Managed Local Accounts can only be used with User Affinity \u0026amp; Modern Authentication.Toggle \"Yes\" for Await Final Configuration and click NextOn the\u0026nbsp;Setup Assistant\u0026nbsp;page, configure the Setup Assistant experience as per your organisation requirements.On the Account Settings page, Select Yes to create local managed account during enrollment. Toggle \"Yes\" for blocking users to change their username details.Review changes and click Create\u0026nbsp;to finish creating the profile.End User ExperienceConclusionManaged Local Accounts offer exciting possibilities for revolutionizing your Mac management landscape. Carefully weigh the benefits and considerations against your specific needs and environment. Remember, understanding your IT needs \u0026amp; impact of these features on end user impact is key to making informed decisions that empower your organization and users alike.\nStay tuned for the next blog, where I will take you the backstage where all this magic happens. The deep dive into backend process. Till then keep Mac-ing 😄\n","externalUrl":null,"permalink":"/posts/macos-managed-local-accounts-friend-or-foe-with-a-new-friend-in-town/","section":"Posts","summary":"The world of managing Macs just got a whole lot friendlier (or potentially foe-ish?","title":"MacOS Managed Local Accounts: Friend or Foe? (With a New Friend in Town!)","type":"posts"},{"content":"Part two of the macOS management series, and we will configure the policies \u0026amp; profiles for silent onboarding of mac OS devices in Microsoft Defender for Endpoint along with pushing the Company Portal app on the device.\nBefore creating any macOS policy, let us first configure MDE. Log in to Security Center and enable the connection for Defender. I will use MDE as an enterprise security platform for securing corporate devices.\nConfigure Microsoft Defender for Endpoint in Intune The first step is to set up the communication between Intune and Microsoft Defender for Endpoint:\nIn Microsoft 365 Defender; Select Settings \u003e Endpoints \u003e Advanced features. For\u0026nbsp;Microsoft Intune connection, choose\u0026nbsp;On: Return to\u0026nbsp;Microsoft Defender for the Endpoint\u0026nbsp;page in the Intune portal, and the connector status should be \u0026#8220;Enabled.\u0026#8221; Deploy Microsoft Defender for Endpoint on macOS\nDeployment of MDE on your macOS devices is a bit complicated process. You will first need to download the onboarding package, approve the extension and then configure a few more policies. The below five steps are required for onboarding your macOS in MDE:\nDownload the onboarding packageClient device setupApprove system extensionsCreate System Configuration profilesPublish application Download the Onboarding Package In Microsoft 365 Defender portal, go to Settings \u0026gt; Endpoints \u0026gt; Device management \u0026gt; Onboarding. Set the operating system to macOS and the deployment method to Mobile Device Management / Microsoft Intune. Select Download onboarding package. Save it as WindowsDefenderATPOnboardingPackage.zip to the same directory. Extract the contents of the .zip file The zip contains the onboarding files for MDM solutions. But as we are using Intune as an MDM solution, so will focus on the folder named \u0026#8220;Intune\u0026#8221;.\nCreate System Configuration profiles As the next step, we will create configuration profiles for Microsoft Defender for Endpoint. The steps are as below:\nLog in to Intune portal, navigate to Devices\u0026nbsp;\u0026gt;\u0026nbsp;macOS Devices \u0026gt; Configuration profiles \u0026gt; Create Profile. Select Profile type as Templates and Template name as Custom. Click\u0026nbsp;Create. Give the profile a name and click\u0026nbsp;Next. Choose \u0026#8220;Device\u0026#8221; as the deployment channel and select WindowsDefenderATPOnboarding.xml in the \u0026#8220;Intune\u0026#8221; folder that we extracted from the onboarding package above as a configuration profile file. Click Next. Assign devices on the Assignment tab. Click Next. Approve System Extensions Now, we need to create a profile so that the extensions in the onboarding file are approved in the system context.\nSelect Create Profile under Configuration Profiles. Select Platform as macOS, Profile type as Templates and the Template name as Extensions. Click create. In the Basics tab, give a name to this new profile. In the Configuration settings tab, expand System Extensions and add the following entries in the Allowed system extensions section: Bundle identifierTeam identifiercom.microsoft.wdav.epsextUBF8T346G9com.microsoft.wdav.netextUBF8T346G9 Full Disk Access By default, the new versions of macOS do not allow applications to access certain locations on disk (such as Documents, Downloads, Desktop, etc.) without explicitly granting that app\u0026#8217;s permission. Microsoft defender is also no exception; without this consent, it will not be able to protect the device fully.\nThis profile grants Full Disk Access to Microsoft Defender for Endpoint. Download the config file from mdatp-xplat/fulldisk.mobileconfig at master · microsoft/mdatp-xplat · GitHub and save it as fulldisk.mobileconfig Log in to Intune portal, navigate to Devices\u0026nbsp;\u0026gt;\u0026nbsp;macOS Devices \u0026gt; Configuration profiles \u0026gt; Create Profile. Select Profile type as Templates and Template name as Custom. Click\u0026nbsp;Create. Give the profile a name and click Next. Choose \u0026#8220;Device\u0026#8221; as the deployment channel and select the fulldisk.mobileconfig that we downloaded in step 1. Network\u0026nbsp;Filter This profile configures the Endpoint Detection and Response (EDR) capabilities for Microsoft Defender to inspect socket traffic and report this information to the security center. Configuring this policy allows the network extension to perform this functionality.\nDownload the config file Network Config file and repeat the same steps to create a custom profile. Notifications This profile will allow Microsoft Defender for Endpoint on macOS and Microsoft Auto Update to display notifications in UI on macOS.\nDownload the config file notif.mobileconfig file and repeat the same steps to create a custom profile.\nBackground Services This configuration profile grants Background Service permissions to Microsoft Defender for Endpoint. macOS 13 (Ventura) contains new privacy enhancements. Beginning with this version, by default, applications cannot run in background without explicit consent. Microsoft Defender for Endpoint must run its daemon process in background.\nDownload the config file background_services.mobileconfig file and repeat the same steps to create a custom profile.\nThis is how your portal might look like once you have created all these profiles for MDE:\nDeploy MDE to macOS Devices Now we have completed all the pre-work for Microsoft Defender for Endpoint, its time to publish the app to devices:\nLogin to Intune portal and navigate to Apps \u0026gt; macOS \u0026gt; and select the app type as Microsoft Defender for Endpoint (macOS). Keep default values, click Next and assign it to the Device group. It is not completed yet\u0026#8230;There are still two more configurations remaining:\nInstall Quick Scan settings for MDEEnable quick scan settings for MDE Navigate to Devices \u0026gt; macOS \u0026gt; Shell Scripts, upload the two scripts below, and assign them to the same device group to which the MDE policies were assigned.\nshell-intune-samples/installMDATPQuickScanJob.sh at master · microsoft/shell-intune-samples · GitHubshell-intune-samples/runMDATPQuickScan.sh at master · microsoft/shell-intune-samples · GitHub Add macOS Company Portal App There are multiple ways of pushing the Company Portal to macOS devices: Instruct users to download and install Company PortalInstall Company Portal for macOS as a macOS LOB appInstall Company Portal for macOS by using a macOS Shell Script However, for now, I will walk you through the app deployment on supervised devices and would recommend deploying Company Portal using shell script. The company portal will be downloaded and installed using the macOS Shell Scripts feature. This option will always install the current version of Company Portal for macOS but lacks the option of reporting app installation.\nDownload the Intune Company Portal Installation Script. Login to Intune portal and navigate to Devices \u0026gt; macOS \u0026gt; Shell Scripts. Set Run script as \u0026#8220;signed-in user\u0026#8221; to No. This enforces the script to run in the system context. Set the Maximum number of retries if the script fails to 3. Assign the script to the device group. It has been a long post, and I will end it here. In the next part of the series, I will cover device enrollment using Modern Authentication, some mandatory restrictions that you should have on the MacBooks and finally, publishing M365 apps, certificates and VPN.\nStay In(tuned) and be #intuneinspired\n","externalUrl":null,"permalink":"/posts/macos-management-with-intune-part-ii/","section":"Posts","summary":"Part two of the macOS management series, and we will configure the policies \u0026amp; profiles for silent onboarding of mac OS devices in Microsoft Defender for Endpoint along with pushing the Company Portal app on the device.","title":"macOS Management with Intune - Part II","type":"posts"},{"content":" Overview Welcome to the next part of the macOS management series. In this post, I will help you deploy different apps to your corporate macOS devices.\nMicrosoft Edge You have the below-listed options to configure Edge as a managed browser on the MacBooks.\nSettings Catalog Property List Files Custom profiles Settings Catalog It is the easiest and simplest way of configuring policies for Microsoft Edge, as Microsoft has now included almost every setting that can be configured for Edge in the Settings Catalog to make Edge your corporate-managed browser.\nLogin to Intune admin portal and navigate to Devices \u0026gt; macOS \u0026gt; Configuration Profile, and select Settings Catalog as profile type.\nProperty List Files A property list file known as a plist is a structured text file that contains essential configuration information for a bundled executable. The file contents are structured using XML, and its contents are a set of keys and values describing different aspects of the bundle. The system uses these keys and values to obtain information about your app and how it is configured. All bundled executables (plug-ins, frameworks, and apps) must have a property list file.\nBy convention, the name of an information property list file is Info.plist. The name of this file is case-sensitive and must have an initial capital letter I. This file resides in the top level of the bundle directory. In macOS bundles, this file resides in the bundle\u0026#8217;s Contents directory. The simplest way to create an Info.plist file is to use Xcode. To do so, Open Xcode on your Mac and Click File \u0026gt; New.\nNow, select platform as macOS, resource as \u0026#8220;Property List\u0026#8220;, and keep the file name as com.microsoft.Edge.plist.\nThen you can configure all the settings you want for Edge as your corporate browser.\nDo you need to try this hard to configure Edge? No!\nThanks to Microsoft for making our life easier. You can download the policy templates file from the Microsoft Edge Enterprise landing page. It has an example plist file (itadminexample.plist), which contains all supported data types that you can customise to define your policy settings.\nSave it as \u0026#8220;com.microsoft.Edge.plist\u0026#8221;. This name is case-sensitive and shouldn\u0026#8217;t include the channel you\u0026#8217;re targeting because it applies to all Microsoft Edge channels.\nThe next part is deploying the plist file to your target devices. Login to Intune portal, create a new device configuration profile for the macOS platform and select the\u0026nbsp;Preference file\u0026nbsp;profile type. Target\u0026nbsp;com.microsoft.Edge\u0026nbsp;as the preferred domain name and upload your list, which you just modified in the previous step.\nAssign the profile to the device group, and Edge will be silently configured on those devices. Deploying Microsoft 365 Apps Microsoft 365 for Mac, or Microsoft 365 apps for Mac as it\u0026#8217;s now known, is a key part of any Microsoft 365 deployment or any macOS deployment in an organisation.\nWe can use three different mechanisms within Microsoft Intune to get\u0026nbsp;Microsoft 365 Apps deployed to Macs. Mac App Store via Volume Purchase Program (VPP) Microsoft Content Delivery Network Intune Scripting Agent for Mac Deploying Microsoft 365 Apps for Mac via Volume Purchase Program (VPP) (Not the recommended way) This method requires an Apple VPP token configured with your Intune tenant. Before proceeding further, ensure that you\u0026#8217;ve followed the steps documented here.\nOnce you have an Apple Business Manager VPP token synchronised with Intune, proceed further to assign Office Apps to your users.\nOpen\u0026nbsp;https://business.apple.com/#main/appsandbooks Click in the search menu box, change the Type to \u0026#8220;Mac\u0026#8221; and search for \u0026#8220;Microsoft\u0026#8221;. Select the Application that you want to assign licenses. Assign the Application to your organisation and enter the number of licenses that you need. Since these apps have no cost, it makes sense to enter more licenses than you will need. Once you have entered the values, click\u0026nbsp;Get. The Application will temporarily show as Processing. Repeat the process for the other applications that you intend to use. Open Intune admin portal\u0026nbsp;and select\u0026nbsp;Tenant Administration\u0026nbsp;\u0026gt;\u0026nbsp;Connectors and tokens\u0026nbsp;\u0026gt;\u0026nbsp;Apple VPP Tokens. Select the Token you want to sync and click\u0026nbsp;Sync\u0026nbsp;in the ellipsis menu. In the Intune admin portal, navigate to\u0026nbsp;Apps\u0026nbsp;\u0026gt;\u0026nbsp;macOS, filter for unassigned apps, and then type \u0026#8220;Microsoft\u0026#8221; into the search bar. Select each app you wish to deploy and assign it to an Azure AD group. Deploying Microsoft 365 Apps for Mac via the Microsoft Content Delivery Network (Recommended way) This mechanism is supported natively by Intune and is as simple as checking a box and providing a group of users to deploy it. Those users will receive the entire Microsoft 365 Apps (which includes Teams and the Microsoft Auto update tool).\nOpen Intune admin portal, select\u0026nbsp;Apps\u0026nbsp;\u0026gt;\u0026nbsp;macOS\u0026nbsp;\u0026gt;\u0026nbsp;Add Under Select \u0026#8220;App Type\u0026#8221; choose\u0026nbsp;Microsoft 365 Apps\u0026nbsp;\u0026gt;\u0026nbsp;macOS Review the apps and add as Required\u0026nbsp;apps to the appropriate device group. Deploying Microsoft 365 Apps for Mac via the Intune Scripting Agent for Mac This approach uses the\u0026nbsp;Intune scripting agent\u0026nbsp;to download and install the Office suite or individual apps. You can download the scripts from Microsoft GitHub Repo:\nDeploy entire Office Suite Deploy individual Office Suite apps These two scripts do the same thing. Once deployed onto the Mac, they attempt to download the installer package and install it. Download a copy of our sample file\u0026nbsp;installOfficeSuiteIndividualApps.sh\u0026nbsp;and save it to your device. Open the file in your text editor of choice and modify the AppsToInstall array only to include Outlook, Word, PowerPoint and OneDrive. Mark the script as executable by opening a Terminal session and using the chmod +x command. Open the\u0026nbsp;Intune admin portal and\u0026nbsp;navigate to Devices\u0026nbsp;\u0026gt;\u0026nbsp;macOS\u0026nbsp;\u0026gt;\u0026nbsp;Shell Scripts\u0026nbsp;\u0026gt;\u0026nbsp;Add Enter a\u0026nbsp;Name and Description\u0026nbsp;and click\u0026nbsp;Next. Click the file browse UI in the Upload script dialog and select the saved file. Run script as signed-in user = No Hide script notifications on device = Not configured Script frequency = Not configured Set the Max number of retries to 3, Run and leave the rest as not configured Assign the script to the device group. The Intune script agent runs on an 8hr check-in cycle but can be manually triggered by the end user.\nOpen the Company Portal app (sign in if prompted). Select the device you are using. Click\u0026nbsp;Check Settings\u0026nbsp;under the ellipses menu. There are no right and wrong with these three approaches, and each is applicable in certain circumstances. However, the recommended way to deploy M365 apps to your Macs is by using the CDN approach, as it provides the best mixture of complexity and flexibility and is the easiest to support for most scenarios.\nSummary With this, I will end the series as we have configured all the policies and profiles required for enrolling and managing macOS devices with Intune. We have also configured Microsoft Edge and M365 apps as required apps to make your users productive immediately after device provisioning.\nI hope this will help you to manage the Macs more effectively.\nKeep learning and stay #intuneinspired.\n","externalUrl":null,"permalink":"/posts/macos-management-with-intune-part-iv/","section":"Posts","summary":"Overview Welcome to the next part of the macOS management series.","title":"macOS Management with Intune - Part IV","type":"posts"},{"content":"Overview macOS is the operating system that powers every MacBook. As per Apple,it lets you do things you can't do with other computers. Yeah, it's a never ending argument but not let's get into it and get those Macs managed with Intune.\nAlthough most laptops/desktops we manage daily are PCs, there will still be a few Macs in your inventory that you want to manage. With Microsoft Intune, you can easily streamline device management for your macOS devices.\nOver the coming days, we will explore all the possibilities of enrolling personal and company-owned MacBooks with industry-standard policies; restrictions. Let's get started, then.\nThings to Consider Before Enrolling macOS in Intune A few prerequisites must be met before any Apple device can be enrolled in Intune. I have covered them in my previous posts - but let's revisit them again.\nDevices purchased in Apple School Manager or Apple's Automated Device EnrollmentA list of serial numbers or a purchase order number. Intune configured MDM authority.Apple MDM Push certificate After you enable enrollment, you can also enrol user-owned macOS devices as BYOD in Intune.\nCompany-owned macOS devices\nIntune supports the following enrollment methods for company-owned macOS devices\n1. Automated Device Enrollment (ADE)\n2. Device Enrollment Manager (DEM)\n3. Direct Enrollment\nUser-approved enrollment\nAll Mac enrollments in Intune are considered user-approved. User-approved enrollment lets you manage macOS devices that aren't part of Apple Business Manager and provides the same level of controlas supervised macOS. Intune automatically turns on supervision for user-approved devices. The only major difference is that the user signs in to the Company Portal app to initiate enrollment.\nApple MDM push certificate You need an Apple MDM Push certificate to manage your iOS/iPadOS and macOS devices in Microsoft Intune. This token enables devices to enrol via Intune Comp Portal or ADE/ASM/AC2. Sign in to Intune Portal, choose Devices \u003e Enroll devices \u003e Apple enrollment \u003e Apple MDM Push Certificate, and follow these steps:\nSelect I agree to give Microsoft permission to send data to Apple. Select Download your CSR to download and save the file locally. The file is used to request a trust relationship certificate from the Apple Push Certificates Portal. Select Create your MDM push Certificate to the Apple Push Certificates Portal and sign in with your organization id. (Please use a corporate id as your Apple ID, preferably, it should be a service account. Avoid using your personal Apple ID. Select Create a Certificate. Read and agree to the terms and conditions. Then select Accept. Select Choose File and select the CSR file you downloaded in Intune. Select Upload. On the confirmation page, select Download. The certificate file (.pem) downloads to your device. Save this file as we will upload it in Intune. Return to the admin center and enter your Apple ID as a reminder for when you need to renew the certificate. Browse to your Apple MDM push certificate to upload. Select Upload to finish configuring the MDM push certificate. \u0026lt;h2\u0026gt;\u0026lt;strong\u0026gt;Create and Upload the Apple Automated Device Enrollment token\u0026lt;/strong\u0026gt;\u0026lt;/h2\u0026gt; So the pre-requisite is done, but before you can enrol macOS devices, you would need an Apple Server Token (.p7m) file from Apple. This token syncs information from Intune to ADE devices that your corporation owns. It also allows Intune to assign enrollment profiles to Apple and to assign devices to those profiles.\nFollow the steps below to create \u0026 upload the ADE token:\nIn Intune portal, select Devices \u003e macOS \u003e macOS enrollment \u003e Enrollment Program Tokens \u003e Add. Select Download the Intune public key certificate required to create the token. This step downloads and saves the encryption key (.pem) file locally. The .pem file requests a trust relationship certificate from the Apple Business Manager portal. Click on Create a token via Apple Business Manager to open the Apple Business Manager portal for creating your ADE token (MDM server). Sign in with your company’s Apple ID in Apple Business Manager. In Apple Business Manager, click your account name at the bottom of the sidebar, then choose Preferences from the pop-up menu\n. Upload the public key you downloaded from Intune in step 2. You can type the server name to identify your MDM tenant quickly; After you save the MDM server, select it and download the token (.p7m file). You\u0026rsquo;ll be informed that download a new server token will reset any existing tokens. This is OK since we are creating a new connection so click the Download Server Token button.\nNow, back to Intune portal – Step 4. Upload the token and click Next and then save.\u0026nbsp; Assign devices to the Apple token (MDM server) In\u0026nbsp;Apple Business Manager\u0026nbsp;\u0026gt;\u0026nbsp;Devices, select the devices you want to assign to this token. You can also choose multiple devices simultaneously or define that all devices are, by default, assigned to this token.Edit device management and select the MDM server you just added.\u0026nbsp; Create an Apple Enrollment Profile Once you\u0026#8217;ve installed your token, the next step is creating an enrollment profile for devices. A device enrollment profile defines the settings that will be applied to the devices in this profile.\nIn the\u0026nbsp;Intune portal, choose\u0026nbsp;Devices\u0026nbsp;\u0026gt;\u0026nbsp;macOS\u0026nbsp;\u0026gt;\u0026nbsp;macOS Enrollment\u0026nbsp;\u0026gt;\u0026nbsp;Enrollment program tokens. Select a token, choose\u0026nbsp;Profiles, and then choose to\u0026nbsp;Create profile\u0026nbsp;\u0026gt;\u0026nbsp;macOS. Provide a\u0026nbsp;Name\u0026nbsp;and\u0026nbsp;Description\u0026nbsp;for the profile (These details will not be visible to users) and click\u0026nbsp;Next. In the management settings page, select “Enroll with User Affinity”,\u0026nbsp;as we will use this profile to enrol devices associated with users. As we selected\u0026nbsp;Enroll with User Affinity\u0026nbsp;for the\u0026nbsp;User Affinity\u0026nbsp;field and chose the\u0026nbsp;Setup Assistant with modern authentication as the authentication method. The advantage of using modern authentication with setup assistance is that until \u0026amp; unless the user signs in to the Company Portal using his/her Azure AD credentials, the device:\nWon’t be fully registered with Azure AD.Won’t show up in the user’s device list in the Azure AD portal.Won’t have access to resources protected by conditional access.Won’t be evaluated for device compliance.Will be redirected to the Company Portal from other apps if the user tries to open any managed applications that are protected by conditional access. With locked enrollment, you make the device more secure as it disables macOS settings that allow the management profile to be removed from the\u0026nbsp;System Preferences\u0026nbsp;menu or through the\u0026nbsp;Terminal. After device enrollment, the user cannot change this setting without wiping the device.\nOn the\u0026nbsp;Setup Assistant\u0026nbsp;page, update settings for “Department” \u0026amp; “Department Phone\u0026nbsp;Number” and choose to show or hide the Setup Assistant screens on the device when the user sets it up. Select\u0026nbsp;Next\u0026nbsp;to go to Review + create. To save the profile, choose to\u0026nbsp;Create. Sync managed devices\nNow that Intune has permission to manage your devices, we have to synchronize Intune with Apple to see your managed devices in Intune portal.\nSync managed devices\nNow that Intune has permission to manage your devices, we have to synchronize Intune with Apple to see your managed devices in Intune portal.\nWe have everything in place. Should we now distribute the devices to users? No..wait! This was just the initial part; before you roll out any device to your end users, ensure compliance policies, restrictions \u0026amp; mandatory apps are configured in Intune. So, let us move to the next part of the series with configuring compliance policies \u0026amp; enforcing restrictions and pushing the mandatory apps to the users/devices. Stay In(tuned) 👩‍💻👩‍💻 and be #intuneinspired\n","externalUrl":null,"permalink":"/posts/macos-management-with-intune-the-prologue/","section":"Posts","summary":"Overview macOS is the operating system that powers every MacBook.","title":"macOS Management with Intune - The Prologue","type":"posts"},{"content":" Overview Welcome to part three of the macOS management series, wherein I will help you with understanding the different macOS settings that should be managed with compliance policies \u0026amp; system preferences. And then will cover some required device restrictions also.\nCompliance Policy Using the compliance policies in Microsoft Intune, you can ensure that only trusted users from compliant macOS devices can access your company resources. I will not go through the steps to create the compliance policy as it's a simple, straightforward configuration and is already available on numerous blog posts. Many a time, I have seen that we follow the steps in these guides and configure the policies by simply copying the steps from these guides.\nSo, If you are the one who will manage these endpoints, then you should know: what are you configuring? Is the policy needed in your environment? What will be it's impact? Let's get started then by understanding the components in macOS compliance policies.\nSystem Integrity Protection The first policy to configure is System Integrity Protection (SIP). SIP in macOS protects the entire system by preventing unauthorised code execution. Apple\u0026#8217;s system is smart enough to authorise apps that users download from the App Store. If you allow the users to download the apps from trusted developers, the system also authorizes them as the developer will notarize them. When you enable this setting in the compliance policy, OS will block the launching of all other apps. Failure to enable SIP leaves your computer vulnerable to malicious code.\nMinimum / Maximum OS Version You can enforce minimum and maximum OS version requirements for corporate macOS devices. When a device fails to comply with the configured versions, it is reported as non-compliant. Based on the conditions you have configured in conditional access, the device won\u0026#8217;t be allowed to access organization resources until the device is compliant or a rule changes to allow the OS version.\nIf you want stricter controls, you can also enforce settings for specific build numbers that you want to be enforced as the minimum allowed. Password Settings Next is enforcing the password policy. You should configure this policy to ensure a password is required to access and use Mac that is enrolled in Intune. This policy uses the Passcode payload, and when the payload is installed on the device, users have 60 minutes to enter a password. If users don’t do so within that time, the payload forces them to enter a password using the specified settings. The settings available for the passcode payload are:\nSetting Description\nGatekeeper macOS includes a security technology called Gatekeeper, which helps to ensure that only trusted software runs on your Mac. When an end user downloads and opens an app, a plug-in, or an installer package from outside the App Store, Gatekeeper verifies that the software is from an identified developer, is notarized by Apple to be free of known malicious content, and hasn’t been altered. Gatekeeper also requests user approval before opening downloaded software for the first time to ensure the user hasn’t been tricked into running executable code they believed to be a data file.\nBy default, Gatekeeper helps ensure that all downloaded software has been signed by the App Store or signed by a registered developer and notarized by Apple. As a standard practice, you can allow launching the apps downloaded from the App store and identified developers.\nStealth Mode Enabling \u0026#8220;stealth mode” makes it more difficult for hackers and malware to find your Mac. When stealth mode is on, your Mac doesn’t respond to either “ping” requests or connection attempts from a closed TCP or UDP network. However, it will respond to incoming requests from known apps.\nBlock Incoming Connections ⚡💣 This can block all connections to your mac devices. If you are using then make sure you allow the apps in firewall policy. Blocking all incoming connections on the firewall will protect your Mac from unwanted contact initiated by other computers when connected to the internet or a private network. However, your Mac can still allow access through the firewall for some services and apps. For example:\nIf users turn on a sharing service, such as file sharing, macOS will open a specific port for the service to communicate through. An app or service on another system can request access through the firewall, or it might have a trusted certificate and be allowed access. You can further configure it in firewall settings to allow or restrict certain apps.\nWith all the required info now, this is how your compliance policy should look like:\nDevice Restrictions Now, we move to the next part with configuring restrictions, and I will use the settings catalogue for them:\nSoftware Update Policies Enable Auto Update\nThis enforces the \u0026#8220;Automatically check for updates\u0026#8221; payload, and the macOS will check for the updates in the background for new malware definition files from Apple for XProtect and Gatekeeper. Enable Download New Updates When Available\nThis ensures that updates happen on time and the system is not exposed to additional risk. Enable Installation of App Update\nThis makes sure that the software is patched automatically. Enable System Data Files and Security Updates\nThis policy ensures that system patches are applied on time and reduces the risk of vulnerabilities being exploited. Software Update Deferment Is Less Than or Equal to 30 Days\nThis ensures you get time to test the major OS upgrades before rolling them to all users. Ensure Standard naming patterns avoid collisions and mitigate risk for computer users.\nSystem Preferences Below is a list of standard configurations you can configure for your company-owned macOS devices.\nEnable \u0026#8220;Bluetooth\u0026#8221; Status in Menu Bar Enable \u0026#8220;Wi-Fi\u0026#8221; status in Menu Bar Enable \u0026#8220;Set time and date automatically\u0026#8220; Enforce a corporate Desktop \u0026amp; Screen Saver on all macOS devices Make sure that Screen Saver Corners are secure Enable Close View Hotkeys for securing screen saver 📢⚡Setting a hot corner to disable the screen saver poses a potential security risk since an unauthorized person could use this to bypass the login screen and gain to the system. Block AirDrop on all corporate-owned macOS devices 📢⚡AirDrop can allow malicious files to be downloaded from unknown sources. Security \u0026amp; Privacy Below is a list of standard restrictions you can configure for your company-owned macOS devices.\nEnsure FileVault Is Enabled (I will cover FileVault in a dedicated post soon!) Ensure Firewall Is Enabled Ensure Firewall Stealth Mode Is Enabled Ensure Location Services Are Enabled Ensure Sending Diagnostic, and Usage Data to Apple Is Disabled Ensure Limit Ad Tracking Is Enabled Ensure Gatekeeper Is Enabled Ensure an Administrator Password Is Required to Access System-Wide Preferences Disable iCloud Keychain sync Disallow iCloud Drive sync Ensure iCloud Drive Document, and Desktop Sync Is Disabled Ensure Backup Automatically is Enabled\nEnsure Guest Accounts Is Disabled \u0026amp; users\u0026#8217; Accounts Do Not Have a Password Hint Ensure the \u0026#8220;root\u0026#8221; Account Is Disabled Audit Software Inventory Stay tuned for the next part, where I will cover app deployment using shell scripts. ","externalUrl":null,"permalink":"/posts/macos-management-with-intune-part-iii/","section":"Posts","summary":"Overview Welcome to part three of the macOS management series, wherein I will help you with understanding the different macOS settings that should be managed with compliance policies \u0026amp; system preferences.","title":"macOS Management with Intune – Part III","type":"posts"},{"content":"The latest version of iOS/iPadOS 16.4.1 (a) and macOS 13.3.1 (a) marks a significant change in how Apple releases updates for the OS updates. It is the first time that Rapid Security Response (RSR) has been included in the OS for iPhones, iPads and macOS. These latest updates come with a new feature called Rapid Security Response. This mechanism enables faster delivery of security updates to devices, allowing more frequent and timely fixes to security vulnerabilities. RSRs are included in the ensuing minor updates (not upgrades), and on a Mac, updated content appears on the Preboot volume.\nThere was a lot of excitement surrounding the launch of the RSR from Apple after its initial announcement; however, the actual release was fraught with difficulties and unforeseen challenges, resulting in a tumultuous experience for all involved. Here are a few of them to list:\nA completely new naming convention for OS.Compliance policies in Microsoft Intune are not ready yet to adapt to the new naming convention.Issues with rules \u0026amp; policies configured in Microsoft Defender for Endpoint.Conditional Access Policies caused issues due to new iOS/iPadOS or macOS build numbers.To begin with, it is essential to understand the new updates and how they can be managed on supervised devices. It is crucial to know the install behaviour and how to control it for the best results.\nOverview:Rapid Security Response, aka RSR, are released by Apple to deliver critical security updates between software upgrades — for example, improvements to the Safari web browser, the WebKit framework stack, or other critical system libraries. They may also be used to mitigate some security issues more quickly, such as issues that might have been exploited or reported to exist \"in the wild.\"\nNew Rapid Security Responses are delivered only for the latest version of iOS, iPadOS and macOS — beginning with iOS 16.4.1, iPadOS 16.4.1, and macOS 13.3.1.I have attempted to break down the information into separate points to fully understand the rapid security updates.\nRapid Security Responses that are intended for the operating system require the device to restart. If enabled, these responses can happen automatically without requiring permission from the user. (If the response is not for OS) Once the device requests the Rapid Security Response update, it will be downloaded; it only gives users a 10-second window to click \"Not Now\".The update takes approximately 5-10 mins (depending on your internet connection) from start to restart finish.The update download is around 85MB, and the installation takes a bit longer, but the restart is relatively quick.On macOS, the updated operating system content may be made available to Safari and its associated processes with just a relaunch of those processes. However, a restart is required to make this content broadly available to the rest of the operating system.On iOS \u0026amp; iPad OS, it may need to restart enterprise applications if they were being used in the foreground. So it may lead to data loss if not handled properly.Users, by default, have the option to uninstall, i.e. remove the responses.Rapid Security Responses don’t adhere to the managed software update delay.If you have enforced a software deferral policy from Microsoft Intune, then the response is also effectively delayed because they apply only to the latest minor operating system version.Now, let's review the process at the device level in more detail:\nSecurity Response available to the deviceDevice requests for downloading the Security ResponseThe device starts receiving the response from Apple Servers10-second window to click \"Not Now\"The device verifies the update and prepares for restart.The device restarts, and the latest response is installed.Users can remove the response by navigating to device Settings-\u0026gt;About.Manage Rapid Security Response with MDMWhen managing supervised devices, you have multiple options to modify settings related to rapid security response. These options ensure that mobile devices are secure and protected from potential threats. Let's look at all the possible approaches to handling Rapid Security Response policies.\nApple provides the following restriction keys to be used on supervised iPhone and iPad devices for managing the responses:\nallowRapidSecurityResponseInstallationallowRapidSecurityResponseRemovalThe allowRapidSecurityResponseRemoval restriction key can block or allow a user to remove responses from the device.Setting CriticalUpdateInstall to \"true\" enables rapid security response in macOS.Device Info and AvailableOSUpdate queries can be used for reporting the status of Rapid Security Response to Microsoft Intune.allowRapidSecurityResponseInstallation restriction key allows admins to disable Rapid Security Response, which is enabled by default.Manage RSR using Settings CatalogThe settings catalog lists all the settings you can configure and all in one place. This feature simplifies how you create a policy and how you see all the available settings. Follow the below steps to configure the policy for responses:\nSign in to the Microsoft Intune admin center.Navigate to Devices \u0026gt; iOS/iPadOS devices \u0026gt;Create Profile \u0026gt; Settings Catalog \u0026gt; Create.Enter a descriptive name for the profile and click Next.Search for \"Rapid\", and select both options under Restrictions.If you are not ready to install Rapid Security Response in your organization, then toggle the \"Installation\" option to \"False\". Then Rapid Security Response will be disabled for users. This means the RSR will not be visible on the end user's devices. This is not recommeded, as it will leave the device vunerable to threats!Response installation disabledTo block users from removing the security response, toggle the \"Removal\" option to \"False\". When enforced, the users will not see any option to remove the installed update. Response removal is disabled.Push the policy to your test devices first. Review the effects and, when ready, go for a production rollout. Manage RSR using Custom PolicyUsing Microsoft Intune, you can also add or create custom settings for your iOS/iPadOS devices using \"custom profiles\". There are two ways to get custom settings into Intune:\nApple ConfiguratorApple Profile ManagerHere is the custom profile I am using with Microsoft Intune to manage Rapid Security Response:\n\u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;allowRapidSecurityResponseInstallation\u0026lt;/key\u0026gt; \u0026lt;true /\u0026gt; \u0026lt;key\u0026gt;allowRapidSecurityResponseRemoval\u0026lt;/key\u0026gt; \u0026lt;false /\u0026gt; \u0026lt;key\u0026gt;PayloadDisplayName\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;iOS 16 Restrictions\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadDescription\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;Restrictions\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadOrganization\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;Intune-IRL\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadType\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;com.apple.applicationaccess\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadUUID\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;336123456-4E5D-BCE5\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadVersion\u0026lt;/key\u0026gt; \u0026lt;integer\u0026gt;1\u0026lt;/integer\u0026gt; \u0026lt;key\u0026gt;PayloadIdentifier\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;com.apple.applicationaccess.336123456-E41D-4E5D-BCE5\u0026lt;/string\u0026gt; \u0026lt;/dict\u0026gt;Custom Profile for managing security responseCreate a custom profile in Intune and upload the .mobileconfig or .xml file created in the previous step.Upload the custom mobile config file.Push the policy to your test devices first. Review the effects and, when ready, go for a production rollout. Looking ForwardAllowing major build upgrades on the managed device's without thorough testing and user approval can lead to many adverse outcomes, such as severe disruptions in business applications, unsatisfactory user experience, and significant financial loss. Therefore, exercising utmost caution and diligence is imperative when upgrading operating systems. To avoid this, responses are tailored to the minor version of the OS and provided between major updates, ensuring a smooth and seamless experience for the user. However, it seems that the release of these Rapid Security Response updates was too early. MDM systems still need to tweak a few configurations in the back end before these responses can be rolled out at the enterprise level. Microsoft Intune Support team have also released an advisory regarding the same detailing the impact of these new updates.\nNotification from MicrosoftAt the time of writing this article and as per my testing, the following configurations are impacted:\nAdmins can’t create new compliance policies to check for the new iOS update with an “(a)” added to the version string. Existing policy checks are unaffected.Admins can’t create a policy to block conditional launches based on OS version with the character “(a)” for Mobile Application Management (MAM), is unable to check for the new version and can't validate whether an application can launch or not.Enrollment restriction policies may not work as intended with non-numerical character versions for Apple products.Reports with build-specific values will report OS without the “(a)”.For Mobile Device Management (MDM), admins can use Intune update controls to set the required version to the latest to get the security update.Thank you for being with me on this article for configuring the policies for the all-new Rapid Security Response updates. I hope it was helpful and that you will have better control on managing Apple Operating System Updates.\n","externalUrl":null,"permalink":"/posts/rapid-security-response/","section":"Posts","summary":"The latest version of iOS/iPadOS 16.","title":"Managing Rapid Security Response on Apple Devices","type":"posts"},{"content":" Managing devices in an organization are becoming more complex as more and more devices are introduced. And it becomes essential to look for modern solutions that can effectively manage these modern devices, streamline workflows, and lessen the administrative burden. Automating device management is a key feature of any mobile device management (MDM) solution. Automating device management tasks provides organizations with multiple benefits, including:\nImproved operational efficiency Time-saving Improved quality and consistency Increased employee satisfaction Increased customer satisfaction Why Automation? Practically, you cannot automate everything in device management as there will be specific workflows or tasks that either cannot be automated or it could be that you would not like to automate them. The most crucial challenge, then, is how to differentiate between jobs that can be automated and those that are best left to MDM admins. To answer this, as an MDM admin, you need to filter out the following:\nThe repetitive tasks Time-consuming tasks Tasks with a high risk of human errors Generally, more than one team is involved. Rule-based tasks Finding the ideal process to automate might be difficult because it must first satisfy a number of conditions. However, to ensure streamlined \u0026amp; automated user-app-device management, you must select and automate the right task!\nScope of this blog It is challenging to cover all use cases in this article because Intune can now manage SIX different types of device platforms, and several device types are inside each. So I\u0026#8217;ll go over a few typical device-user-app management activities that are simple to execute, yield instant advantages, and are widely used. I have tried to scope them by type of tasks. Let\u0026#8217;s get started, then!(Apologies to the MEM community experts if I have missed mentioning your blogs/article)\nDevice Provisioning The Mobile Device Management lifecycle starts with device provisioning. If you are provisioning \u0026amp; deploying corporate devices daily without Zero-Touch, then this would be the first task you should automate. Depending on the type of device/platform you are provisioning, the provisioning method and automation also differ. Intune currently support zero-touch provisioning for the following platforms:\nWindows 10/11- Autopilot iOS, iPad OS, Apple TV OS \u0026amp; macOS \u0026#8211; Apple Device Enrollment Program Android Enterprise \u0026#8211; Samsung Knox Mobile Enrollment Android Enterprise \u0026#8211; Android Zero Touch Deployment What is Zero-Touch provisioning? Zero-touch provisioning is a method of setting up devices that automatically configure the device using certain inbuilt/custom features. Zero-touch provisioning helps IT teams quickly deploy corporate devices in a large-scale environment, eliminating most of the manual labour involved with adding provisioning and managing them.\nZero-touch provisioning is also used to automate the system updating process. You can also use your own custom scripts to pre-configure the devices so that they can be enrolled and managed through your device management platforms.\nPlatform \u0026#8211; Windows Windows Autopilot is a cloud service provided by Microsoft that makes it easier for device management admins to provision Windows 10/11 devices on the go. With Windows Autopilot, administrators can avoid building custom images for each device and maintain them. With each new Microsoft update, admins must update the images and start the process repeatedly. With Windows Autopilot, administrators can instead automatically provision the devices with the necessary settings and configurations.\nOne of the most useful features is customizing the OOBE, which is the setup wizard, wherein, for example, you can restrict the user from being a local admin, enable self-deployment mode or even provision the machine with a corporate nomenclature. Administrators can remotely reset the devices and re-deploy them to another user using the Autopilot reset option. The device is ready for you to use right away. You need to connect to the internet, and it will be ready for you!\nBulk provisioning can be automated in a number of ways, including through custom connectors, PowerShell, Graph, Power Automate, PowerApps, and Logic Apps. If you look for these, you can easily locate the information on blogs written by community experts. I\u0026#8217;ve provided links to a couple of them below to save you time:\nAutopilot \u0026#8211; Call4Cloud Automating the Windows Autopilot device hash import and profile assignment process – Out of Office Hours (oofhours.com) Monitoring Intune Enrollment Limits \u0026#8211; Andrew Taylor (andrewstaylor.com) Automation of gathering and importing Windows Autopilot information \u0026#8211; MSEndpointMgr Windows Autopilot lifecycle automation with Logic Apps | Peter Klapwijk \u0026#8211; In The Cloud 24-7 (inthecloud247.com) Autopilot Prestager – A Power Automate for staging Autopilot devices using an in-house inventory database. (portaldotjay.com) Azure Logic App \u0026#8211; Import device to Autopilot \u0026#8211; Eldar Borge Automation of gathering and importing Windows Autopilot information – Modern IT – Cloud – Workplace (oliverkieselbach.com) Intune automation enlightenment \u0026#8211; Azure Logic App + Graph API + Managed Identity (oceanleaf.ch) PowerShell + Data Factory + Logic App = Autopilot Hardware Hashes sent to you in Teams \u0026#8211; SMBtotheCloud Manage Windows Autopilot with PowerShell | Syst \u0026amp; Deploy (systanddeploy.com) Platform \u0026#8211; iOS, iPad OS, TV OS \u0026amp; macOS Apple devices can be handed out to employees directly and used right out of the box with Apple Business Manager without requiring manual configuration. Additionally, thanks to flexible deployment models for all Apple platforms, as an IT admin, you can provide workers with the appropriate apps for the job more quickly than before.\nApple Business Manager is a web-based portal for IT administrators to deploy iPhone, iPad, iPod touch, Apple TV, and Mac, all from one place. Working seamlessly with a mobile device management solution, Apple Business Manager makes it easy to automate device deployment, purchase apps, distribute\ncontent, and create Managed Apple IDs for employees. With Apple Business Manager, every iPhone, iPad, and Mac can be set up and configured automatically—eliminating the need for IT teams to handle each device individually. IT can also purchase and distribute apps for employees and enable employees to use Apple services with a Managed Apple ID.\nSome the blogs to refer:\nApple Automated Device Enrollment profile duplicator – Mobility, Management, \u0026amp; Security (uem4all.com) Company-Owned iOS Device -Automated Device Enrollment – Part I \u0026#8211; Intune \u0026#8211; In Real Life (intuneirl.com) Intune: How to MDM enroll iOS/iPadOS devices | Matt Soseman\u0026#8217;s Blog (wordpress.com) Intune: Managing iOS devices | Katy\u0026#8217;s Tech Blog (katystech.blog) iOS User enrollment using Intune \u0026#8211; VMLabBlog.com macOS Management with Intune – The Prologue \u0026#8211; (intuneirl.com) Apple iOS/iPadOS Automated Device Enrollment (ADE) to MEM/Intune (hmaslowski.com) Platform \u0026#8211; Android Enterprise Similar to how you use Apple DEP to enrol large numbers of Apple devices, you can use Android Zero-Touch Enrollment for bulk provisioning Android devices. Android Zero-Touch, commonly called Android ZTE, allows IT admin to bulk deploy corporate-owned devices without configuring each one individually. When the devices are switched on, and the initial network connectivity is successfully established, they are silently added to the MDM. Samsung Knox Mobile Enrollment, commonly referred to as Samsung KME, helps you set up Intune for enrolling supported Samsung Enterprise Android devices. Using Intune with Samsung KME, you can enrol many company-owned Android devices when end users turn on their devices for the first time and connect to a Wi-Fi or cellular network. Also, devices can be enrolled using Bluetooth or NFC when using the Knox Deployment App. Here are a few noteworthy blogs to refer:\nIntune – Knox Platform for Enterprise (OEMConfig) claim your 2 year free license for Premium features – TimmyIT.com Setup Samsung Knox Mobile Enrollment to enroll Android devices in Microsoft Intune | Peter Klapwijk \u0026#8211; In The Cloud 24-7 (inthecloud247.com) Samsung\u0026#8217;s KME with Android Enterprise enrollment to MEM/Intune (hmaslowski.com) Using Samsung Knox Mobile Enrollment with Microsoft Intune – All about Microsoft Endpoint Manager (petervanderwoude.nl) How to setup Samsung Knox Mobile Enrollment with Microsoft Intune – robinhobo.com Bring Android To Work – Manage Android Devices With Intune \u0026#8211; Intune \u0026#8211; In Real Life (intuneirl.com) App Management Deploying apps is also one of the essential device management operations in a managed environment. A manual process of assigning and configuring the apps for each new device is not very effective. You may easily set a dynamic policy with the apps to be installed using an MDM like Intune or can try to automate the app deployment.\nAgain, depending upon the platform to be managed, the app type and distribution mechanism differ. For example, if it\u0026#8217;s a public store app, then for Windows, you have the new Winget-based Microsoft Store; for Android, it\u0026#8217;s Enterprise Google Play Store; similarly, for Apple devices, you have VPP apps. And the list of some of the blogs to get started with automating app deployment:\nPackaging and publishing Intune apps using Winget and Azure Devops CI/CD Pipeline \u0026#8211; packaging as code \u0026#8211; Andrew Taylor (andrewstaylor.com) win32 App Deployment automated | scloud Updated: How To Package And Test Apps Using Rimo3 \u0026#8211; techlab.blog Managed Modern Endpoint Blog | Intune (smsagent.blog) Quick and easy application Inventory with Intune \u0026#8211; Andrew Taylor (andrewstaylor.com) Intune – Modern IT – Cloud – Workplace (oliverkieselbach.com) Deploy Windows Store Apps via Intune – Modern Device Management (jannikreinhard.com) Automating 3rd Party application deployment in Intune with PatchMyPc – 365 by Thijs Microsoft Store Intune Integration \u0026#8211; Graph Commands \u0026#8211; Andrew Taylor (andrewstaylor.com) Automate Win32App Deployments to Intune with PowerShell (call4cloud.nl) Automate your day-to-day Intune tasks BAU, or Business As Usual, happens after the devices have been enrolled/registered and distributed to the end users. The end user\u0026#8217;s devices must be supported, and you must carry out specific tasks, deploy apps, and create and publish reports. Most tasks are time-consuming and repetitive, making them the ideal candidates for automation. Again, I wouldn\u0026#8217;t want to reinvent the wheel because plenty of blogs and articles can help you comprehend and begin automating these processes. I\u0026#8217;ve included a couple of blogs below for your quick reference:\nIntroducing a simple remote device manager app for Microsoft Intune – All about Microsoft Endpoint Manager (petervanderwoude.nl) olastrom.com \u0026#8211; Remote actions in Endpoint Manager Reset your device with a simple app (burgerhout.org) MMS Intune Management PowerApp Demo Part 1: Creating the PowerAutomate flows | (modernendpoint.com) Power Apps – Mobility, Management, \u0026amp; Security (uem4all.com) Deploy Power App to a Managed Home Screen through MEM – 365 by Thijs How To: Use Logic Apps to Query Intune for Device Information | Greg\u0026#8217;s Systems Management Blog (gregramsey.net) nicolonsky tech Automate Daily Reports for Windows Update Compliance using Logic Apps \u0026#8211; Intune \u0026#8211; In Real Life (intuneirl.com) Device Offboarding Similar to onboarding, offboarding devices or deleting corporate data from corporate or personal devices can also be automated. You can remove the device(s) from enrollment or delete the user from the portal. This eliminates the policies that were related to the user or device. Here are a few blogs to refer to:\nWindows Autopilot lifecycle automation with Logic Apps | Peter Klapwijk \u0026#8211; In The Cloud 24-7 (inthecloud247.com) bulk delete – Mobility, Management, \u0026amp; Security (uem4all.com) Cleanup Windows Autopilot registrations – Modern IT – Cloud – Workplace (oliverkieselbach.com) Bulk Remove Autopilot DisplayName Property (euc365.com) Microsoft Endpoint Manager Intune, Power Automate, and Microsoft Graph – send user notifications after device enrollment – Mobility, Management, \u0026amp; Security (uem4all.com) Using PowerShell with Microsoft Graph to query Intune Devices (byteben.com) Stay Updated There is so much happening in the device management world that it is impossible to catch up on everything. But there are two super newsletters that you should subscribe to be always updated:\nNewsletter Archives \u0026#8211; Daniel Engberg https://andrewstaylor.com/category/newsletter Conclusion The purpose of this blog article was to provide you with a quick overview of how automating your everyday Intune operations may help you tremendously and to prompt you to implement automation so that, as an IT administrator, you can save time and improve your client device management environment.\nAutomating device management becomes necessary as the number of devices you manage increases daily. This is necessary since it will help you in a number of ways, including decreasing repetitive work and increasing productivity.\nThat\u0026#8217;s all for this week. Thank you for reading, and please share your feedback. ","externalUrl":null,"permalink":"/posts/modern-device-management-and-the-need-of-automation/","section":"Posts","summary":"Managing devices in an organization are becoming more complex as more and more devices are introduced.","title":"Modern Device Management and The Need of Automation","type":"posts"},{"content":" This article describes how to enable multi-app kiosk mode on iOS using Intune.\nKiosk mode is a lockdown mechanism that restricts the device to access only the allowed app with restricted access to the remaining functionality of the device. Such devices are used for a specific purpose, such as digital signage and ticket printing, and are traditionally company owned and not associated with any user. The multi-app kiosk mode helps you to allow the device to run only a few applications ensuring that the device is not used for anything other than the apps pushed to it.\nAs per Microsoft, these devices can be configured to run multiple applications in kiosk mode (available only for Android KNOX and Android Enterprise devices) or a single app available for Android and supervised iOS devices. However\nWhat if you still want to configure your iOS/iPad OS devices to run in multi-app kiosk mode?? There is a workaround for it. However, you will not get a single-app kiosk’s exact look and feel. Let’s see how you can achieve it:\nCreate an Apple Enrollment Profile:\nA few months back, I wrote a post with detailed steps and a walkthrough for creating an Apple enrollment profile. For now, we will create a profile for multi-app kiosk devices. Follow the steps below to configure the profile:\nFrom the Microsoft Endpoint Manager portal, navigate to Devices \u003e iOS/iPadOS \u003e iOS/iPadOS enrollment \u003e Enrollment program tokens. Select a token, and then select Profiles.Select Create profile \u003e iOS/iPadOS. Provide a Name and Description for the profile (These details will not be visible to users, and click Next. In the management settings page, select “Enroll without User Affinity,” We will use this profile to enroll devices as multi-app kiosks. For locked enrollment, I would recommend using “Yes” for supervised devices, as it disables iOS/iPadOS settings for removing the management profile from the device. The only option to remove the profile is to wipe it.If you allow users to sync their devices with any computer, select “Allow All” from Sync with the Computer option.Configure naming template or cellular data if required and click Next to proceed.On the Setup Assistant page, update settings for “Department” \u0026 “Department Phone Number”.Next, you can toggle the options to modify the Setup Assistant screens on the device during user setup. Sync managed devices\nNow that Intune has permission to manage your devices, we have to synchronize Intune\nwith Apple to see your managed devices in Intune portal.\nAdd Apps to Devices\nAssign the desired apps to the device group from Intune the conventional way. (Client Apps -\u003e Add App).\nMulti-App Kiosk Mode\nSign in to the Microsoft Endpoint Manager admin center.Select Devices \u003e Configuration profiles \u003e Create profile.Enter the following properties:Platform: Choose the platform as iOS for your devices.Select Device restrictions. Or, select Templates \u003e Device restrictions. Select Create.In Basics, enter the Name and Description for the profile.In the Configurations pane, select “Show or Hide apps,” as illustrated below. In the ‘Visible Apps’ section, you can select multiple apps that will be visible to the user while everything else remains hidden.You can arrange the Dock also on the device to pin the allowed apps there.In Assignments, select the device groups that will receive your profile. This is what your multi-app kiosk device will look like:\nThat’s all for this week. Stay safe and have a nice weekend 🍕🥂🍻\n","externalUrl":null,"permalink":"/posts/multi-app-kiosk-mode-in-ios-ipad-os-2/","section":"Posts","summary":"This article describes how to enable multi-app kiosk mode on iOS using Intune.","title":"Multi-App KIOSK Mode In iOS/iPad OS","type":"posts"},{"content":"","externalUrl":null,"permalink":"/posts/temp-slug-45-2/","section":"Posts","summary":"","title":"Onboard iOS Devices to Microsoft Defender for Endpoint","type":"posts"},{"content":"","externalUrl":null,"permalink":"/posts/temp-slug-45/","section":"Posts","summary":"","title":"Onboard iOS Devices to Microsoft Defender for Endpoint","type":"posts"},{"content":"Welcome to part four of the All-In-One guide to managing Apple devices with Microsoft Intune. Till now, we have discussed how the devices are enrolled in any MDM solution, different types of enrollment, and how to decide between Apple Business Manager or Apple Business Essentials, or Apple School Manager. Here's the link to the first three parts:\nThe need to manage devices and dataGetting Started - Apple Device Enrollment types \u0026amp; MDMDevice Deployment: ABM or ASM, or ABE? (intuneirl.com)OverviewApple Business Manager is a web-based portal that helps IT administrators manage iPhone, iPad, and Mac devices. This portal works with a third-party MDM solution, allowing you to purchase content easily in volume.\nPre-requisitesTo automatically add devices to Apple Business Manager, the following conditions must be met:\nIf the device was purchased directly from Apple, the purchaser must have used an enrolled and verified Apple Customer Number.If the device was purchased directly from a participating Apple Authorized Reseller or a cellular carrier, the device must be linked to that reseller's Reseller Number. The device must have been ordered after March 1, 2011, whether purchased directly from Apple or a participating Apple Authorized Reseller or cellular carrier.Enrollment in ABM is simple and takes only a few minutes. Any business can sign-up for ABM subject to the service terms and conditions. The first thing to get started is registering in D-U-N-S.\nWhat is the \"D-U-N-S\" number?The Data Universal Numbering System, commonly abbreviated as DUNS or D-U-N-S, is a proprietary system developed and managed by Dun \u0026amp; Bradstreet (D\u0026amp;B) that assigns a unique numeric identifier to a “DUNS number” to a single business entity.\nD-U-N-SIt was introduced in the 1960s for credit reporting and is now standard followed worldwide.\nA nine-digit number is assigned to each business entity with a unique, separate, and distinct operation to identify them. The DUNS number is random, and the digits have no apparent significance.\nWhy \"D-U-N-S\" number is required for Apple Services?When an organization decides to buy Apple devices, they must buy Apple Enterprise services to buy \u0026amp; manage these devices. ABM, Apple Developer Portal, etc., requires the organization to have a DUNS number. If an organization wants to distribute apps to different geographical locations, it needs to have ABM subscriptions, and then for enrolling in ABM, you will need a DUNS number.\nD-U-N-S Number will be used to check your organization’s identity and legal entity status as part of our enrollment verification process for joining the Apple Developer Program or the Apple Developer Enterprise Program. The company/business must be recognized as a legal entity (such as a corporation, limited partnership, or limited liability company) to enter into the legal terms and obligations of the Apple Developer Program agreements. It does not allow DBAs, fictitious businesses, trade names, and branches to register for it. Companies and educational institutions must provide a D-U-N-S Number registered to their legal entity.\nSteps for requesting a \"D-U-N-S\" number It could be possible that D\u0026amp;B may have already assigned your organization a free D-U-N-S Number. Before enrolling, look up your organization to see if you have a D-U-N-S Number. If your company is not listed, you can submit your information to Dun \u0026amp; Bradstreet for a free D-U-N-S Number.\nYou’ll be asked for the following information when looking up your organization:\nLegal entity nameHeadquarters addressMailing addressYour work contact informationA D\u0026amp;B representative will contact you directly for more information (such as your business type or the number of employees) as part of their verification process.\nClick or copy the following link to your browser Get a D-U-N-S Number – Establish Your Business – D\u0026amp;B (dnb.com)Select your Primary Reason for D-U-N-S Number Registration from the drop-down menu.Complete the company information sections. You must provide information about your organization, like legal name, address, contact name \u0026amp; title.Review DetailsClick the “Submit” button to complete your request.Once you have completed the entire process, you will receive a confirmation email. It will take 24 to 48 hours to receive your D‐U‐N‐S Number, which you will receive via email for your records.The next step is to get onboarded with Apple Business Manager. So, we continue with logging into ABM. The enrollment process is as below:\nSign-up for ABM Sign in to Apple Business Manager or Apple School Manager.Click \"Enroll Now.\"Enter the information for your organization, like Organization Name, D-U-N-S number, Phone Number, etc.The user signing up for the ABM for the first time by default becomes the first administrator on ABM as they enrol in ABM on behalf of the organization. This administrator should agree to the program and software license agreements of ABM. The initial account administrator can create/give four other users as \"administrators\" in the ABM. Also, these accounts can't be associated with any existing Apple ID or other Apple services.\nApple will review all the information provided and will contact this representative, and they may be asked for additional information by phone or email before the enrollment is approved.\nChoose the location where your organization is registered.Enrollment ReviewOnce your call has been received and Apple confirms your eligibility for Apple Business Manager (ABM), you'll get an email asking you to agree to the Terms and Conditions. Be aware that the link in the email is time-sensitive and will expire after a week. If you don't complete this step within the 7-day timeframe, you'll have to reach out to Apple once more to proceed.\nWhen verified the administrator will be emailed instructions for setting up ABM for the business. A verification code will be sent to your email id and phone number entered when creating the managed ID. Enter the code sent to verify.\nYou will be then asked to create a managed Apple ID. Accept the Terms \u0026amp; Conditions for using Apple Business Manager and you are in!\nABM provisionedUser, Permissions, and Role Management in ABMIn Apple Business Manager, each user is assigned one or multiple roles that outline their capabilities within the system. Some roles even have the authority to oversee other roles. For instance, a user designated as an Administrator has the ability to manage those in Manager or Staff roles.\nIt's worth noting that users holding the Administrator or People Manager roles cannot log in via federated authentication; they are only permitted to oversee the federated authentication process.\nFurthermore, each role is defined by a collection of privileges that apply to all users holding that specific role. Staff roles come with minimal privileges, Manager roles offer more, and those in the Administrator role enjoy the most extensive range of privileges.\nEvery user in ABM must have at least one role, and each role has certain privileges. The below table will help you with a basic idea of the roles available in ABM:\nThe privileges (rights) with roles in ABM are:\nPeople PrivilegesDevice PrivilegesContent PrivilegesStaff PrivilegesBasic PrivilegesAdd a New User in ABMLog in to Apple Business Manager with a user that has an Administrator role.(The user signing up for the ABM for the first time by default becomes the first administrator in ABM).\nClick Users in the left sidebar, click the Add button, enter the required details, and click Save.Create sign-in information for the new user:Sign in to Apple Business Manager and click Users, then search for the newly created user.\nSelect the user from the list and click Create Sign-in to create new sign-in information for the new user.Select how you want to send the information to the user. You can either download the information as a pdf or CSV, or you can e-mail the information to the user.Integrate ABM with IntuneYou need an Apple MDM Push certificate to manage your iOS/iPadOS and macOS devices in Microsoft Intune. This token enables devices to enroll via Intune Comp Portal or ADE/ASM/AC2. Follow the steps below to create the Apple MDM push certificate and upload it to the Intune Portal.\nStep 1. Grant Microsoft permission to send user and device information to AppleSign in to the Intune Admin Center, navigate to Devices \u0026gt; Enrollment \u0026gt; Apple enrollment \u0026gt; Apple MDM Push CertificateSelect I agree. to give Microsoft permission to send data to AppleSelect Download your CSR to download and save the file locally. The file is used to request a trust relationship certificate from the Apple Push Certificates Portal.Step 2: Create Apple Push Notification CertificateAppleSelect Create your MDM push Certificate to the Apple Push Certificates Portal and sign in with your organization ID. 💡Remember to use a corporate ID as your Apple ID, The recommendation\u0026nbsp;is that it should be a service account. Avoid using your personal Apple ID.Select Create a Certificate.Read and agree to the terms and conditions. Then select Accept.Select Choose File and select the CSR file you downloaded in Intune.Select Upload.On the confirmation page, select Download. The certificate file (.pem) downloads to your device. Save this file as we will upload it in Intune.Return to the admin center and enter your Apple ID as a reminder for when you need to renew the certificateBrowse to your Apple MDM push certificate to upload. Select Upload to finish configuring the MDM push certificate.Step 3. Create and Upload Apple Automated Device Enrollment TokenSo the pre-requisite is done, but before you can enroll iOS/iPadOS devices, you would need an Apple Server Token (.p7m) file from Apple. This token syncs information from Intune to ADE devices that your corporation owns. It also allows Intune to assign enrollment profiles to Apple and to assign devices to those profiles.\nFollow the steps below to create \u0026amp; upload the ADE token:\nIn Intune portal, select Devices \u0026gt; iOS/iPadOS \u0026gt; iOS/iPadOS enrollment \u0026gt; Enrollment Program Tokens \u0026gt; AddSelect Download the Intune public key certificate required to create the token. This step downloads and saves the encryption key (.pem) file locally. The .pem file is used to request a trust-relationship certificate from the Apple Business Manager portal.Click on Create a token via Apple Business Manager to open the Apple Business Manager portal for creating your ADE token (MDM server).Sign in with your company’s Apple ID in Apple Business Manager.Click your name at the bottom of the sidebar \u0026gt; Preferences, then click “Add” to add MDM Server.Upload the public key you downloaded from Intune in step 2. You can type the server name to identify your MDM tenant quickly.After you save the MDM server, select it and download the token (.p7m file).Now, back to Intune portal – Step 4. Upload the token and click Next and then save.Step 4: Assign Devices to the Apple Token (Server)In Apple Business Manager \u0026gt; Devices, select the devices you want to assign to this token. You can also choose multiple devices simultaneously or define that all devices are by default assigned to this token.Edit device management and select the MDM server you just added.Summary:With your Apple Business Manager (ABM) instance now set up, you're ready to begin adding devices. You can do this yourself or request your reseller to do it for you. Coming up next, we'll delve into Apple Configurator, focusing not on the standard setup but on automated configurations. ","externalUrl":null,"permalink":"/posts/onboarding-to-abm/","section":"Posts","summary":"Welcome to part four of the All-In-One guide to managing Apple devices with Microsoft Intune.","title":"Onboarding to ABM","type":"posts"},{"content":"The wait is over! After months of anticipation, Platform Single Sign-On (SSO) for macOS with Microsoft Entra ID is finally here and ready to transform your Mac login experience. Ready to Unleash the Power of Platform SSO for macOS?Now that the initial excitement has cooled down a bit, let's get down to the practical aspects. I've split the guide into three sections: Configuration, Verification \u0026amp; Troubleshooting. This blog post will serve as your guide to configure \u0026amp; troubleshoot Platform SSO for macOS with Microsoft Entra ID. I'll guide you through the necessary steps to understand, configure, identify and resolve common issues that may arise during the setup and use of Single Sign-On. We'll explore how to effectively diagnose problems and implement solutions, ensuring a smooth and secure user experience.\nPart I - Demystifying Platform Single Sign-On for macOSLet's ditch the technical jargon for a moment and understand Platform SSO in simpler terms.\u0026nbsp;Imagine it as a\u0026nbsp;master key for your Mac login experience.\nTraditionally,\u0026nbsp;accessing work resources on a Mac meant juggling multiple passwords for different apps and services.Platform SSO eliminates this hassle!\u0026nbsp;It builds upon your existing Microsoft Entra ID infrastructure,\u0026nbsp;allowing users to sign in to their Macs using the same familiar credentials.\nPlatform SSO offers a variety of authentication methods to suit your organization's security needs and user preferences.Here's a breakdown of the available options:\nPassword and encrypted password:\u0026nbsp;This method leverages your existing login credentials.\u0026nbsp;The IdP keeps your local account password in sync,\u0026nbsp;ensuring updates made at the login window or screensaver are reflected.Federated Authentication (Password with WS-Trust):\u0026nbsp;For organizations using federated identity providers,Platform SSO can utilize your existing credentials across different security domains.\u0026nbsp;This eliminates the need for separate logins for various work applications.Passwordless Security with Secure Enclave Key:\u0026nbsp;This innovative method takes security a step further.\u0026nbsp;It utilizes a secure enclave-backed key stored on the user's Mac to authenticate with the IdP.\u0026nbsp;This eliminates the need for passwords altogether,\u0026nbsp;offering enhanced protection against phishing attacks.Smart Card Authentication:\u0026nbsp;For organizations requiring the highest level of security,\u0026nbsp;Platform SSO supports Smart Card authentication.\u0026nbsp;Users can leverage their existing Smart Cards to authenticate with the IdP,\u0026nbsp;adding an extra layer of security to the login process.Platform SSO not only just simplifies logins for macOS users, but its benefits extend even further!\u0026nbsp;Here's how Platform SSO enhances user management and access control:\nOn-Demand User Account Creation:\u0026nbsp;Imagine a new employee starting their first day.\u0026nbsp;Traditionally,\u0026nbsp;setting up a local user account would require IT intervention.\u0026nbsp;Platform SSO eliminates this hassle.\u0026nbsp;It can automatically create new local user accounts on the fly using the user's IdP credentials.\u0026nbsp;This streamlines the onboarding process for new hires.Synchronized Group Memberships:\u0026nbsp;Managing user access to resources often involves group memberships.Platform SSO seamlessly integrates IdP group memberships with macOS groups.\u0026nbsp;This ensures users automatically inherit the appropriate permissions based on their group affiliations within the IdP system.Granular Access Control:\u0026nbsp;Platform SSO empowers IT admins with granular control over user access.\u0026nbsp;You can leverage network accounts for authorization,\u0026nbsp;allowing for precise control over which users can access specific resources.\u0026nbsp;Additionally,\u0026nbsp;groups can also be used to authorize network accounts,\u0026nbsp;providing another layer of flexibility in managing access permissions.In essence,\u0026nbsp;Platform SSO streamlines the login process for users,\u0026nbsp;enhances security for organizations,\u0026nbsp;and eliminates the need for complex directory configurations.\u0026nbsp;It's a win-win for everyone!\nThe Registration Dance: A Step-by-Step LookThis section dives deeper into the technical workings of Platform SSO. Platform SSO relies on a well-defined sequence to register devices and users with the IdP. Here's a breakdown of the steps involved:\nSSO Extension Takes the Lead:\u0026nbsp;The\u0026nbsp;\"Microsoft Enterprise SSO plug-in for Apple devices\"\u0026nbsp;provides single sign-on (SSO) for Microsoft Entra accounts on macOS across all applications. This extension acts as the intermediary,\u0026nbsp;facilitating communication between the device,\u0026nbsp;the user,\u0026nbsp;and the IdP.Device Registration First:\u0026nbsp;The initial step involves registering the device itself with the IdP.\u0026nbsp;The extension achieves this by utilizing the\u0026nbsp;beginDeviceRegistrationUsingLoginManager:options:completion:\u0026nbsp;method.\nExtension Responsibilities:\u0026nbsp;During device registration,\u0026nbsp;the extension shoulders several tasks:Registering the device with the Entra ID.Providing Platform SSO with the necessary login configuration details.Signaling the completion of the process using the completion handler.Silent Registration for Convenience:\u0026nbsp;If a registration token exists within the Device Management configuration profile,Platform SSO attempts a silent registration.\u0026nbsp;This means users wouldn't need to intervene.\u0026nbsp;The extension can leverage this token for device authentication with the IdP,\u0026nbsp;eliminating the need for user prompts.\u0026nbsp;However,\u0026nbsp;if a silent registration fails,the system presents a user interface for manual registration.\nUser Interface Intervention:\u0026nbsp;In scenarios where a user interface is necessary during registration,\u0026nbsp;the extension utilizes the\u0026nbsp;presentRegistrationViewControllerWithCompletion:\u0026nbsp;method on the login manager.\nKey Management:\u0026nbsp;The extension can access signing and encryption keys using the\u0026nbsp;ASAuthorizationProviderExtensionKeyTypeCurrentDeviceSigning\u0026nbsp;and\u0026nbsp;ASAuthorizationProviderExtensionKeyTypeCurrentDeviceEncryption\u0026nbsp;key types,\u0026nbsp;regardless of whether shared keys are employed.\nRegistration Outcomes:\u0026nbsp;Once the process is complete,\u0026nbsp;the extension must inform Platform SSO of the outcome using an\u0026nbsp;ASAuthorizationProviderExtensionRegistrationResult\u0026nbsp;object.\nSuccessful Registration:\u0026nbsp;A successful registration outcome (ASAuthorizationProviderExtensionRegistrationResultSuccess) allows Platform SSO to proceed with user registration.Registration Failure:\u0026nbsp;If registration encounters an issue (ASAuthorizationProviderExtensionRegistrationResultFailed),\u0026nbsp;Platform SSO will automatically attempt to register the user again after a short interval.\u0026nbsp;Users can also manually trigger a registration attempt through the Settings menu.\nPermanent Registration Failure:\u0026nbsp;A permanent failure outcome (ASAuthorizationProviderExtensionRegistrationResultFailedNoRetry) instructs Platform SSO to halt further registration attempts until the configuration or extension itself changes.Important Note:\u0026nbsp;During device registration,\u0026nbsp;SSO extensions operate at a system or role level,\u0026nbsp;independent of specific users.\nNext Steps:\u0026nbsp;The following section will explore the user registration process facilitated by Platform SSO.\u0026nbsp;We'll delve into how SSO extensions interact with the IdP to register users and enable them to leverage Platform SSO immediately.\nRegistering Users for Seamless Logins\u0026nbsp;Following a successful device registration,\u0026nbsp;the SSO extension initiates the user registration process using the\u0026nbsp;beginUserRegistrationUsingLoginManager:userName:authenticationMethod:options:completion:\u0026nbsp;method.\nIf your environment utilizes shared device keys,\u0026nbsp;user registration only occurs for subsequent users on the device.\u0026nbsp;For users created during login,\u0026nbsp;the system may prompt them to initiate registration upon reaching the desktop.\u0026nbsp;User-specific login configurations can be adjusted using the login manager's\u0026nbsp;saveUserLoginConfiguration:error:\u0026nbsp;method.\nOnce user registration is complete,\u0026nbsp;the extension signals this to the completion handler.\u0026nbsp;The system then prompts the user to authenticate using the newly established configuration,\u0026nbsp;allowing them to leverage Platform SSO immediately.\nIf you are utilising password authentication,\u0026nbsp;the system interacts with the key service to provision a new key and bind it to the user account.\u0026nbsp;This strengthens security by offering an additional layer of protection.\nThe Secure Enclave: The Guardian of Your Login CredentialsImagine a vault within your Mac...\u0026nbsp;This vault,\u0026nbsp;known as the Secure Enclave,\u0026nbsp;is a dedicated secure coprocessor chip built into Apple devices.\u0026nbsp;It acts as a secure haven for sensitive information,\u0026nbsp;including passwords,\u0026nbsp;encryption keys,\u0026nbsp;and biometric data used for Touch ID.\nHere's what makes the Secure Enclave special:Microsoft highly recommends this method for its enhanced security. It leverages hardware-bound cryptographic keys stored within the Secure Enclave, a secure chip on Mac devices. This method eliminates the need for Microsoft Entra user accounts to authenticate with apps and websites, offering robust protection against phishing attacks. Secure Enclave boasts several advantages:\nPasswordless Convenience:\u0026nbsp;It meets multi-factor authentication (MFA) requirements without requiring traditional passwords. Think of it as the macOS equivalent of Windows Hello for Business, offering similar functionalities like Conditional Access.Local Account Stays Put:\u0026nbsp;The local account username and password remain unchanged due to Apple's FileVault disk encryption which relies on the local password for unlocking.Reboot and Touch ID:\u0026nbsp;After a device reboot, users might need to enter the local account password initially. However, subsequent unlocks can leverage Touch ID for a smoother experience.Hardware-Backed Security:\u0026nbsp;Upon unlocking, the device acquires a hardware-backed Primary Refresh Token (PRT) for device-wide SSO. This token can even function as a passkey within web browsers using WebAuthN APIs. Additionally, its setup can be initiated using an authentication app for MFA or a Microsoft Temporary Access Pass (TAP). This method also enables the creation and use of Microsoft Entra ID passkeys.When using Platform SSO,\u0026nbsp;your login credentials and any generated authentication tokens are stored within the Secure Enclave.\u0026nbsp;This adds an extra layer of security compared to traditional login methods that might store this information on the main disk of your Mac.\nConfigure PSSO with Microsoft Intune\u0026nbsp;Now that you understand the magic of Platform SSO,\u0026nbsp;let's get down to business!\u0026nbsp;This section will guide you through configuring Platform SSO for your macOS devices using Microsoft Intune.\nPrerequisitesDevices must be macOS 13.0 and newer devices. 💡For best results/end user experience, upgrade the device to macOS 14.xMicrosoft Intune\u0026nbsp;Company Portal app\u0026nbsp;version 5.2404.0 and newer.Supported web browsers:Microsoft EdgeGoogle ChromePlatformSafari💡Before diving into the configuration of Platform SSO on macOS devices using Microsoft Intune,\u0026nbsp;a crucial decision awaits:selecting the authentication method.\u0026nbsp;This choice significantly impacts how users sign in to their devices.Your Authentication Method Options:Secure Enclave (the Champion)Password (Familiar Yet Improved)Smart Card (High Security)Choosing the right authentication method depends on your organization's security needs and user preferences.\nCreate the Platform SSO policy in Intune:To configure the Platform SSO policy, use the following steps to create an\u0026nbsp;Intune settings catalog\u0026nbsp;policy.\nSign in to the\u0026nbsp;Microsoft Intune admin center.Select\u0026nbsp;Devices\u0026nbsp;\u0026gt;\u0026nbsp;Configuration\u0026nbsp;\u0026gt;\u0026nbsp;Create\u0026nbsp;\u0026gt;\u0026nbsp;New policy.Enter the following properties:Platform: Select\u0026nbsp;macOS.Profile type: Select\u0026nbsp;Settings catalog.Select\u0026nbsp;Create.In\u0026nbsp;Basics, enter a descriptive name for the policy. In\u0026nbsp;Configuration settings, select\u0026nbsp;Add settings. In the settings picker, expand\u0026nbsp;Authentication, and select\u0026nbsp;Extensible Single Sign On (SSO):Configure the profile for at the below keys: (these are minimum required settings for PSSO to work)Authentication Method (Deprecated)\u0026nbsp;(only if you are deploying profile to macOS 13.x devices)Extension IdentifierAuthentication Method\u0026nbsp;(macOS 14+)Use Shared Device KeysRegistration TokenAccount Display NameScreen Locked BehaviorTeam IdentifierTypeURLsOnce configured, the profile should look like this:Select the user groups that will receive your profile. 💡Platform SSO policies are user-based policies. Don't assign the platform SSO policy to devices.Platform SSO in Action: A Demo with Password AuthenticationThis section provides a demonstration of Platform SSO using password authentication. PSSO flow:\nLogin with Microsoft Entra ID:\u0026nbsp;With Platform SSO configured for password authentication,\u0026nbsp;the user simply enters their Microsoft Entra ID credentials at the login screen.SSO Magic:\u0026nbsp;Behind the scenes,\u0026nbsp;Platform SSO leverages those credentials to silently authenticate with the IdP (Microsoft Entra) and retrieve an SSO token.Seamless Application Access:\u0026nbsp;Once logged in,\u0026nbsp;the user can access any work applications or websites that support Platform SSO without needing to enter separate login credentials.\u0026nbsp;The SSO token grants them seamless access.Platform SSO in Action: A Demo with Secure EnclaveBuilding upon the previous demonstration,\u0026nbsp;let's explore how Platform SSO with Secure Enclave authentication elevates security even further.\nLogin with Touch ID:\u0026nbsp;In this scenario,\u0026nbsp;the user might not even need to enter a password!\u0026nbsp;\u0026nbsp;They can simply use their fingerprint to unlock the device.Secure Enclave in Action:\u0026nbsp;Behind the scenes,\u0026nbsp;the Secure Enclave chip within the Mac securely stores the user's cryptographic keys.\u0026nbsp;These keys are used for authentication without ever revealing the actual password to the system.Silent Authentication \u0026amp; SSO Token:\u0026nbsp;Platform SSO silently authenticates the user with the IdP (Microsoft Entra) leveraging the keys stored in the Secure Enclave and retrieves an SSO token.Seamless Application Access:\u0026nbsp;As before,\u0026nbsp;the user enjoys seamless access to work applications and websites that support Platform SSO,\u0026nbsp;without needing to enter separate login credentials.Part II - Verifying PSSO for macOSNow that you've grasped the inner workings of Platform SSO and its configuration process,\u0026nbsp;let's explore how to verify successful implementation and address any potential issues that might arise on macOS devices.\nHere's how to ensure your macOS devices are enjoying the benefits of Platform SSO:\nLogin with Microsoft Entra ID:\u0026nbsp;Observe if users can log in to their Mac devices directly using their Microsoft Entra ID credentials,\u0026nbsp;eliminating the need for separate local account passwords.Seamless Application Access:\u0026nbsp;Verify if users can access work applications and websites that support Platform SSO without entering additional login credentials.\u0026nbsp;Once logged in,\u0026nbsp;they should have immediate access upon launching these applications.Touch ID Functionality (Optional):\u0026nbsp;If Secure Enclave authentication is enabled,\u0026nbsp;test if users can leverage Touch ID for device unlocking,\u0026nbsp;further streamlining the login process.Further you can also perform below checks to verify PSSO configuration:\nVerify registration by running the following command in the terminal:\u0026nbsp;app-sso platform –sVerify both User \u0026amp; Device Registration:Secure EnclavePassword AuthenticationPassword synced with Identity ProviderDirectory ServicesSSO token stored in KeychainPart III - Troubleshooting PSSO for macOSEven with careful planning,\u0026nbsp;occasional hiccups can occur.\u0026nbsp;Here are some common troubleshooting steps you can take for Platform SSO on macOS devices:\nCheck Device Enrollment \u0026amp; MDM Communication:\nVerify that the macOS devices are properly enrolled in Microsoft IntuneEnsure the latest version of Company Portal app is deployed and running on the devices.Confirm that there are no connectivity issues between the devices and Microsoft Intune.Review Platform SSO Policy Configuration:\nDouble-check the Platform SSO policy settings within Microsoft Intune for any errors or inconsistencies.Ensure the chosen authentication method (Secure Enclave,\u0026nbsp;Password,\u0026nbsp;or Smart Card) aligns with your organization's security requirements and user preferences.Leverage Diagnostic Tools:\nUtilize the Microsoft Company Portal app on the affected device.\u0026nbsp;Navigate to Help \u0026gt; Send diagnostic report and follow the on-screen instructions.\u0026nbsp;This will capture relevant logs that can be shared with Microsoft support for further analysis.Consult the official Microsoft documentation for detailed troubleshooting steps specific to your configuration and encountered issues.Advanced Troubleshooting:💡Before proceeding,\u0026nbsp;ensure you have administrative privileges on the Mac device you're troubleshooting.Platform SSO leverages the macOS system logs to record events related to user registration,\u0026nbsp;AppSSO Agent confirmation and new user creation.\u0026nbsp;These logs can provide valuable clues when diagnosing issues.\nHere's how to access and capture the relevant logs:\nOpen Terminal:\u0026nbsp;Launch the Terminal application,\u0026nbsp;which is typically located within the Utilities folder within Applications.Execute the Command:\u0026nbsp;Type the following command in the Terminal window and press Enter:💡--predicate 'subsystem == \"com.apple.AppSSO\"':\u0026nbsp;This filters the output to include only messages related to the\u0026nbsp;com.apple.AppSSO\u0026nbsp;subsystem,\u0026nbsp;which is responsible for Platform SSO functionality.Once the command finishes executing,\u0026nbsp;navigate to your Documents folder and open the \"ssologs.txt\" file using a text editor.\u0026nbsp;Carefully examine the contents of the file,\u0026nbsp;paying close attention to timestamps,\u0026nbsp;error messages,\u0026nbsp;and any warnings. These detailed logs reveal user registrations,\u0026nbsp;plugin activity,\u0026nbsp;and even login screen details.\u0026nbsp;Analyze timestamps,\u0026nbsp;errors,and successes to pinpoint configuration issues.\u0026nbsp;Failed registrations,\u0026nbsp;communication breakdowns,\u0026nbsp;or UI glitches become exposed,\u0026nbsp;allowing you to take targeted actions and ensure a smooth SSO experience for your users.\nSSOE Logs​AppSSOAgent: (AppSSO) [com.apple.AppSSO:SOExtension] -[SOExtension beginAuthorizationWithRequestParameters:completion:] requestIdentifier: CAFC9D06-55FB74648 on \u0026lt;private\u0026gt; Mac SSO Extension: (AppSSO) [com.apple.AppSSO:SORemoteExtensionContext] -[SORemoteExtensionContext beginAuthorizationWithRequestParameters:completion:] requestIdentifier = CAF4A-B9E55FB74648, { AuthenticationMethod = 0; AuthorizationOptions = { \u0026ldquo;broker_key\u0026rdquo; = \u0026ldquo;hPGpd9IqD3njwT1dDXQ0n6LfHdrrKNGTEM8nh7OYJ_Y\u0026rdquo;; \u0026ldquo;client_app_name\u0026rdquo; = \u0026ldquo;Company Portal\u0026rdquo;; \u0026ldquo;client_app_version\u0026rdquo; = \u0026ldquo;5.2404.0\u0026rdquo;; \u0026ldquo;client_version\u0026rdquo; = \u0026ldquo;1.2.22\u0026rdquo;; \u0026ldquo;msg_protocol_ver\u0026rdquo; = 4; noUserInterface = 1; }; CFNetworkInterception = NO; CallerManaged = NO; CallerTeamIdentifier = UBF8T346G9; EnableUserInteraction = NO; Identifier = \u0026ldquo;CAFC9E55FB74648\u0026rdquo;; ImpersonationBundleIdentifier = \u0026ldquo;(null)\u0026rdquo;; LocalizedCallerDisplayName = \u0026ldquo;Company Portal\u0026rdquo;; Realm = \u0026ldquo;(null)\u0026rdquo;; RequestedOperation = \u0026ldquo;get_device_info\u0026rdquo;; ResponseCode = 0; URL = \u0026ldquo;https://login.microsoftonline.com/common\"; UseInternalExtensions = NO; } on \u0026lt;private\u0026gt;\nAppSSOAgent: [com.apple.AppSSO:SOAgent] -[SOAgent _doPerformAuthorizationWithRequestParameters:profile:completion:] { AuthenticationMethod = 0; AuthorizationOptions = { \u0026ldquo;broker_key\u0026rdquo; = \u0026ldquo;hPGpd9IqD3njwT1dDXQ0n6LfHdrrKNGTEM8nh7OYJ_Y\u0026rdquo;; \u0026ldquo;client_app_name\u0026rdquo; = \u0026ldquo;Company Portal\u0026rdquo;; \u0026ldquo;client_app_version\u0026rdquo; = \u0026ldquo;5.2404.0\u0026rdquo;; \u0026ldquo;client_version\u0026rdquo; = \u0026ldquo;1.2.22\u0026rdquo;; \u0026ldquo;correlation_id\u0026rdquo; = \u0026ldquo;61-8FDB52CD331A\u0026rdquo;; \u0026ldquo;msg_protocol_ver\u0026rdquo; = 4; noUserInterface = 1; }; CFNetworkInterception = NO; CallerManaged = NO; CallerTeamIdentifier = UBF8T346G9; EnableUserInteraction = NO; Identifier = \u0026ldquo;76A1756B-1138E2C224443CA\u0026rdquo;; ImpersonationBundleIdentifier = \u0026ldquo;(null)\u0026rdquo;; LocalizedCallerDisplayName = \u0026ldquo;Company Portal\u0026rdquo;; Realm = \u0026ldquo;(null)\u0026rdquo;; RequestedOperation = \u0026ldquo;get_device_info\u0026rdquo;; ResponseCode = 0; URL = \u0026ldquo;https://login.microsoftonline.com/common\"; UseInternalExtensions = NO; } on \u0026lt;private\u0026gt;\nAppSSOAgent: (AppSSO) [com.apple.AppSSO:SOExtensionManager] -[SOExtensionManager loadedExtensionWithBundleIdentifer:] com.microsoft.CompanyPortalMac.ssoextension =\u0026gt; \u0026lt;SOExtension:0x600001ef5450, bundleID=com.microsoft.CompanyPortalMac.ssoextension, path=/Applications/Company Portal.app/Contents/PlugIns/Mac SSO Extension.appex, associatedDomains=( \u0026ldquo;login.microsoft.com\u0026rdquo;, \u0026ldquo;login-us.microsoftonline.com\u0026rdquo;, \u0026ldquo;login.chinacloudapi.cn\u0026rdquo;, \u0026ldquo;login.partner.microsoftonline.cn\u0026rdquo;, \u0026ldquo;sts.windows.net\u0026rdquo;, \u0026ldquo;login.microsoftonline.com\u0026rdquo;, \u0026ldquo;login.microsoftonline.us\u0026rdquo; )\u0026gt; in ( \u0026ldquo;\u0026lt;SOExtension:0x600001ef5450, bundleID=com.microsoft.CompanyPortalMac.ssoextension, path=/Applications/Company Portal.app/Contents/PlugIns/Mac SSO Extension.appex, associatedDomains=(\\n \u0026quot;login.microsoft.com\u0026quot;,\\n \u0026quot;login-us.microsoftonline.com\u0026quot;,\\n \u0026quot;login.chinacloudapi.cn\u0026quot;,\\n \u0026quot;login.partner.microsoftonline.cn\u0026quot;,\\n \u0026quot;sts.windows.net\u0026quot;,\\n \u0026quot;login.microsoftonline.com\u0026quot;,\\n \u0026quot;login.microsoftonline.us\u0026quot;\\n)\u0026gt;\u0026rdquo;,\nCompany Portal: (AppSSO) [com.apple.AppSSO:SOAuthorization] -[SOAuthorization _finishAuthorizationWithCredential] credentialCore = \u0026lt;private\u0026gt;, error = (null), requestParametersCore = { AuthorizationOptions = { \u0026ldquo;broker_key\u0026rdquo; = \u0026ldquo;hPGpd9IqrKNGTEM8nh7OYJ_Y\u0026rdquo;; \u0026ldquo;client_app_name\u0026rdquo; = \u0026ldquo;Company Portal\u0026rdquo;; \u0026ldquo;client_app_version\u0026rdquo; = \u0026ldquo;5.2404.0\u0026rdquo;; \u0026ldquo;client_version\u0026rdquo; = \u0026ldquo;1.2.22\u0026rdquo;; \u0026ldquo;correlation_id\u0026rdquo; = \u0026ldquo;7F0F-FAE40B22A328\u0026rdquo;; \u0026ldquo;msg_protocol_ver\u0026rdquo; = 4; noUserInterface = 1; }; CFNetworkInterception = NO; CallerManaged = NO; CallerTeamIdentifier = \u0026ldquo;(null)\u0026rdquo;; EnableUserInteraction = NO; Identifier = \u0026ldquo;CAFC9D069E55FB74648\u0026rdquo;; ImpersonationBundleIdentifier = \u0026ldquo;(null)\u0026rdquo;; LocalizedCallerDisplayName = \u0026ldquo;(null)\u0026rdquo;; Realm = \u0026ldquo;(null)\u0026rdquo;; RequestedOperation = \u0026ldquo;get_device_info\u0026rdquo;; ResponseCode = 0; URL = \u0026ldquo;https://login.microsoftonline.com/common\"; UseInternalExtensions = NO; }, delegate = \u0026lt;ASAuthorizationController: 0x600003782700\u0026gt; on \u0026lt;private\u0026gt;\nAppSSOAgent: [com.apple.AppSSO:SOAgent] -[SOAgent finishAuthorization:completion:] extension = \u0026lt;SOExtension:0x600001ef5450, bundleID=com.microsoft.CompanyPortalMac.ssoextension, path=/Applications/Company Portal.app/Contents/PlugIns/Mac SSO Extension.appex, associatedDomains=( \u0026ldquo;login.microsoft.com\u0026rdquo;, \u0026ldquo;login-us.microsoftonline.com\u0026rdquo;, \u0026ldquo;login.chinacloudapi.cn\u0026rdquo;, \u0026ldquo;login.partner.microsoftonline.cn\u0026rdquo;, \u0026ldquo;sts.windows.net\u0026rdquo;, \u0026ldquo;login.microsoftonline.com\u0026rdquo;, \u0026ldquo;login.microsoftonline.us\u0026rdquo; )\u0026gt;, queue = com.microsoft.CompanyPortalMac.ssoextension on \u0026lt;private\u0026gt;\nCompany Portal: (AppSSOCore) [com.apple.AppSSO:SOClient] finishAuthorizationWithCompletion: success = 1, error = (null) User Registration​AppSSOAgent: (PlatformSSO) [com.apple.AppSSO:POExtension] -[POExtension beginUserRegistrationUsingUserName:authenticationMethod:options:extensionData:completion:] authenticationMethod = 1, options = 5 on \u0026lt;private\u0026gt;\nAppSSOAgent: (AppSSO) [com.apple.AppSSO:SOExtension] -[SOExtension requestAuthorizationViewControllerWithCompletion:] on \u0026lt;private\u0026gt;\nAppSSOAgent: (AppSSO) [com.apple.AppSSO:SOExtension] -[SOExtension _setupSessionIfNecessaryWithCompletion:] on \u0026lt;private\u0026gt;\nAppSSOAgent: (AppSSO) [com.apple.AppSSO:SOExtension] -[SOExtension incrementRequestCount] count now 1 on \u0026lt;private\u0026gt;\nAppSSOAgent: (AppSSO) [com.apple.AppSSO:SOExtension] Using existing session for extension \u0026lt;private\u0026gt;\nAppSSOAgent: (AppSSO) [com.apple.AppSSO:SOExtension] -[SOExtension beginUserRegistrationUsingUserName:authenticationMethod:options:extensionData:completion:] on \u0026lt;private\u0026gt;\nAppSSODaemon: (PlatformSSO) [com.apple.AppSSO:PODaemonProcess] -[PODaemonProcess userConfigurationForIdentifier:completion:] identifier = 9B507260-FE86-4788E2769 on \u0026lt;private\u0026gt;\nAppSSODaemon: (PlatformSSO) [com.apple.AppSSO:PODaemonProcess] -[PODaemonProcess saveUserConfiguration:forIdentifier:completion:] identifier = 9B50726027-7EAB788E2769 on \u0026lt;private\u0026gt;\nAppSSOAgent: (PlatformSSO) [com.apple.AppSSO:POConfigurationVersion] -[POConfigurationVersion increaseVersionWithMessage:] config version increased from 0x0000018D66BE3565 to 0x0000018D66BE3571 (userConfiguration updated) on \u0026lt;private\u0026gt;\nAppSSOAgent: (PlatformSSO) [com.apple.AppSSO:POKeychainHelper] -[POKeychainHelper addTokens:metaData:toKeychainForService:username:system:] service com.microsoft.CompanyPortalMac.ssoextension on \u0026lt;private\u0026gt;\nAppSSODaemon: (PlatformSSO) [com.apple.AppSSO:PODaemonProcess] -[PODaemonProcess userConfigurationForIdentifier:completion:] identifier = 9B507260-FE8AB788E2769 on \u0026lt;private\u0026gt;\nAppSSOAgent: (PlatformSSO) [com.apple.AppSSO:POAgentAuthenticationProcess] -[POAgentAuthenticationProcess notifyKerberosDelegateTGTDidComplete] on\nAppSSOAgent: (PlatformSSO) [com.apple.AppSSO:POAgentAuthenticationProcess] -[POAgentAuthenticationProcess finishRegistrationWithStatus:message:] success = 1 on \u0026lt;private\u0026gt;\nAppSSOAgent: (PlatformSSO) [com.apple.AppSSO:POExtension] -[POExtension registrationDidCompleteWithCompletion:] on \u0026lt;private\u0026gt;\nAppSSOAgent: (AppSSO) [com.apple.AppSSO:SOExtension] -[SOExtension requestAuthorizationViewControllerWithCompletion:] on \u0026lt;private\u0026gt;\nAppSSOAgent: (AppSSO) [com.apple.AppSSO:SOExtension] -[SOExtension _setupSessionIfNecessaryWithCompletion:] on \u0026lt;private\u0026gt;\nAppSSOAgent: (AppSSO) [com.apple.AppSSO:SOExtension] -[SOExtension incrementRequestCount] count now 1 on \u0026lt;private\u0026gt;\nAppSSOAgent: (AppSSO) [com.apple.AppSSO:SOExtension] Using existing session for extension \u0026lt;private\u0026gt;\nAppSSOAgent: (AppSSO) [com.apple.AppSSO:SOExtension] -[SOExtension registrationDidCompleteWithCompletion:] on \u0026lt;private\u0026gt;\nMac SSO Extension: (AppSSO) [com.apple.AppSSO:SORemoteExtensionContext] -[SORemoteExtensionContext registrationDidCompleteWithCompletion:] on \u0026lt;private\u0026gt; Device RegistrationAppSSOAgent: (AppSSO) [com.apple.AppSSO:SOExtension] -[SOExtension beginDeviceRegistrationUsingOptions:extensionData:completion:] on \u0026lt;private\u0026gt;\nMac SSO Extension: (AppSSO) [com.apple.AppSSO:SORemoteExtensionContext] -[SORemoteExtensionContext beginDeviceRegistrationUsingOptions:extensionData:completion:] options = 5 on \u0026lt;private\u0026gt;\nAppSSOAgent: (PlatformSSO) [com.apple.AppSSO:POExtension] -[POExtension presentAuthorizationViewControllerWithHints:completion:] on \u0026lt;private\u0026gt;\nAppSSOAgent: (AppSSOUI) [com.apple.AppSSO:SOUIAuthorizationViewController] -[SOUIAuthorizationViewController initWithExtensionViewController:hints:] extensionViewController = \u0026lt;SORemoteExtensionViewController: 0x600000ff0fc0\u0026gt; on \u0026lt;private\u0026gt;\nAppSSOAgent: (AppSSOUI) [com.apple.AppSSO:SOUIAuthorizationViewController] -[SOUIAuthorizationViewController loadView] on \u0026lt;private\u0026gt;\nAppSSOAgent: (AppSSOUI) [com.apple.AppSSO:SOUIAuthorizationViewController] \u0026lt;SORemoteExtensionViewController: 0x600000ff0fc0\u0026gt; - size: (w=809.000000, h=650.000000)\nAppSSOAgent: (AppSSOUI) [com.apple.AppSSO:SOUIAuthorizationViewController] -[SOUIAuthorizationViewController viewDidLoad] on \u0026lt;private\u0026gt;\nAppSSOAgent: (PlatformSSOUI) [com.apple.AppSSO:POAgentWindowController] -[POAgentWindowController initWithWindow:] on \u0026lt;private\u0026gt;\nAppSSOAgent: (AppSSOUI) [com.apple.AppSSO:SOUIAuthorizationViewController] -[SOUIAuthorizationViewController viewWillAppear] on \u0026lt;private\u0026gt;\nAppSSOAgent: (AppSSOUI) [com.apple.AppSSO:SOUIAuthorizationViewController] -[SOUIAuthorizationViewController viewDidAppear] on \u0026lt;private\u0026gt;\nMac SSO Extension: (AppSSOCore) [com.apple.AppSSO:SOConfigurationClient] -[SOConfigurationClient init] on \u0026lt;private\u0026gt;\nMac SSO Extension: (AppSSOCore) [com.apple.AppSSO:SOServiceConnection] \u0026lt;SOServiceConnection: 0x12b155f40\u0026gt;: new XPC connection\nMac SSO Extension: (AppSSOCore) [com.apple.AppSSO:SOConfigurationVersion] -[SOConfigurationVersion checkVersion] config version changed from from 0x0000000000000000 to 0x0000018D66B94507 on \u0026lt;private\u0026gt;\nMac SSO Extension: (AppSSOCore) [com.apple.AppSSO:SOConfigurationClient] -[SOConfigurationClient _reloadConfig] on \u0026lt;private\u0026gt;\nMac SSO Extension: (AppSSOCore) [com.apple.AppSSO:SOClient] -[SOClient configurationWithCompletion:] on \u0026lt;private\u0026gt;\nAppSSOAgent: [com.apple.AppSSO:SOAgent] -[SOAgent initWithXPCConnection:] \u0026lt;SOAgent: 0x6000013ed380\u0026gt; on \u0026lt;private\u0026gt;\nMac SSO Extension: (AppSSOCore) [com.apple.AppSSO:SOClient] configurationWithCompletion: success = YES, error = (null)\nMac SSO Extension: (AppSSOCore) [com.apple.AppSSO:SOClient] -[SOClient getAuthorizationHintsWithURL:responseCode:completion:] url: \u0026lt;mask.hash: \u0026lsquo;3WXy1dp5TlBJfSe8ZoJkFw==\u0026rsquo;\u0026gt;, responseCode: 0 on \u0026lt;private\u0026gt;\nAppSSOAgent: (AppSSO) [com.apple.AppSSO:SOExtensionManager] -[SOExtensionManager loadedExtensionWithBundleIdentifer:] com.microsoft.CompanyPortalMac.ssoextension =\u0026gt; \u0026lt;SOExtension:0x600001ef5450, bundleID=com.microsoft.CompanyPortalMac.ssoextension, path=/Applications/Company Portal.app/Contents/PlugIns/Mac SSO Extension.appex, associatedDomains=(null)\u0026gt; in ( \u0026ldquo;\u0026lt;SOExtension:0x600001ef5450, bundleID=com.microsoft.CompanyPortalMac.ssoextension, path=/Applications/Company Portal.app/Contents/PlugIns/Mac SSO Extension.appex, associatedDomains=(null)\u0026gt;\u0026rdquo;, \u0026ldquo;\u0026lt;SOExtension:0x600001ef6490, bundleID=com.apple.AuthKitUI.AKAppSSOExtension, path=/System/Library/PrivateFrameworks/AuthKitUI.framework/PlugIns/AKAppSSOExtension_macOS.appex, associatedDomains=(null)\u0026gt;\u0026rdquo;, \u0026ldquo;\u0026lt;SOExtension:0x600001ef67b0, bundleID=com.apple.AppSSOKerberos.KerberosExtension, path=/System/Library/PrivateFrameworks/AppSSOKerberos.framework/PlugIns/KerberosExtension.appex, associatedDomains=(null)\u0026gt;\u0026rdquo; ) on \u0026lt;private\u0026gt;\nMac SSO Extension: (AppSSOCore) [com.apple.AppSSO:SOClient] SOClient authorization hints: {localizedExtensionBundleDisplayName = \u0026ldquo;Mac SSO Extension\u0026rdquo;;\nMac SSO Extension: (AppSSO) [com.apple.AppSSO:SOAuthorization] hints: {localizedExtensionBundleDisplayName = \u0026ldquo;Mac SSO Extension\u0026rdquo;}, error: (null)\nAppSSODaemon: (PlatformSSO) [com.apple.AppSSO:PODaemonProcess] -[PODaemonProcess deviceConfigurationForIdentifer:completion:] identifer = 9B507260-FE86788E2769 on \u0026lt;private\u0026gt;202\nConclusionIn this comprehensive blog post, we\u0026rsquo;ve explored the world of Platform SSO for macOS. We\u0026rsquo;ve delved into its technical aspects, unpacked its user and security benefits, and even equipped you with the knowledge to configure and troubleshoot it on your macOS devices.\nWith Platform SSO, you can empower your users with a streamlined login experience while simultaneously strengthening your organization\u0026rsquo;s security posture. Consider exploring the official Microsoft documentation to delve deeper into configuration specifics and unleash the full potential of Platform SSO within your macOS environment.\nI hope this blog post has been informative and empowers you to make informed decisions regarding Platform SSO for your organization. If you have any questions or require further assistance, feel free to leave a comment below!\n","externalUrl":null,"permalink":"/posts/implementing-platform-sso-for-macos-a-deep-dive-into-configuration-troubleshooting/","section":"Posts","summary":"The wait is over!","title":"Platform SSO for macOS: A Deep Dive into Configuration \u0026 Troubleshooting","type":"posts"},{"content":"Apple introduced several highly anticipated device management features this year, including the much-awaited \"Platform SSO.\" This news has generated significant enthusiasm among MDM solution users, as they eagerly await the opportunity to try out these new features and provide valuable feedback. However, it is crucial to remember that beta releases are primarily intended for non-production devices and can potentially introduce stability and compatibility issues. To ensure a secure and stable environment, it is essential to prevent supervised devices, especially those managed in educational or corporate settings, from installing Apple beta software. One approach is to utilize restriction profiles, which can be created and deployed through Microsoft Intune. These profiles allow administrators to specify restrictions, such as disabling the installation of beta software or preventing access to the beta software installation section in device settings. By applying these profiles, organizations can ensure that supervised devices adhere to the established guidelines and remain free from potential issues associated with beta software.\nAnother option is to leverage Apple Configurator, a powerful tool available on macOS. By connecting supervised devices to a Mac computer running Apple Configurator, administrators can create configuration profiles with specific restrictions to prevent the installation of beta software. These profiles can disable automatic software updates, block access to beta software installation, and enforce other necessary restrictions.\nAdditionally, you can also create custom configuration profiles tailored to your specific requirements. This allows for granular control over device settings and restrictions, providing a comprehensive solution for preventing the installation of Apple beta software on supervised devices.\nFor simplicity, I will guide you through the most effective method to prevent the installation of Apple beta software on supervised devices i.e. restriction using Microsoft Intune, helping you maintain a secure and reliable device management environment.\nDevice Restrictions using Microsoft Intune Sign in to the Microsoft Intune admin center.Select Devices \u0026gt; iOS/iPadOS Devices \u0026gt; Create profile \u0026gt; Select Profile Type \u0026gt; Settings Catalog \u0026gt; Create Provide the name \u0026amp; description for the profile\nIn Configuration settings, select Add settings. In the settings picker, search for \"allowUIConfigurationProfileInstallation\". After you add this setting, close the settings picker and then toggle the switch to False. Assign the profile to the required user group. When you set this restriction, users can't install profiles from email messages or websites. This includes the profile that enrolls the device in the iOS Beta Software Program. It also prevents users from enabling beta updates in Settings.\nRestrictions At End-User Level Conclusion Preventing supervised devices from installing Apple beta software is crucial to maintain stability, security, and compatibility within educational or corporate environments. By establishing clear policies, leveraging device management solutions, and utilizing configuration profiles, you can effectively restrict beta software installations on supervised devices. Regular communication, policy enforcement, and staying updated with the latest MDM features will help you create a controlled and secure ecosystem for your organization's devices.\n","externalUrl":null,"permalink":"/posts/prevent-supervised-devices-from-installing-apple-beta-software/","section":"Posts","summary":"Apple introduced several highly anticipated device management features this year, including the much-awaited \"","title":"Prevent Supervised Devices From Installing Apple Beta Software Using Intune","type":"posts"},{"content":"","externalUrl":null,"permalink":"/posts/temp-slug-47-2/","section":"Posts","summary":"","title":"Publish Enterprise Apps In Google Enterprise Play Store","type":"posts"},{"content":"","externalUrl":null,"permalink":"/posts/temp-slug-47/","section":"Posts","summary":"","title":"Publish Enterprise Apps In Google Enterprise Play Store","type":"posts"},{"content":"In my previous blog posts, we delved deep into the intriguing topic of why an Android Enterprise device seems to have a mind of its own and reboots unexpectedly. We also ventured into the practical side of things, equipping you with the know-how to export logs, and providing a clearer lens to understand the root causes of these seemingly inexplicable reboots. However, after frequenting various online communities and forums, it came to my attention that this peculiar behavior persists for many. A number of users continue to grapple with their devices' unpredictable reboot patterns. Today, we are going to further unravel this mystery. Leveraging Project Mainline logs, we will embark on a journey to chronologically dissect the events that lead to these soft reboots, aiming to bring clarity to this enduring Android enigma.\nBefore diving deep into the intricacies of Project Mainline, I recommend familiarizing yourself with my previous blog posts that delve into this mysterious reboot behavior.\nAndroid Enterprise Device Reboots On Its Own!In the last few days, many people have complained about the strange behavior of their Android Enterprise Devices, wherein the user’s devices suddenly reboot on their own. I also faced the same issue with one of my customers, and it was hard to find what made the devices goIntune - In Real LifeSomesh PathakWhat Causes an Android Device To Reboot On It’s Own Suddenly?In my previous post – Android Enterprise Device Reboots On Its Own!, we discussed the weird issue with Android devices rebooting randomly. However, there is more surprise; continue reading further to find the root cause for your devices going spooky! Initial Root Cause As we discussed…Intune - In Real LifeSomesh PathakWhat is Project Mainline?Android is an ever-evolving mobile operating system, and over the years, Google has introduced various mechanisms to streamline and expedite the process of delivering updates. One of the most pivotal of these mechanisms is Project Mainline.\nIntroduced with Android 10, Project Mainline enables Google to update specific internal components of the Android OS directly via the Play Store, without needing full system updates. This approach offers several benefits:\nSpeed: Updates can be rolled out faster since they bypass the traditional lengthy manufacturer and carrier validation processes.Frequency: As updates can be smaller and more targeted, users can receive them more frequently.Security: Critical security patches can be delivered promptly, ensuring devices remain secure.It is designed to distribute new Android features to users of various Android versions without requiring them to perform a complete OS update. To delve deeper into Project Mainline, let's first revisit its forerunner, 'Project Treble'\nThe Genesis of Project TrebleAndroid's extensive reach also brings with it some intricate challenges. Each manufacturer, despite rooting their systems in the AOSP source, often feels compelled to introduce their own unique alterations. This could be to ensure hardware congruence or to offer standout UI experiences and system applications. Some even delve into adjusting the system partition's contents or altering the AOSP sources directly. Such practices birthed a persistent Android challenge termed 'fragmentation'.\nFragmentation is the consequence when changes to AOSP are so profound that the universal AOSP build isn't compatible with specific devices. This places the onus on manufacturers to keep pace with AOSP updates, a daunting task considering the regular evolutionary strides Android takes annually. For end-users, this often translates to their devices becoming archaic, sometimes a mere 18 months post-purchase. Custom ROM developers often grapple with challenges, especially when they encounter unexpected hardware inconsistencies after tweaking the AOSP for specific devices. The ripple effect of this is most devices getting sporadic updates or, worse, none at all, leading to magnified security risks and delayed adoption of fresher Android versions.\nRecognizing this, Google introduced \"Project Treble\" in Android 8.0 Oreo as a remedy. Its primary essence was rejuvenating Android's Hardware Abstraction Layer to bridge the gap between generic AOSP code and device-specific hardware. A salient aspect was drawing a clear demarcation in roles through an established partitioning blueprint:\n/system – Dedicated only to AOSP code, falling under Google's purview./vendor – Contains the Board Support Package binaries, crucial for interfacing with components like baseband, sensors, and camera. /odm – Stores data from the \"Original Device Manufacturer\"./product – Caters to device-specific changesAOSP code starts by looking for device-specific files, followed by brand-specific ones, then by the SoC, and finally resorts to its default files, which are universally compatible with all devices.\nModular system components | Android Open Source ProjectHow Project Mainline Works?At its core, Project Mainline breaks down the essential components of the Android OS into distinct modules. Each module encapsulates a specific fragment of the system, paving the way for them to be updated individually without a full system overhaul.\nOne of the standout features of Project Mainline is the mechanism of Google Play System Updates. Gone are the days when users would be at the mercy of device manufacturers for timely system updates. Instead, with Mainline, these modular updates are funneled directly through the Google Play Store, akin to regular app updates. This not only accelerates the pace at which users receive these updates but also ensures they are consistent and regular.\nSecurity, a cornerstone of any operating system, receives a notable boost with Mainline. By facilitating rapid deployment of security patches and other imperative updates, the window of vulnerability that often arises due to manufacturer-induced delays is considerably minimized.\nA longstanding challenge that Android has grappled with is fragmentation. This refers to the disparate versions of the OS and updates across the myriad of Android devices. Furthermore, a hallmark of Project Mainline is its staunch commitment to compatibility. The modular design ensures that even if devices have divergent versions of a module, the user experience remains unaffected, with apps operating seamlessly across the board. The link below lists all the modules, their package name, formats (APK or APEX) when they were introduced, and their features:\nModular system components | Android Open Source ProjectAndroid Open Source ProjectI won't delve deeply into the details of Project Mainline for this blog. Instead, we'll center our attention on the delivery process of these updates and their impact on the device.\nHow Project Mainline Modules Are UpdatedThe complex process begins with the modularization of Android. The operating system's components are compartmentalized into distinct modules, each responsible for a specific system function. These modules are either encapsulated as APKs (Java-based components) or as APEX (native components). When a particular Mainline module necessitates an update, it is meticulously packaged in its requisite format, be it APEX or APK, and subsequently propagated to devices through the Google Play Store's distribution framework.\nAs a workaround, Android users are advised to go to Settings \u0026gt; Security \u0026gt; Google Play system update. This initiates the Mainline module update process in Google Play, enabling users to look for and install recent Mainline updates.\nDissecting Android's Mainline Update LogsWhen a Google Play System Update is deployed, the device may need to reboot to accommodate new APEX or APK files. From Android 11 onwards, devices can employ \"soft reboots\" that refresh system elements. Google sends Mainline module updates as bundled packages. Upon their deployment, the ModuleMetadata app's version number is updated, which informs the Google Play System Update version in device settings. For safeguarding against flawed updates, Android's RollbackManager reverts them to their previous stable versions under specific circumstances like system errors or network issues. Advanced users can leverage command-line tools to manage and inspect APEX module installations and their cryptographic validity.\nLet's delve deeper and analyze the logs event-wise to provide a chronological insight into what transpired with the device.\nPackage Session Verification: The system is verifying a package session which often refers to the installation or update of a package. Starting preRebootVerification for session 291950126\nAPEX Package Information: APEX packages are used in newer versions of Android for system components. The log indicates a session associated with an APEX package related to Google's mainline module.Session 291950126 has following APEX packages: [com.google.mainline.primary.libs]\nBroadcast Intent: A broadcast intent was sent by the system regarding a package installation.pkg=com.android.vending.INTENT_PACKAGE_INSTALL_COMMIT.mainline_train_primary\nShutdown Initiation: The system is initiating a shutdown with a specified reason. Here, the reason seems related to an enterprise update.reboot reason : enterprise,mainline_update, confirm : false\nThis log captures the moments just before a device reboot, initiated due to a system update or change (particularly related to mainline modules). The log entry for Rollback relates to Android's RollbackManager and the feature in newer Android versions that allows for system updates or app updates to be rolled back to a previous version if there are issues. This is particularly useful in scenarios where an update might introduce problems or regressions and is required to revert to a more stable version.\nThe specific package mentioned, com.google.mainline.primary.libs, suggests this is related to Android's Mainline Modules. As mentioned earlier, Mainline Modules are a part of Android's Project Mainline and allow Google to deliver security fixes, privacy enhancements, and other improvements directly to users without needing to rely on device manufacturers to deliver a full system update.\nThe log entry is indicating that a rollback capability was enabled for the update of com.google.mainline.primary.libs. This means that if there's an issue with this update, the system can roll back to the previous version of this module.\nAt this point, it's evident that the device underwent a soft reboot. However, there's another log file that pinpoints the precise causes for such shutdowns or reboots. Let's delve into that as well.\nRole of Android's 'Power off Reset Reasons' FileIn Android devices, system events, errors, or unusual behaviors can generate log files for debugging and diagnostic purposes. One such file is the \"Power off reset reasons\" file. This file essentially captures the reasons or causes for unexpected power-offs or reboots that the device might have experienced.\nThe main purpose of this file is to aid developers, device manufacturers, and sometimes IT professionals in diagnosing why a device may have unexpectedly shut down or restarted. By understanding the root cause, they can then work towards resolving any underlying issues. The exact location of this file can vary depending on the device manufacturer and the version of Android being used. However, it's often found in the device's system logs or /proc/last_kmsg directory, especially if the device experienced a kernel panic.\nThis file is typically saved in a system directory, and accessing it might require root permissions or ADB (Android Debug Bridge). So, what does our log file say?\n23/07/24 18:55:22 reason : enterprise,mainline_update java.lang.Exception: It is not an exception!! just save the trace for process which called shutdown thread!! ShutdownThread.shutdown at com.android.server.power.ShutdownThread.shutdownInner(ShutdownThread.java:344) at com.android.server.power.ShutdownThread.reboot(ShutdownThread.java:444) at com.android.server.power.PowerManagerService$2.run(PowerManagerService.java:6078) at android.os.Handler.handleCallback(Handler.java:942) at android.os.Handler.dispatchMessage(Handler.java:99) at android.os.Looper.loopOnce(Looper.java:226) at android.os.Looper.loop(Looper.java:313) at android.os.HandlerThread.run(HandlerThread.java:67) at com.android.server.ServiceThread.run(ServiceThread.java:44) at com.android.server.UiThread.run(UiThread.java:52) 18:55:30 2023-07-24 18:55:30+0100 | REBOOT | | REASON: enterprise,mainline_update 18:55:30 terminating init service start 18:55:31 terminating init service end 18:55:31 volume shutdown start 18:55:31 volume shutdown end 2023-07-24 18:57:02+0100 | ON | RP | / OFFSRC: PWRHOLD / ONSRC: ACOKB / RSTSTAT: SWRESET [72]/ apex_updated Reboot Reason:reason : enterprise,mainline_update: This denotes the reasons for the reboot. The term enterprise suggests the device is managed by an enterprise policy, indicating it's part of an organization's mobile device management system. The term mainline_update suggests the device is undergoing a Project Mainline update.\nReboot Action:2023-07-24 18:55:30+0100 | REBOOT |...: This is a timestamped record of the actual reboot action, reiterating the reasons (enterprise,mainline_update).\nSystem Restart Info:2023-07-24 18:57:02+0100 | ON |: This timestamped entry signifies the device turned back on. RSTSTAT: SWRESET [72] indicates the device underwent a software reset, and apex_updated confirms a Project Mainline module was updated during this reboot.\nThe log clearly records a deliberate system reboot, likely to apply a Project Mainline update, on an enterprise-managed Android device.\nWhy not confuse it with the word \"Enterprise\" in the logs?The presence of the term \"enterprise\" in the logs is indicative of the device being managed under Android Enterprise for enhanced management and security features for Android devices in corporate environments.\nWhen a device is enrolled in Android Enterprise through an Enterprise Mobility Management solution like Microsoft Intune, it is subject to policies and configurations set by the enterprise IT department. This includes the ability to push software updates, control the installation or removal of apps, enforce security policies, and much more.\nConclusionThe log that I analyzed indicated a request to PowerManagerService to initiate a shutdown/reboot. The reason provided was, enterprise,mainline_update, suggesting a mainline module update. Mainline modules are a part of Android's Project Mainline, which allows core OS components to be updated via the Google Play Store (represented here by com.android.vending). So, the reason for the restart seems to be related to an update of a core OS component (mainline module).\nFurthermore, the log for rollback manager also indicates that a rollback capability was enabled for the update of com.google.mainline.primary.libs. In the context of device restart behavior, it seems that the device has been initiating an update related to Project Mainline and went through a soft reboot.\nHowever, it's essential to note that such mechanisms are designed with user security and device stability in mind. These reboots ensure that the device runs the most recent and secure software modules.\nI trust this article has shed light on the mechanics behind updates and offered a clearer understanding of the log processes. If you found this information valuable, please consider sharing the post. Should you have any questions or need further clarification, don't hesitate to reach out!\n","externalUrl":null,"permalink":"/posts/why-your-android-device-reboots/","section":"Posts","summary":"In my previous blog posts, we delved deep into the intriguing topic of why an Android Enterprise device seems to have a mind of its own and reboots unexpectedly.","title":"Reboot Chronicles: An In-depth Look at Android Mainline Updates","type":"posts"},{"content":" What is the D-U-N-S number?\nThe\u0026nbsp;Data Universal Numbering System, commonly abbreviated as\u0026nbsp;DUNS\u0026nbsp;or\u0026nbsp;D-U-N-S, is a proprietary system developed and managed by\u0026nbsp;Dun \u0026amp; Bradstreet (D\u0026amp;B)\u0026nbsp;that assigns a unique numeric identifier to as a \u0026#8220;DUNS number\u0026#8221; to a single business entity.\u0026nbsp;\nIt was introduced in the 1960s for credit reporting and is now standard followed worldwide.\u0026nbsp;\nIt is a nine-digit number assigned to each business entity with a unique, separate, and distinct operation to identify them. The DUNS number is random, and the digits have no apparent significance. Why D-U-N-S is required for using Apple Services? When an organization decides to buy Apple devices, then they have to buy Apple Enterprise services to buy \u0026amp; manage these devices. ABM, Apple Developer Portal, etc., requires the organization to have a DUNS number. If an organization wants to distribute apps to different geographical locations, then it needs to have ABM subscriptions, and then for enrolling in ABM, you will need a DUNS number.\u0026nbsp;\nD-U-N-S Number will be used to check your organization\u0026#8217;s identity and legal entity status as part of our enrollment verification process for joining the Apple Developer Program or the Apple Developer Enterprise Program. The company/business must be recognized as a legal entity (such as a corporation, limited partnership, or limited liability company) to enter into the legal terms and obligations of the Apple Developer Program agreements. It does not allow DBAs, fictitious businesses, trade names, and branches to register for it.\nCompanies and educational institutions must provide a D-U-N-S Number registered to their legal entity.\nSteps for requesting a D-U-N-S number It could be possible that D\u0026amp;B may have already assigned your organization a free D-U-N-S Number. Before enrolling,\u0026nbsp;look up your organization\u0026nbsp;to see if you have a D-U-N-S Number. If your company is not listed, you’ll have the option to submit your information to Dun \u0026amp; Bradstreet for a free D-U-N-S Number.\nYou\u0026#8217;ll be asked for the following information when looking up your organization:\nLegal entity nameHeadquarters addressMailing addressYour work contact information As part of their verification process, a D\u0026amp;B representative will contact you directly for more information (such as your business type or the number of employees).\u0026nbsp;\nClick or copy the following link to your browser \u0026nbsp;Get a D-U-N-S Number \u0026#8211; Establish Your Business \u0026#8211; D\u0026amp;B (dnb.com)Select your Primary Reason for D-U-N-S Number Registration from the drop-down menuComplete the company information sections.\u0026nbsp;You will need to provide information about your organization, like legal name, address, contact name \u0026amp; title.Review DetailsClick the “Submit” button to complete your request\u0026nbsp; Once you have completed the entire process, you will receive a confirmation email.\u0026nbsp;\u0026nbsp;It will take 24 to 48 hours to receive your D‐U‐N‐S Number, which you will receive via email for your records.\n","externalUrl":null,"permalink":"/posts/registering-for-d-u-n-s/","section":"Posts","summary":"What is the D-U-N-S number?","title":"Registering For D-U-N-S","type":"posts"},{"content":" The brand-new Microsoft App Store is now generally available. Microsoft Store apps can now be searched for, browsed through, configured, and deployed through Intune. The new Microsoft Store app type is implemented via the Windows Package Manager. This app category provides a wider variety of apps, including Win32 and UWP apps.\nHow does the \u0026#8220;New\u0026#8221; store differ from the \u0026#8220;Legacy\u0026#8221; store? If your tenant has the most recent updates, you may have noticed that two Windows Store apps are now available for you to pick from. They are:\nMicrosoft Store App (New) Microsoft Store App (Legacy) The new Microsoft store is based on the new Windows Package Manager or winget, which allows you to easily find the latest versions of the apps and push them to your end user\u0026#8217;s Windows-managed devices. The new store also allows you to add EXEs and MSI packages from winget to APPX and MSIX.\nIn the new store, the Windows Package Manager framework backend has been connected to the Intune apps service so that, as an Intune Admin, you can easily search for any app in the store.\nAll the apps and their packages are maintained centrally by the ISV publisher of the app package. And as an Intune admin, you have complete control over what your users can install.\nIn the \u0026#8220;legacy\u0026#8221; store, there was no option to search for the apps.\nLet me show you the experience in the Intune admin center:\nAfter logging into Intune admin center, navigate to the All apps blade, click on \u0026#8220;Add App\u0026#8221; You will notice the new store. Click \u0026#8220;Select\u0026#8221; to proceed with adding an app. On the next screen, search for the app you want to install. For this demo, I will search for the Paint 3D app. You will observe the difference compared to the store\u0026#8217;s previous options because it enables you to find apps using built-in search. And all the app\u0026#8217;s details, like the name, description, publisher, package ID, and privacy URL, are automatically pre-populated, so you don\u0026#8217;t need to cut and paste anything.\n📢Win32 apps that are in the Microsoft Store are currently in preview. Not all Win32 apps will be available or searchable. The Win32 apps in preview will be identifiable with Win32 and a banner. Winget The Windows Package Manager (also known as winget) is a free and open-source package manager designed by Microsoft for Windows 10 and 11. It consists of a command-line utility and a set of services for installing applications. Independent software vendors can use it as a distribution channel for their software packages.\nI\u0026#8217;ll run a help command, and you\u0026#8217;ll see all the different app operations it can perform, like installing, searching, upgrading, and more.\nI\u0026#8217;ll use the command -s msstore to limit the results to only those found in the store as I quickly search for Apache. It discovers two packages, one of which has the XP prefix, suggesting that they are Win32 software.\nIf you run a show command using its ID to view information, you\u0026#8217;ll see the app as an EXE file type. So it\u0026#8217;s easy to find app packages and perform standard app operations against them.\nUniversal Windows Platform (UWP) App While searching for the apps in the new store, you will notice that the apps are listed as UWP apps. Let\u0026#8217;s discuss this also.\nUWP is Microsoft\u0026#8217;s extension of the Windows Runtime platform that leverages the C++, C#, VB.NET, and XAML coding languages. The main idea for UWP is:\nUniversal API toolkit. Responsive design and scaling in apps. Universal controls, styles, input, and interactions. Cloud, A.I., and cognitive services. Single Store for distribution. One Software Development Kit (SDK). The goal for UWP is to let developers share code between apps and utilize a broad range of APIs; it does not necessarily mean that a UWP app is supposed to \u0026#8220;run everywhere,\u0026#8221; such as on phones, PCs, Xbox, HoloLens, and IoT devices.\nUWP was introduced in Windows 10, which provides a common app platform available on every device that runs Windows 10. The UWP provides a guaranteed core API across devices. This means that developers can create a single app package that can be installed onto various devices. And, with that single app package, the Windows Store provides a unified distribution channel to reach all the device types your app can run on. Apps that target the UWP can call not only the WinRT APIs that are common to all devices but also APIs (including Win32 and .NET APIs) that are specific to the class of device that the app is running on.\nUWP is Microsoft\u0026#8217;s initiative to have everything in one place \u0026#8211; Windows Store.\nIndependent Software Vendor ISV was the second term we noticed when exploring the new Windows Store application. A software product made and sold by an independent software vendor (ISV) runs on one or more hardware or operating system (OS) platforms. ISVs often work with a hardware, software, or cloud platform vendor to offer software. When it comes to hardware, a software developer creates software compatible with the hardware platforms of one or more specific vendors and the OSes those platforms support. By including database technology from Microsoft, for example, an ISV may also incorporate software from a software platform provider into its offering.\nFor instance, any company that offers its software solution on a marketplace like Salesforce AppExchange is an ISV.\nComputer hardware manufacturers and operating systems will test Independent software suppliers seeking to sell their software solutions on their marketplace and cloud computing platforms. They will, however, only permit—or ISV certifies—independent software suppliers who can provide the most useful and superior software solutions in their markets.\nFor example, Microsoft, a company that develops computer hardware (Xbox), operating systems (Windows), and a cloud platform (Azure),\u0026nbsp;offers silver and gold ISV certifications to independent software vendors\u0026nbsp;whose products can pass their rigorous quality tests and prove they can offer the top software solutions to Microsoft’s customers on each of their marketplaces.\nDeploying Apps Using The New Windows Store Coming back to the new store! By now, you have an idea of the difference between the new \u0026amp; legacy app store and UWP \u0026amp; ISV. So, let\u0026#8217;s publish the app we added in the first app.\nFor this case, I want to publish the Paint 3D app as \u0026#8220;Available\u0026#8221; in Company Portal so that the users can install it on their own. So, this app package remains where it is and isn\u0026#8217;t getting imported into your Intune storage. When this app is later installed on a device, Intune instructs the device to install directly from its defined Microsoft Store location.\nThe user needs to open the company portal on his/her Windows 10/11 device and look for the apps available to install.\nWrapping-Up This new approach has a number of benefits, especially the in-app curation flow, because there is currently a substantial amount of ISV support.\nThe connection between Intune and the new Microsoft Store is intended to pave the way for helping enterprises with this transition because, as we all know, Microsoft has stated that they will be closing the Microsoft Store for Business very soon!\nReferences:\nAdd Microsoft Store apps to Microsoft Intune | Microsoft Learn\n","externalUrl":null,"permalink":"/posts/say-hi-to-the-new-microsoft-store-in-intune/","section":"Posts","summary":"The brand-new Microsoft App Store is now generally available.","title":"Say Hi! to the New Microsoft Store in Intune","type":"posts"},{"content":"Imagine a scenario: Your Mac fleet houses a growing universe of data, valuable and vulnerable in equal measure. This ever-expanding data sprawl threatens to spiral out of control, a potential security nightmare. But fear not, for there's a guardian in the wings: mSCP.\nThis isn't a secret government agency (though it sounds like it could be), but a powerful tool that can revolutionize your Mac data security. Developed through a collaborative effort between the National Institute of Standards and Technology (NIST), National Aeronautics and Space Administration (NASA), Defense Information Systems Agency (DISA), and Los Alamos National Lab (LANL), mSCP equips you with a programmatic approach to generating security guidance, empowering you to Secure, Contain, and Protect your Mac data like never before.\nThis blog post will be your guide to wielding mSCP like a seasoned pro. We'll delve into the \"why\" and \"how\" of using mSCP, transforming you from a data security novice into a master of your Mac domain. So, buckle up and get ready to learn how mSCP can be your secret weapon in the fight for watertight Mac data security!\nThe Mac Data Menagerie: Why We Need mSCPThe ever-evolving landscape of Mac data presents a unique challenge for IT professionals. Here's why mSCP emerges as a vital tool:\nData Deluge: Our Macs accumulate data at an alarming rate. Documents, emails, applications – the list goes on. This sprawl makes it difficult to track, categorize, and secure sensitive information. mSCP helps you classify your data, ensuring proper protection for the most critical assets.Security Silos: Traditional security solutions often operate in isolation. mSCP offers a unified approach, allowing you to develop a comprehensive security strategy that integrates seamlessly with your existing workflows.Compliance Conundrums: Navigating a complex web of data privacy regulations can be daunting. mSCP provides a framework for aligning your Mac security practices with compliance requirements, saving you time and headaches.The Human Factor: Even the most robust security measures can be compromised by human error. mSCP empowers you to implement automated security protocols, minimizing the risk of user mistakes.The Power of mSCP: Taking Control of Your Mac SecurityNow that we've established the urgency of managing your Mac data menagerie, let's dive into the specific benefits mSCP offers:\nStreamlined Security Baseline Creation: mSCP provides pre-defined security baselines tailored to different macOS versions. These serve as a starting point, allowing you to customize them based on your organization's specific needs. This eliminates the need to build security configurations from scratch, saving you significant time and effort.Automated Compliance Checks: mSCP helps you identify gaps between your current security posture and relevant compliance regulations. Imagine being automatically notified of areas needing attention to meet industry standards, like HIPAA or PCI DSS. This proactive approach minimizes the risk of non-compliance penalties.Risk-Based Prioritization: mSCP doesn't overwhelm you with a laundry list of security settings. It empowers you to prioritize based on potential risk. This allows you to focus on the most critical controls first, ensuring maximum security with efficient resource allocation.Customizable Guidance Generation: mSCP isn't a one-size-fits-all solution. It allows you to generate detailed security guidance documents specific to your organization's environment. These documents serve as a clear roadmap for your IT team to implement and maintain optimal Mac security.Centralized Management: Imagine managing security configurations across your entire Mac fleet from a central location. With mSCP, you can achieve this by integrating it with various Mobile Device Management (MDM) solutions. This centralized approach simplifies administration and streamlines security enforcement.Getting Started with mSCP: Your Guide to Mac Data Security MasteryNow that you're armed with the knowledge of mSCP's benefits, let's roll up your sleeves and get started! Here's a roadmap to guide you through the mSCP implementation process:\nPrerequisitesA Mac with macOS 14.0 or later.A mobile device management (MDM) solution to configure and distribute settings to Apple devices.A wireless or wired network to which all of the devices can connect and which provides access to Apple authentication servers and Apple Push Notification service (APNs)Clone The RepositoryOpen your browser, access the following URLGitHub - usnistgov/macos_security: macOS Security Compliance ProjectmacOS Security Compliance Project. Contribute to usnistgov/macos_security development by creating an account on GitHub.GitHubusnistgovIt is required that before you use the repository, you go through the wiki to learn more about the repository’s structure.Open Terminal and type the following command and press Return:\u0026nbsp;mkdir macOS_securityType the following command and press Return:\u0026nbsp;cd macos_securityType the following command and press Return:\u0026nbsp;git clone https://github.com/usnistgov/macos_security.git\nType the following command and press Return:\u0026nbsp;cd macos_securityAfter you clone the mSCP repository to your Mac, you’ll need to install the required Python and Ruby software.In Terminal, type the following command and press Return:\u0026nbsp;pip3 install -r requirements.txt --userType the following command and press Return:\u0026nbsp;bundle installYou’ve successfully installed the additional software required to use the mSCP.Explore Your Cloned mSCP RepositoryAfter you’ve cloned the mSCP repository to your Mac and installed the required software, you can explore the mSCP components. You can view the files in the cloned repository using the text editor of your choice.\nIn Terminal, type the following command and press Return:\u0026nbsp;open ./Open the baselines folder.Understand the Rules YAML FormatmSCP offers a library of files stored in a format called YAML. These files, located in the \"rules\" folder, connect to specific compliance requirements outlined in various security guides and policies. You can view and even edit these YAML files using most code editors, like Xcode or BBEdit.\nEach file is organized into specific sections, containing key information needed to build and deploy security baselines for your Mac devices. These sections are already filled with appropriate configurations to get you started. The following table breaks down the purpose of each section within the YAML files.\nGenerate a BaselineSecurity baselines are essentially recipes for keeping your Macs safe. Each recipe utilizes specific ingredients, represented by individual security rules. These rules come with labels, known as metadata tags, that identify which recipes (baselines) they belong to.\nCreating these recipes is where the generate_baseline.py script comes into play. This script acts as a special program you can run to search through a collection of pre-defined security rules. You simply tell it a keyword (like \"encryption\" or \"network access\"), and the script finds all the rules related to that keyword.\nUsing those matching rules, the script then creates a customized \"security recipe\" for you. This recipe, saved as a .yaml file, outlines the specific security settings you need to implement on your Macs. This simplifies documenting and enforcing the desired security posture across your entire fleet. Essentially, the script does all the heavy lifting by finding the ingredients (rules) and putting them together in a clear recipe (baseline) for you. You can find this script within the \"scripts\" folder of the project you downloaded.\nIf you are not already in Terminal, open\u0026nbsp;Finder, and select\u0026nbsp;Applications. Click the\u0026nbsp;Utilities\u0026nbsp;folder. Launch\u0026nbsp;Terminal.\u0026nbsp;Change to the\u0026nbsp;macos_security\u0026nbsp;directory by entering the following command:\ncd macos_securityIn Terminal, list the available baselines using the following command:\n./scripts/generate_baseline.py -lYou will see a list of all of the available default baselines. For this tutorial, you will use the\u0026nbsp;cis_lvl1\u0026nbsp;baselineGenerate GuidancemSCP allows you to take your YAML security rules and transform them into practical instructions for your Mac environment. This process involves a helpful Python script named generate_guidance.py.\nIf you're not already using Terminal, launch it by going to Applications \u0026gt; Utilities in Finder.Use the\u0026nbsp;cd\u0026nbsp;command (change directory) to navigate to the directory containing your mSCP files. For example, if you downloaded mSCP to your Downloads folder, you would type\u0026nbsp;cd Downloads/macos_security\u0026nbsp;Here's the magic part! Type the following command and press Enter:./scripts/generate_guidance.py -p -s baselines/cis_lvl1.yaml Explanation of the Flags:-p: This flag tells the script to generate configuration profiles and PLIST files (special Mac settings files). -s: This flag instructs the script to create a script for compliance checking. This script helps you verify if your Macs adhere to your security guidelines.baselines/cis_lvl1.yaml: This part specifies the location of your security baseline file. You can replace\u0026nbsp;cis_lvl1.yaml\u0026nbsp;with the actual filename of your baseline.Finding the ResultsOnce the script finishes running, open Finder and navigate back to the macos_security directory. You'll find a new folder named after your baseline (e.g., cis_lvl1). This folder contains all the generated files, including configuration profiles, compliance checking scripts, and human-readable security guidance documents.\nYou will see a list of all the available default baselines. You now have all the files required to deploy with Microsoft Intune.Fine-Tuning Security Baselines for Your NeedsWhile this tutorial won't cover customizing baselines in detail, it's valuable to know how to tailor them to your organization's specific security requirements. 💡Remember, it's crucial to only modify the fields you understand.The pre-populated configurations in the baseline files are a good starting point. If unsure about a specific field, it's best to consult the mSCP documentation or seek guidance from a security professional.\nHere's the basic idea:\nLocate the rule you want to modify within the \"rules\" folder. Make a copy of this file and move it to a new folder called \"custom\" (you might need to create this folder yourself). This ensures you don't accidentally alter the original rule.Right-click on the copied YAML file and select \"Open With.\" Choose your preferred code editor, such as BBEdit or Xcode.This is where you get to personalize the rule. You can remove any fields you don't need to modify for your organization. Additionally, you can adjust the values within specific fields to align with your security policies.Understanding the Example:The provided screenshot (not included here) likely shows the rule file \"system_settings_time_server_configure.yaml\" opened in Xcode. In this example, you'll see that the time server has been set to \"time.apple.com.\" This represents the specific setting being modified within the rule.\nTechnical Jargon Explained:\ncom.apple.MCX:\u0026nbsp;This technical term identifies the payload type as defined by Apple. It essentially defines the category of setting being adjusted.payload property called timeServer:\u0026nbsp;This refers to the specific property within the payload (setting category) that's being modified. In this case, \"timeServer\" tells you it's the address of the Network Time Protocol (NTP) server the Mac device should connect to for accurate timekeeping.By following these steps and understanding the example, you can confidently customize existing security rules in mSCP to create a robust security posture tailored to your organization's needs. 💡Remember, if you're unsure about modifying specific fields, it's always recommended to consult the mSCP documentation or seek help from a security professional.Putting Baselines into Action with IntuneOnce you've generated baseline files using mSCP, you can leverage them to create a comprehensive baseline within Microsoft Intune. This baseline will consist of three key components:\nProfiles: Remember the command you ran earlier to generate guidance? This command not only created human-readable documents but also produced two crucial files:\nAudit PLIST file:\u0026nbsp;This file resides in the\u0026nbsp;../build/{baseline}/preferencesdirectory. It allows you to set exemptions to specific security rules based on your company's unique policies. Think of it as an exception list for security settings.Mobileconfig files:\u0026nbsp;Each of these files contains the essential parameters required to create configuration profiles within Intune. These profiles essentially translate the security settings from your mSCP baseline into actionable configurations for your Macs.Scripts: mSCP also generates a compliance script located in ../build/{baseline}/{baseline}_compliance.sh. This script plays a vital role:\nValidation:\u0026nbsp;It checks your managed Mac devices to see if they adhere to the security settings defined in your mSCP baseline.Remediation (Optional):\u0026nbsp;If configured, the script can also take corrective actions (remediation) on devices that don't comply with the baseline. For example, it could automatically activate a specific security setting that's missing on a device.By combining these components (profiles, audit PLIST, and compliance script), you can establish a robust and automated security baseline for your Macs managed through Intune. This ensures your devices consistently maintain the desired security posture as defined by your organization's policies.\nPreparation:Intune Access:\u0026nbsp;Ensure you have access to the Microsoft Intune admin center.Device Enrollment:\u0026nbsp;Verify that your Macs are enrolled in Microsoft Intune for device management.Once you've generated the security baseline components using mSCP, it's time to leverage them within Microsoft Intune to enforce the desired security posture on your Macs. Here's a step-by-step guide for each element:\n1. Deploying Baselines (.mobileconfig Files):\nNavigate to \"Devices\" \u0026gt; \"Configuration profiles\" \u0026gt; \"Create profile\" in the Intune admin center.Select \"macOS\" as the platform for this profile.Choose \"Custom\" as the profile type for direct configuration settings import.Provide a descriptive name and optional description for your profile.Under \"Settings,\" click \"Browse\" and select the relevant mobileconfig file generated by mSCP. This file resides in the\u0026nbsp;../build/{baseline}/\u0026nbsp;directory (replace\u0026nbsp;{baseline}\u0026nbsp;with your actual baseline name).Choose the Mac devices or device groups you want to enforce this security baseline upon. Use filters to define specific deployment criteria.Carefully review the configuration details and click \"Create\" to deploy the profile to your targeted devices.2. Deploying Baseline Compliance Script:\nLocate the compliance script generated by mSCP in ../build/{baseline}/{baseline}_compliance.sh.Upload the script and deploy it to the required group.3. Deploying Audit PLIST:\nThis step allows exemptions defined in the audit PLIST file to be utilized.\nCreate a new configuration profile in Intune.Choose \"preference file\" as the profile type for importing the PLIST settings.Enter the path to your audit PLIST file (likely\u0026nbsp;../build/{baseline}/preferences/{audit_plist_filename}.plist). Assign this profile to the same devices or groups targeted by the main security baseline profile.4. Deploying Custom Attributes:\nThis section explores deploying custom attributes for reporting purposes and we will be creating the below 4 custom attributes:\nBaseline versionExemptions countFailed compliance check countList of failed compliance check resultsBy following these steps and referring to the provided resources for optional configurations, you can effectively deploy the various components of your mSCP-generated security baseline within Intune. This will establish a centralized and automated security posture, ensuring your Macs adhere to your organization's security policies.\nVerifying Security Posture: A Simple View for Peace of MindOnce you've deployed the security baselines generated by mSCP using Intune, you'll gain a newfound sense of control and visibility. Intune provides a user-friendly interface that allows you, the IT admin, to see at a glance the security posture of your entire Mac fleet.\nImagine a dashboard where you can see:\nDevice Name:\u0026nbsp;This identifies each individual Mac in your fleet.OS Version:\u0026nbsp;This displays the current macOS version running on each device.Security Baseline:\u0026nbsp;This crucial column showcases the specific mSCP-generated security baseline that's currently enforcing settings on each Mac. With a single glance, you can verify which security profile is in effect for each device.Status:\u0026nbsp;This column displays a clear indicator of the deployment status for each baseline on each Mac. Ideally, it will show \"Success,\" signifying a successful deployment. However, it could also indicate any potential errors that might have occurred during deployment.This centralized view empowers you to easily identify Macs that:\nLack a security baseline altogether.Have outdated baselines that require updates to ensure they adhere to the latest security standards.Might have encountered deployment errors, requiring troubleshooting to ensure proper security enforcement.The Power of VisibilityBy leveraging mSCP and Intune, you gain a clear and concise picture of your Mac security landscape. This allows you to take proactive measures to:\nEnsure all Macs are protected by a robust security baseline.Identify and address any deployment issues promptly.Maintain a consistent and centralized security posture across your entire Mac fleet.This newfound visibility translates to peace of mind, knowing your Mac data is shielded by a comprehensive and well-managed security strategy.\nConclusion: Mastering Mac Security with mSCP and IntunemSCP empowers you to craft robust security baselines specifically for your Macs. With a few clicks in Intune, you can effortlessly deploy these baselines to your entire fleet. Intune's user-friendly interface provides a centralized view of your Mac security posture, allowing you to identify missing baselines, outdated configurations, and potential deployment errors. Optional features like automated compliance checks and detailed reporting offer even deeper insights. By leveraging mSCP and Intune, you gain complete control over Mac security, ensuring your data remains protected and your organization stays secure. Explore mSCP today and experience the power of automated security baselines!\n💡All the scripts and baselines used in this blog will be uploaded to my GitHub by tonight, so you can get started right away!","externalUrl":null,"permalink":"/posts/secure-contain-protect-your-data-deploy-mscp-with-intune/","section":"Posts","summary":"Imagine a scenario: Your Mac fleet houses a growing universe of data, valuable and vulnerable in equal measure.","title":"Secure, Contain, Protect... Your Mac: Deploy mSCP with Intune","type":"posts"},{"content":" Overview There has always been a perception that macOS devices are safer than Windows PCs in terms of security. The idea that Apple devices are impenetrable, or secure is widespread. But those times are long gone, as both platforms have seen zero-dat attacks and number of vunerabilities exposed in every OS release.\nI\u0026#8217;ll provide you with a list of configurations and settings in this article that you may use to strengthen the overall security of your macOS device fleet.\nDisclaimer: This guide is provided on an \u0026#8216;as is basis without any warranties. You are responsible if you break anything or if something stops functioning as it should.\nBenchmarks This guide is based on recommendations from the Center for Internet Security (CIS) Benchmark as they are globally recognized and consensus-driven best practices for cybersecurity defences.\nUser Accounts \u0026amp; Access When you power on the Macbook for the first, it goes through setup assistant screen which ask you to set a name, a username, and a password in order to set up your first user account. This account by default becomes the local administrator. Administrator accounts have the ability to modify or remove any file and install any program, which could be dangerous if the program is malicious. Disable password hints on logon windowForce logon window to show username and password screenDisbale Guest accountsRemove guest home folderEnable file name extensionsEnable parental controls System Preferences \u0026amp; Restrictions With Microsoft Intune, you can configure and enforce configurations and restrictions as minimum standard baselines for securing your MacBooks. These configurations \u0026amp; restrictions will help in protecting remote attacks on the device.\nDisable Bluetooth and Bluetooth Discoverable Mode Apple does not allow MDM vendors to control the Bluetooth payload directly, so you will not find any setting in Intune portal to disable Bluetooth. However, you can still push a custom bash script to disable Bluetooth on your corporate macOS devices.\n#!/bin/sh $ sudo defaults write/Library/Preferences/com.apple.Bluetooth ControllerPowerState -int 0 $ sudo killall -HUP bluetoothd Enforce set time and date automatically Secure screen-saver corners and inactivity level There is no default configuration available for securing the screensaver, but you can use the script available here to configure hot corner settings \u0026#8211; Github\nDisable Sharing: Disable Remote Apple Events in SharingDisable Internet SharingDisable Screen SharingDisable Printer SharingDisable Remote Login (SSH)Disable DVD or CD SharingDisable Bluetooth SharingDisable File SharingDisable Remote Management Energy Saver Enable FileVault Enable Encryption of all volumes Enable Firewall, Gatekeeper \u0026amp; Stealth Mode Enable location services and disable sending diagnostic data to Apple Block iCloud backup Enforce Time Machine Auto Backups Block Game Center Enable security audits and retain logs for at least 60-90 days. Updates \u0026amp; Patches Using Intune, you can easily create \u0026amp; deploy OS update policies to ensure that your macOS devices are always updated and fully patched.\nEnable Auto Update Enable app update installs Enable system data files and security update installs Configure Update Policies for macOS Network Configurations Few network configurations are also required to reduce the network-based attacks on the corporate devices.\nConfigure FirewallBefore you Block all incoming connections, ensure that you allow signed software in the firewall setting to receive incoming connections to allow digitally signed applications access to your network without prompting.Configure the firewall policy to block all inbound and outbound traffic that isn’t expressly permitted as an organization policy.Enable \u0026#8220;Wi-Fi\u0026#8221; status to be shown in menu bar.Block FTP, HTTP \u0026amp; NFS Enable \u0026amp; Activate Antivirus Protection It is true to some extent that Mac is a bit more secure as compared to Windows but still they can be infected by malware, malicious softwares/files or any zero-day attacks. To make sure, your devices are always protected, an enterprise endpoint security platform should always be installed on these devices.\nYou can refer to one of my previous article, to onboard the corporate owned macOS devices in Microsoft Defender for Endpoint:\nmacOS Management with Intune – Part II \u0026#8211; Intune \u0026#8211; In Real Life (intuneirl.com)\nSecurity Configurations With Intune, you can easily create and enforce baseline security policies to keep the corporate MacBooks secure.\nEnforce strong password policies Enforce password age \u0026amp; history requirements\u0026#8217; Configure keychain to be automatically locked in case of inactivity Block the root account Block auto-login If possible use managed Apple ID Enforce the mac to require password on wake-up or from screen saver Block access to modifying system preferences Configure a corporate wallpaper \u0026amp; screensaver Configure account lockout threshold Secure home folders Enforce the corporate naming convention for macOS devices Block USB \u0026amp; external storage/media Deploy software metering \u0026amp; inventory applications to keep a track of software installed on the MacBooks Secure access to EFI with stong password Block Airdrop as unmanaged location Wrapping Up It is an everlasting list and it depends upon how secure you want the devices to be. Many of the settings, restrictions or configurations we discussed are pretty simple and should always be implemented. However, before you implement any of these benchmark, it is always advisable to perform a risk assessment of your environment and based on the feedback you should implement the policies.\nI hope this will help you with configuring policies in Intune with giving more granular control over these modern and trendy devices. ","externalUrl":null,"permalink":"/posts/security-benchmark-for-macos-best-practice-guide/","section":"Posts","summary":"Overview There has always been a perception that macOS devices are safer than Windows PCs in terms of security.","title":"Security Benchmark for macOS - Best Practice Guide","type":"posts"},{"content":"You can now enforce\u0026nbsp;FileVault during Setup Assistant with macOS 14. You have the option as an Intune admin to either escrow the FileVault recovery key to your Entra ID or to display it during Setup Assistant.\nIn this article, I'll walk you through the steps of enabling FileVault during the macOS Setup Assistant and discuss how you can streamline this process using Intune, a mobile device management solution. By taking this proactive security measure, you can ensure the safety of your sensitive information and maintain peace of mind.\nWhat is FileVault and why is it important?FileVault is a disk encryption feature built into macOS that helps protect your data by encrypting your entire hard drive. It ensures that your files, documents, and sensitive information can only be accessed by someone with the correct password. FileVault uses the AES-XTS data encryption algorithm to protect full volumes on internal and removable storage devices. FileVault on a Mac with Apple silicon is implemented using Data Protection Class C with a volume key. On Mac computers with Apple silicon and Mac computers with the Apple T2 Security Chip, encrypted internal storage devices directly connected to the Secure Enclave leverage its hardware security capabilities as well as that of the AES engine. After a user turns on FileVault on a Mac, their credentials are required during the boot process.\nSo, why is FileVault important? The answer is simple: data security. In this digital age, we store a vast amount of personal and confidential information on our computers, including financial details, passwords, and sensitive work documents. Without proper encryption, this data is at risk of being accessed or stolen by hackers, thieves, or even unauthorized individuals.\nBy enabling FileVault during the macOS Setup Assistant, you are taking a proactive step to safeguard your data effortlessly right from the start. The process is straightforward and requires no technical expertise, making it accessible to users of all levels.\nThe ChallengeEnsuring the highest level of data security is paramount for any enterprise allowing Macs within its technological ecosystem. The integration of Macs into an MDM solution necessitates a proactive approach to safeguard sensitive information. Foremost in this security strategy is the activation of FileVault, Apple's powerful disk encryption program, on all Mac devices as they are enrolled.\nIt's critical to understand, that, Microsoft Intune cannot currently activate FileVault during initial device setup using Settings Catalog and you can expect to be released soon.\nIn development - Microsoft IntuneThis article describes Microsoft Intune features that are in development.Microsoft LearndougebyThis procedural gap poses a significant risk; it leaves a window of vulnerability where sensitive data could be exposed to unauthorized access. In an ideal scenario, the activation of FileVault would be an integral step of the enrollment process, ensuring that from the moment a Mac is registered, its data is encrypted and protected.\nThe Solution: ForceEnableInSetupAssistantUsing the\u0026nbsp;ForceEnableInSetupAssistant\u0026nbsp;key in a configuration profile, you can enforce to turn on FileVault during Setup Assistant. This ensures that the internal storage in managed Mac computers is always encrypted before being used. Depending on your MDM policies, you can decide whether to show the FileVault recovery key to the user or to escrow the personal recovery key. 💡For this feature to work, the user account that was created interactively during Setup Assistant must have the role of Administrator.Also, it is important to understand here that, if\u0026nbsp;you are using this payload then the system also ignores all other keys in this payload, except for\u0026nbsp;ShowRecoveryKey.\nTo bridge this gap, I created the below custom configuration profile to ship this key to the Mac, which will be used during enrolment. \u0026lt;?xml version=\"1.0\" encoding=\"UTF-8\"?\u0026gt; \u0026lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"\u0026gt; \u0026lt;plist version=\"1.0\"\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;PayloadContent\u0026lt;/key\u0026gt; \u0026lt;array\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;DeferForceAtUserLoginMaxBypassAttempts\u0026lt;/key\u0026gt; \u0026lt;integer\u0026gt;-1\u0026lt;/integer\u0026gt; \u0026lt;key\u0026gt;Enable\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;On\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;ForceEnableInSetupAssistant\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;OutputPath\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;\"https://portal.manage.microsoft.com\"\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadDisplayName\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;FileVault-SA\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadIdentifier\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;com.apple.MCX.FileVault2.ED155FB6\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadType\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;com.apple.MCX.FileVault2\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadUUID\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;E0BC271E-6339-4338-BB4D\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadVersion\u0026lt;/key\u0026gt; \u0026lt;integer\u0026gt;1\u0026lt;/integer\u0026gt; \u0026lt;key\u0026gt;UserEntersMissingInfo\u0026lt;/key\u0026gt; \u0026lt;false/\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/array\u0026gt; \u0026lt;key\u0026gt;PayloadDescription\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;Enable Filevault in Setup Assistant\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadDisplayName\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;filevault2\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadIdentifier\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;IRL.BB074437-36A8-4AE5-A82F-D9062972B3FD\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadOrganization\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;IRL\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadScope\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;System\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadType\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;Configuration\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadUUID\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;23524AC4-F0E0-4B0D-ADC1-D75AC20D34BF\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadVersion\u0026lt;/key\u0026gt; \u0026lt;integer\u0026gt;1\u0026lt;/integer\u0026gt; \u0026lt;key\u0026gt;TargetDeviceType\u0026lt;/key\u0026gt; \u0026lt;integer\u0026gt;5\u0026lt;/integer\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/plist\u0026gt; Configure The Profile in Intune\nFollow the below steps to deploy this custom configuration profile to your Mac devices:\nSign in to the\u0026nbsp;Microsoft Intune admin centerNavigate to Devices-\u0026gt;macOS-\u0026gt;Configuration ProfilesSelect\u0026nbsp;Create-\u0026gt;New PolicyProfile type: Select\u0026nbsp;Custom. Or, select\u0026nbsp;Templates\u0026nbsp;\u0026gt;\u0026nbsp;CustomIn\u0026nbsp;Basics, enter the name \u0026amp; description\nConfiguration profile name: Enter a name for the policyDeployment channel: Select device channelConfiguration profile file: Browse to the\u0026nbsp;.mobileconfig\u0026nbsp;fileAssign the profile to the required group.DemoThe ResultWith the profile in place, FileVault activation became a non-negotiable aspect of the Setup Assistant, effectively closing the initial security gap. Users proceeded through the familiar setup flow, witnessing FileVault seamlessly enabled in the background, without requiring any additional interaction.\nAnd, by leveraging the optional \"Disable FileVault recovery key creation\" setting, the setup process remained user-friendly while maintaining robust security. Stay tuned for more valuable insights on securing your Mac.\n","externalUrl":null,"permalink":"/posts/security-without-sweat-enabling-filevault-during-macos-setup/","section":"Posts","summary":"You can now enforce\u0026nbsp;FileVault during Setup Assistant with macOS 14.","title":"Security Without Sweat: Force Enable FileVault During macOS Setup Assistant","type":"posts"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"Today, we're going to be addressing a peculiar issue that many Mac users have been experiencing. You might have heard from them directly or noticed a few comments and feedback left by users expressing their concerns about this.\nThe issue, which seems to crop up once or twice every week, involves M365 applications that are in use - primarily Outlook, Teams, Word, and Excel. Users describe an unusual sequence of events where all the open apps suddenly cease operation simultaneously, exiting and disappearing from the dock in a blink.\nWhat adds a further twist to this situation is that these applications don't stay gone for long. Just as unexpectedly as they vanished, they make their reappearance on the dock, ready to be launched again.\nGiven its unpredictable nature and its inexplicable occurrence, it can be frustrating and disrupt the workflow of users. This blog post aims to explore this mystery further. By identifying the potential causes, I hope to provide solutions to overcome them, thereby enhancing the user experience of M365 on Mac systems.\nSo, stay tuned as we dive deep into this tech enigma, dissecting it bit by bit to bring clarity and solutions to you.\nUnderstanding Microsoft AutoUpdateMicrosoft AutoUpdate (MAU) is a utility designed to help you manage updates for Microsoft applications on macOS. It ensures that your Word, Excel, PowerPoint, Outlook, and other Microsoft apps are always up-to-date with the latest security fixes and improvements. It can be set to automatically check for updates or be manually managed, giving you control over when and how your applications are updated.\nBy default, MAU will perform version checks against Microsoft’s Content Delivery Network (CDN) on the Internet to determine whether the locally installed app has an update available. If an update is available, MAU will determine the smallest package to download to bring the locally installed version of the app up-to-date.\nThere are two scenarios where enterprise IT admins might want better control over the update workflow:\nThe ability for MAU to use a local network source for retrieving update packages instead of the Microsoft CDN on the Internet. This scenario is good for ‘branch’ scenarios, and cases where Internet bandwidth is limited. For this scenario, MAU can be configured to use a ‘UpdateCache’.An enterprise might want to have strict control over which version of Office applications can be installed. For example, Microsoft releases production quality updates on the second or third Tuesday of each month. An enterprise might want to temporarily prevent users from updating to the new build to verify compatibility with custom applications. For this scenario, MAU can be configured to use a custom ‘ManifestServer’.Both of the scenarios above can be deployed independently, or together, depending on the requirements of the business. MAU 3.8 or later is required to support both of these scenarios.\nUnderstanding How MAU WorksBefore you start configuring policies for MAU, it is necessary to understand that it actually works.\nThe Microsoft AutoUpdate (MAU) checks for application updates every 12 hours by examining a version number that is embedded in an XML file, commonly referred to as a 'manifest,' which is located online. This version number is then contrasted with the version of the app that is presently installed on the local system. If the background process detects that the XML file points to a more recent version than the installed one, the full MAU application window pops open, prompting users to execute an update.\nThe process breakdown is as below:\nChecking for Updates: By default, MAU periodically checks for updates in the background. It communicates with Microsoft servers to see if there are any new patches, improvements, or features available for your installed Microsoft applications.Download and Installation: Depending on the settings you've chosen, MAU either notifies you about available updates or directly downloads and installs them. If you've opted for automatic updates, the process happens in the background, ensuring your Microsoft applications are always current.Update Notifications: If your settings allow for it, MAU will send you a notification whenever updates are available. You can then choose whether to download and install the updates immediately or delay them for a later time.Application Closure for Updates: Some updates may require the target application to close for successful installation. MAU will prompt you to close the application if it is running during the update process.System Restart: Certain significant updates might need a system restart to be fully integrated. MAU will notify you and request a system restart after the installation of such updates.How to Access Microsoft AutoUpdate on macOS\nAccessing Microsoft AutoUpdate on your macOS is straightforward. There are three simple ways to access MAU on your Mac:\nMethod 1: From a Microsoft Office App\nOpen any Microsoft application, such as Word or Excel. In the menu bar at the top of the screen, click on \"Help,\" and then select \"Check for Updates.\" This will open the Microsoft AutoUpdate tool.\nMethod 2: Running Microsoft AutoUpdate\nIf you're unable to locate the \"Check for Updates\" option within the Help menu of your Microsoft applications, fret not, you can still ensure that you have the latest version by downloading the Microsoft AutoUpdate tool. Follow this link: Download Microsoft AutoUpdate 4.61 Package to download the AutoUpdate installer file. By simply clicking the link, the download of the AutoUpdate tool should commence automatically.\nMethod 3: Using the App Store\nExploring Microsoft AutoUpdate Options\nManual Updates: In your Microsoft apps, you can manually check for updates by clicking on the 'Help' menu and selecting 'Check for Updates'. This will open the MAU interface, where you can view any available updates and manually initiate their download and installation.Automatic Updates: If you prefer not to manually check for updates, you can configure MAU to download and install updates automatically. This is particularly useful as it ensures you always have the most recent version of the application without needing to remember to check for updates regularly.Scheduled Updates: MAU can also be set to check for updates on a specific schedule. This can be configured in the 'How would you like updates to be installed?' section in the MAU interface.Choosing Update Channel: With MAU, you can also select your preferred update channel, for instance, 'Current,' 'Monthly Enterprise,' 'Semi-Annual Enterprise,' or 'Beta'. The update channel you're subscribed to can influence the frequency and type of updates you receive.Configuring Microsoft AutoUpdateYou have multiple ways to Configure MAU\nMicrosoft Intune Settings CatalogCustom ProfileWith the Service release 2307 of Microsoft Intune, Microsoft has added the MAU configuration in the settings catalog, so now no need to deploy custom profiles for managing MAU 😍👍👌 https://learn.microsoft.com/en-us/mem/intune/fundamentals/whats-new#new-settings-available-in-the-macos-settings-catalog-\nSettings CatalogStarting with version 4.13 of Microsoft AutoUpdate (MAU), you can set a deadline for when updates are required to be installed on a user’s Mac. Users will receive notifications about the upcoming deadline and can temporarily postpone the updates from being installed. But once the deadline is reached, any applications the user has open will be closed and the updates applied.\nTo configure your Microsoft AutoUpdate settings, follow these steps:\nSign in to the Microsoft Intune admin center.Select Devices \u0026gt; macOS \u0026gt;Configuration profiles \u0026gt; Create profileSelect Settings catalog.Select Create.Select Next.In Configuration settings, select Add settings. In the settings picker, search for \"MAU\" to select all the available settings.You can set a deadline for any of the following applications:\nAn individual application, such as just Word.A group of applications, such as Word, Excel, and PowerPoint.All Microsoft applications that are updated by MAU. Once you have configured the settings, the profile may look like this:\nCustom ConfigurationsIntune allows you to control the MAU configurations using a custom profile. Similar to the settings catalog, you can configure all the options using a custom configuration profile. An example of the configuration profile is available on my GitHub:\nmacOS/mau_policy.mobileconfig at main · pathaksomesh06/macOSmacOS. Contribute to pathaksomesh06/macOS development by creating an account on GitHub.GitHubpathaksomesh06ConclusionUp until now, managing updates for Microsoft applications on managed Macs was somewhat intricate. It necessitated the creation of custom profiles and adjusting configurations to align with specific needs. In a world where zero-day vulnerabilities are frequently discovered, it's critically important to keep user devices updated with the latest security patches. However, the update behavior of Microsoft apps also had the potential to impact user experience.\nThe inclusion of options to configure Microsoft AutoUpdate (MAU) in the settings catalog of the latest service promises to simplify this process. This development paves the way for more effective management and deployment of updates on your end users' Macs, minimizing disruption to the user experience. By gaining a deeper understanding of these settings and tailoring them to your needs, you can effortlessly maintain up-to-date applications, whether you favor automatic updates or prefer a more manual approach.\nRemember, the world of tech is always changing, so keep an eye out for any updates to AutoUpdate itself and stay ahead of the curve.\n","externalUrl":null,"permalink":"/posts/controlling-update-behaviour-for-microsoft-applications-on-macos-using-microsoft-autoupdate/","section":"Posts","summary":"Today, we're going to be addressing a peculiar issue that many Mac users have been experiencing.","title":"Set a Deadline For Office Updates on macOS using MAU","type":"posts"},{"content":"Setting up a new Mac can feel like navigating a stormy sea for both IT admins and new users. Traditional Mac onboarding often involves a tedious process of manual configuration, software installation, and security settings application. This can lead to:\nLengthy Deployment Times:\u0026nbsp;IT teams spend valuable time managing individual devices, hindering productivity.Security Vulnerabilities:\u0026nbsp;Inconsistent manual configuration can leave devices exposed to security threats.Frustrated Users:\u0026nbsp;Complicated setup processes can be confusing and time-consuming for new users, hindering their adoption of the device.This blog post explores how to utilize swiftDialog alongside Microsoft Intune to create a dynamic and informative onboarding experience for macOS users.\nWorking in Harmony: A Seamless Onboarding ExperienceImagine this: a new employee receives their Mac. They power it on, connect to the network, and are greeted by a clear, intuitive swiftDialog interface. Intune, working behind the scenes, automatically pushes the necessary configuration profiles, security settings, and applications. The user simply follows the on-screen prompts, entering their credentials, enrolling in multi-factor authentication, or selecting preferred language settings.\nThroughout this process, swiftDialog provides a familiar Mac experience, guiding users through each step with minimal technical jargon. Once complete, the user is presented with a ready-to-use Mac, pre-configured for their specific needs and compliant with organizational security policies.\nWhat is swiftDialog?swiftDialog is an open-source utility specifically designed for macOS. It allows administrators to create interactive dialog boxes that can be triggered during the execution of shell scripts. These dialogs go beyond simple messages; they can be used to actively guide users through the onboarding process. Here's a breakdown of its capabilities:\nInformative Communication:\u0026nbsp;swiftDialog allows administrators to display clear and concise messages to users. This can be used to explain the purpose of each configuration step, highlight important security policies, or provide contextual information.Interactive Input Collection:\u0026nbsp;More than just displaying information, swiftDialog can actively collect user input. This can include gathering credentials for logins, prompting users to make enrollment choices (like multi-factor authentication), or collecting preferences for language settings.User-Friendly Options:\u0026nbsp;swiftDialog allows for the presentation of various options to users during the setup process. This can involve providing clear buttons for selection (like \"Continue\" or \"Cancel\") or presenting radio buttons or checkboxes for multi-choice options.Customization for a Smooth Experience:swiftDialog isn't just about functionality; it's also about creating a visually appealing and informative experience. Administrators have a high degree of control over the appearance of the dialogs. This includes:\nText Content:\u0026nbsp;Customize the text displayed in messages, prompts, and buttons to clearly communicate with users.Visual Appeal:\u0026nbsp;Control the look and feel of the dialogs, including fonts, colors, and even the inclusion of relevant icons.Tailored Options:\u0026nbsp;The number and type of buttons, checkboxes, or radio buttons can be tailored to the specific needs of each step in the onboarding process.Why Integrate swiftDialog with Microsoft Intune?By leveraging swiftDialog's capabilities, you can create a user-friendly and interactive onboarding experience. This streamlines the onboarding process for users while ensuring consistency and adherence to security policies. You can imagine it as Autopilot for Macs.\nThis integration not only saves time but also standardizes the onboarding process, ensuring consistency across the organization.\nImplementation OverviewHere’s a step-by-step guide to build your own customised and branded onboarding experience using Swift Dialog with Microsoft Intune:\nPrepare Your Scripts and JSON Configurations:Begin by crafting a swiftdialog.json file which will dictate the behavior of swiftDialog, such as the dialog's title, message, and any list items that need user interaction. Sample code is as below:{ \"title\": \"Welcome to IRL Automated MacOnboarding.\", \"message\": \"Your computer setup is underway. Feel free to step away, this could take 30 minutes or more. \\n\\nYour computer will restart when it's ready for use\", \"blurscreen\": true, \"moveable\": false, \"ontop\": true, \"width\": \"800\", \"icon\": \"/Library/Application Support/Microsoft/IntuneScripts/Swift dialog/icons/IRL.png\", \"centreicon\": false, \"iconsize\": \"100\", \"listitem\": [ {\"title\": \"Company Portal\", \"icon\": \"/Library/Application Support/Microsoft/IntuneScripts/Swift dialog/icons/CompanyPortal.png\", \"status\": \"pending\", \"statustext\": \"Pending\"}, {\"title\": \"Microsoft Office\", \"icon\": \"/Library/Application Support/Microsoft/IntuneScripts/Swift dialog/icons/office.png\", \"status\": \"pending\", \"statustext\": \"Pending\"}, {\"title\": \"Microsoft Edge\", \"icon\": \"/Library/Application Support/Microsoft/IntuneScripts/Swift dialog/icons/Edge.png\", \"status\": \"pending\", \"statustext\": \"Pending\"}, {\"title\": \"Microsoft VS Code\", \"icon\": \"/Library/Application Support/Microsoft/IntuneScripts/Swift dialog/icons/vscode.png\", \"status\": \"pending\", \"statustext\": \"Pending\"}, {\"title\": \"Microsoft Remote Desktop\", \"icon\": \"/Library/Application Support/Microsoft/IntuneScripts/Swift dialog/icons/RemoteDesktop.png\", \"status\": \"pending\", \"statustext\": \"Pending\"}, {\"title\": \"Microsoft Defender\", \"icon\": \"/Library/Application Support/Microsoft/IntuneScripts/Swift dialog/icons/Defender.png\", \"status\": \"pending\", \"statustext\": \"Pending\"}, {\"title\": \"Microsoft Teams\", \"icon\": \"/Library/Application Support/Microsoft/IntuneScripts/Swift dialog/icons/Teams.png\", \"status\": \"pending\", \"statustext\": \"Pending\"}, {\"title\": \"Adobe Acrobat Reader\", \"icon\": \"/Library/Application Support/Microsoft/IntuneScripts/Swift dialog/icons/Acrobat.png\", \"status\": \"pending\", \"statustext\": \"Pending\"}, {\"title\": \"FileVault\", \"icon\": \"/Library/Application Support/Microsoft/IntuneScripts/Swift dialog/icons/FileVault.png\", \"status\": \"pending\", \"statustext\": \"Checking status...\"} ], \"buttonarray\": [ { \"buttontitle\": \"Contact IT Helpdesk\", \"buttonactiontype\": \"open\", \"buttonaction\": \"mailto:it-helpdesk@example.com?subject=Enrollment%20Issue\u0026amp;body=Please%20see%20attached%20enrollment%20log.\u0026amp;attachment=file:///Library/Application%20Support/Microsoft/IntuneScripts/onBoarding/onboarding.log\", \"key\": \"i\" } ] } As a quick start, you should change the following:titlemessageicon(s)listitem(s)You’ll also need the icons \u0026amp; scripts that perform various onboarding tasks, like verifying FileVault, installing software, or running initial configuration scripts.The folder structure should be as below:Package Your Scripts:Place your scripts and the JSON configuration file into a directory.Compress this directory into a .zip file, ensuring that all necessary scripts and configurations are included.Deploy Via Microsoft Intune:Upload the .zip file to a suitable cloud storage platform that your Intune setup can access.Use Intune to deploy the onboarding script to all your Macs. This script will download and execute your onboarding script. This script should unpack the .zip file and run swiftDialog with the appropriate settings.Monitor and Adjust:Once deployed, monitor the execution and user interaction with the onboarding dialogs.Make adjustments based on feedback and logs to improve the script or dialog prompts.Demo: End User ExperienceBenefits of Using swiftDialog with IntuneConsistency: Standardizes the onboarding process across all macOS devices in the organization.Efficiency: Automates repetitive tasks and information dissemination, freeing up IT resources.User Experience: Provides users with a visually appealing and informative onboarding process, enhancing their first interaction with their new device.Bon Voyage! Setting Sail with ConfidenceBy integrating Microsoft Intune's centralized device management with swiftDialog's user-friendly interface, organizations can transform Mac onboarding into a smooth and efficient voyage. New users are greeted by a clear, informative experience, guided through essential setup steps, and equipped with the necessary tools for success. This streamlined approach empowers users to become productive quickly, minimizing frustration and maximizing adoption.\nFor IT teams, this powerful duo translates to smoother seas. Manual configuration tasks become automated, security is consistently enforced, and centralized management frees up valuable resources for more strategic initiatives. Combined, Microsoft Intune and swiftDialog offer a robust solution that empowers both users and IT to navigate the onboarding process with confidence.\nReady to set sail for effortless Mac enrollment? Explore Microsoft Intune and swiftDialog today, and experience the difference for yourself!\nResources:\nhttps://github.com/microsoft/shell-intune-samples\nhttps://github.com/swiftDialog/swiftDialog\n","externalUrl":null,"permalink":"/posts/set-sail-for-smooth-seas-effortless-mac-enrollment-with-intune/","section":"Posts","summary":"Setting up a new Mac can feel like navigating a stormy sea for both IT admins and new users.","title":"Set Sail for Smooth Seas: Effortless Mac Enrollment with Intune","type":"posts"},{"content":"IT support has developed into a crucial component of any modern organization as we become more reliant on digital tools and remote work. Yet, it can be daunting due to the amount of manual work involved, especially for large organizations. Thankfully, Microsoft’s Power Platform is here to simplify things.\nThis blog post will guide you through creating a self-service IT support bot using Power Virtual Agents and Microsoft Teams, particularly focusing on managing devices enrolled in Microsoft Intune. This blog will be followed by another post with a device management app with Power Apps, powered by Microsoft Teams and Azure AD.\nGetting Started Power Virtual Agents allows anyone, regardless of their technical expertise, to create intelligent chatbots capable of resolving common issues. It integrates seamlessly with Power Automate, Microsoft's tool for creating automated workflows between apps and services. I wanted my bot to be capable of automatically starting conversations and managing devices enrolled in Microsoft Intune. High-Level Steps Set up Power Virtual Agents in Teams: The first step is adding Power Virtual Agents to Microsoft Teams. The bot is designed to automatically greet the user and offer a list of common issues.Define the Bot's Skills: Next step is defining topics - the specific areas the bot is equipped to discuss, like 'Device Compliance Status', 'Passcode Resets', 'Troubleshooting Guides', and 'Software Updates'. For each topic, it requires designing a conversation flow using an intuitive graphical interface. The flow often involves asking the user for more information, like a device ID.Integrate Power Automate: In all these scenarios, the bot's capabilities are powered by backend flows created in Power Automate. These flows start with an HTTP request trigger that receives the Device ID from the bot. Prerequisites To create and manage Power Virtual Agents chatbots in Teams, you need:\nA license to use TeamsLicenses to use Power Virtual AgentsRequired permissions for using Graph APIsIntune AdminPower Automate For this blog post, I have created a few common topics that are the most common support requests for managing devices enrolled in Intune. You can add additional scenarios such as Feature Update, Bitlocker Key, on-demand Sync, and much more.\nLet’s get started!\nCreate A Bot Go to the Power Virtual Agents home page.In the navigation menu select Create. You can also select Home then select Create a Bot. For Name your bot, enter a name for your bot.For What language will your bot speak, select the language you want your bot to speak.Select Create. Create Topics Microsoft's Power Virtual Agents allows you to create topics to help guide conversations with users. Topics are essentially dialog trees that your bot can follow based on keywords or phrases provided by the user. Here's how to create new topics.\nOnce in the Topics page, find the option \"New Topic\" usually at the top,ö and click on it. This will open a new topic creation page.First, give a name to your topic. After that, input some trigger phrases. These are phrases that you anticipate your users might say that would make the bot start this topic. For example, I am creating a topic about 'Password Reset', trigger phrases could include \"I want to reset my password\", \"How can I reset my domain password?\" etc.Once you've set up your trigger phrases, start creating the conversation flow for your bot. This is where you'll design the path of interaction the bot will take once a topic is triggered.Use the Message node to send messages to the user.Use the Question node to ask something to the user.Use the Condition node to create conditional paths in your conversation.Use the Call an action node to connect with Power Automate flows, which allow you to connect to external systems.Use the End with survey node to close a conversation and ask for feedback. Author \u0026amp; Edit The Conversation Flow Let's take an example of the Greetings topic. This is the first topic, which will initiate the dialog between your user and the Bot. Here, I have modified the sample topic in my bot.\nFirst, I modified the trigger phases, so that the conversation can start. You can also modify the index.html file to let the Bot automatically start the conversation.\nNext, I incorporated a \"question\" node where the bot greets the user by their name and provides them with a list of options for which the bot can offer assistance.\nDepending on the user's selection from the response options, I have implemented conditions to guide the conversation to the relevant topics. For instance, if a user chooses \"Device Compliance\", the bot will then direct the conversation toward the \"Device Compliance\" topic.\nTo achieve this transition, you need to have the topics created and configured.\nRevisiting the example, let's assume the user chooses \"device compliance\". In this scenario, the bot transitions the conversation to the \"device compliance\" topic. Within this topic, I've also incorporated triggers so that if users need to verify the compliance of their registered device, they can directly access this topic.\nTo foster a more productive conversation, the bot is programmed to inquire about the specific device platform for which the user wishes to check compliance. This is a useful feature, considering it's common for a user to have multiple devices.\nNow we're at the point where you'll be interacting with Graph APIs. Based on the user's chosen platform, I've stored the response in a variable that's then utilized within Power Automate. I've employed the \"call an action\" node to invoke the Power Automate flows configured to execute this sequence.\nTo ensure an interactive conversation, I've incorporated conditions to capture the user's response. For example, we can determine whether the user needs to be redirected to a service desk agent for additional support, or whether they are satisfied with the assistance they've received.\nLet's consider a different scenario, such as a Passcode Reset. Since the passcode reset command is exclusively applicable to iOS and iPadOS devices, the bot will autonomously verify any such devices the user has registered in Intune and will display the device details. The user is then prompted to enter the device ID for the device that needs unlocking.\nIf the device unlock attempt is unsuccessful, the conversation is then routed to a readily available Service Desk agent for further assistance. The design as below:\nQuick Demo 0:00 /2:30 1× \u0026lt;/figure\u0026gt; Wrapping Up The combination of Power Virtual Agents and Power Automate can significantly streamline IT support and device management. Not only does it automate many manual tasks, but it also ensures users get immediate help when needed, and IT administrators have the tools they need to manage devices effectively.\nI hope this walkthrough inspires you to explore how Microsoft’s Power Platform can transform your organization. Remember, every organization is unique, so feel free to tweak the steps to best suit your needs. Happy building!\n","externalUrl":null,"permalink":"/posts/building-a-self-service-mem-bot-using-power-virtual-agents-and-power-automate/","section":"Posts","summary":"IT support has developed into a crucial component of any modern organization as we become more reliant on digital tools and remote work.","title":"Simplifying MDM Support with Power Virtual Agents and Power Apps","type":"posts"},{"content":"In a previous article, we explored how to control update behavior for Microsoft applications on macOS using Microsoft AutoUpdate and Microsoft Intune. However, the journey towards achieving a seamless update management experience doesn’t end here.\nSet a Deadline For Office Updates on macOS using MAUThe inclusion of options to configure Microsoft AutoUpdate (MAU) in the settings catalog of the latest service promises to simplify this process.Intune - In Real LifeSomesh PathakRecently, while going through discussions on the MacAdmins community, I noticed that many of us are still grappling with the challenge of apps getting auto-updated without much control or user interaction. This concern resonated with me and motivated me to delve deeper into how we can enhance the end-user experience while ensuring that our systems remain up-to-date and secure.\nIn this blog post, we will explore the intricacies of this functionality and discuss the key differences between setting update deadlines based on days and specific date/time. We will also delve into the advantages and considerations of using the 'number of days' method versus the 'specific date, time, and version' method for tighter update control.\nSetting Update Deadlines Based on DaysStarting with version 4.13 of Microsoft AutoUpdate (MAU), you can set a deadline for when updates are required to be installed on a user’s Mac. Users will receive notifications about the upcoming deadline and can temporarily postpone the updates from being installed. But once the deadline is reached, any applications the user has open will be closed and the updates applied.\nAdvantages of Setting Update Deadlines Based on Days:\nFlexibility in scheduling updates: By setting update deadlines based on the number of days, you have more flexibility in determining when updates should be enforced. This allows your end users to plan their other activities like meetings, etc.Prioritization based on urgency: With the ability to set deadlines based on days, you can also prioritize updates according to their urgency. Critical security updates can be enforced sooner, while non-essential updates can be scheduled for a later date.Managing update rollouts: Setting update deadlines based on days is particularly useful when managing update rollouts across different departments or teams. It allows for staggered deployment, ensuring that all systems are updated within a specified timeframe without overwhelming the network or causing disruptions.To configure a deadline that is a certain number of days after the update is detected, use the following preference setting:\nFor example, to configure a specific date and time for a deadline for Word and Outlook you can use something like this:\n\u0026lt;key\u0026gt;UpdateDeadline.ApplicationsForcedUpdateSchedule\u0026lt;/key\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;/Applications/Microsoft Word.app\u0026lt;/key\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;Application ID\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;MSWD2019\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;ForcedUpdateDate\u0026lt;/key\u0026gt; \u0026lt;date\u0026gt;2023-10-25T20:01:20Z\u0026lt;/date\u0026gt; \u0026lt;key\u0026gt;ForcedUpdateVersion\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;16.27.19071500\u0026lt;/string\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;key\u0026gt;/Applications/Microsoft Outlook.app\u0026lt;/key\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;Application ID\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;OPIM2019\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;ForcedUpdateDate\u0026lt;/key\u0026gt; \u0026lt;date\u0026gt;2023-10-28T20:01:20Z\u0026lt;/date\u0026gt; \u0026lt;key\u0026gt;ForcedUpdateVersion\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;16.27.19071500\u0026lt;/string\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/dict\u0026gt;Deadline Notifications For UsersOnce the Automatic Download and Install feature is activated, MAU will seamlessly update any closed applications. If an application is open and can't be updated, a notification will alert users about an impending deadline. At this point, users have the option to save their work, close the active applications, and allow MAU to proceed with the updates. Doing so will eliminate any further deadline notifications for those specific applications.\nIf users prefer not to update immediately, they have the option to delay the updates. In this case, they will receive subsequent reminders as the deadline approaches. Initially, users can opt to be reminded again after a specific number of hours, but postponing beyond the deadline is not an option.\nAs the deadline nears—specifically, one hour before it—users will receive a continuous notification accompanied by a countdown timer. If the deadline is reached and the users have not saved their work or closed their applications, MAU will automatically close the applications, without saving any data, and initiate the updates.\nYou have the flexibility to extend the grace period by adjusting the deadline timer settings. The default grace time is 60 minutes, but this can be increased. For instance, if you wish for the countdown to commence 3 hours before the deadline, you can set the timer to 180 minutes.\nDeadline preference for MAUThe simplest setting to configure is the \"number of days\" deadline for all applications after an update is identified. This setting can be adjusted at the same top-tier level of the configuration profile, within the 'mcx_preference_settings' key dictionary, alongside other parameters like 'HowToCheck,' 'UpdateCheckFrequency,' and 'ChannelName.' Even with this global setting in place, you still have the flexibility to specify different deadlines for individual applications further down in the profile.\n💡Ensure that you configure the IgnoreUIOpenAfterInstall setting in Microsoft AutoUpdate (MAU) as it is used to control the behavior of applications after they have been updated. Specifically, when this setting is enabled, it prevents the updated applications from automatically launching or reopening after the update process is complete.I have pasted the example of the MAU profile, that I use in my tenant and it works perfectly fine. The end users are happy as the apps are no longer force closed.\n\u0026lt;?xml version=\"1.0\" encoding=\"UTF-8\"?\u0026gt; \u0026lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"\u0026gt; \u0026lt;plist version=\"1.0\"\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;PayloadContent\u0026lt;/key\u0026gt; \u0026lt;array\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;AcknowledgedDataCollectionPolicy\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;RequiredDataOnly\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;Applications\u0026lt;/key\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;/Applications/Company Portal.app\u0026lt;/key\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;Application ID\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;IMCP01\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;LCID\u0026lt;/key\u0026gt; \u0026lt;integer\u0026gt;1033\u0026lt;/integer\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;key\u0026gt;/Applications/Microsoft Defender.app\u0026lt;/key\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;Application ID\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;WDAV00\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;LCID\u0026lt;/key\u0026gt; \u0026lt;integer\u0026gt;1033\u0026lt;/integer\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;key\u0026gt;/Applications/Microsoft Edge.app\u0026lt;/key\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;Application ID\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;EDGE01\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;LCID\u0026lt;/key\u0026gt; \u0026lt;integer\u0026gt;1033\u0026lt;/integer\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;key\u0026gt;/Applications/Microsoft Excel.app\u0026lt;/key\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;Application ID\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;XCEL2019\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;LCID\u0026lt;/key\u0026gt; \u0026lt;integer\u0026gt;1033\u0026lt;/integer\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;key\u0026gt;/Applications/Microsoft OneNote.app\u0026lt;/key\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;Application ID\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;ONMC2019\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;LCID\u0026lt;/key\u0026gt; \u0026lt;integer\u0026gt;1033\u0026lt;/integer\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;key\u0026gt;/Applications/Microsoft Outlook.app\u0026lt;/key\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;Application ID\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;OPIM2019\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;LCID\u0026lt;/key\u0026gt; \u0026lt;integer\u0026gt;1033\u0026lt;/integer\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;key\u0026gt;/Applications/Microsoft PowerPoint.app\u0026lt;/key\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;Application ID\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;PPT32019\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;LCID\u0026lt;/key\u0026gt; \u0026lt;integer\u0026gt;1033\u0026lt;/integer\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;key\u0026gt;/Applications/Microsoft Remote Desktop.app\u0026lt;/key\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;Application ID\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;MSRD10\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;LCID\u0026lt;/key\u0026gt; \u0026lt;integer\u0026gt;1033\u0026lt;/integer\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;key\u0026gt;/Applications/Microsoft Teams.app\u0026lt;/key\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;Application ID\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;TEAMS10\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;LCID\u0026lt;/key\u0026gt; \u0026lt;integer\u0026gt;1033\u0026lt;/integer\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;key\u0026gt;/Applications/Microsoft Word.app\u0026lt;/key\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;Application ID\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;MSWD2019\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;LCID\u0026lt;/key\u0026gt; \u0026lt;integer\u0026gt;1033\u0026lt;/integer\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;key\u0026gt;/Applications/OneDrive.app\u0026lt;/key\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;Application ID\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;ONDR18\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;LCID\u0026lt;/key\u0026gt; \u0026lt;integer\u0026gt;1033\u0026lt;/integer\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;key\u0026gt;/Applications/Skype for Business.app\u0026lt;/key\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;Application ID\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;MSFB16\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;LCID\u0026lt;/key\u0026gt; \u0026lt;integer\u0026gt;1033\u0026lt;/integer\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;key\u0026gt;/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app\u0026lt;/key\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;Application ID\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;MSau03\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;LCID\u0026lt;/key\u0026gt; \u0026lt;integer\u0026gt;1033\u0026lt;/integer\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;key\u0026gt;ChannelName\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;Production\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;DisableInsiderCheckbox\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;ExtendedLogging\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;HowToCheck\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;Manual\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;IgnoreUIOpenAfterInstall\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;PayloadDisplayName\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;Microsoft AutoUpdate\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadIdentifier\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;com.microsoft.autoupdate2.1EBE1309-AD76-4386-9F1D-6BF39AFE5336\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadType\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;com.microsoft.autoupdate2\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadUUID\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;1EBE1309-AD76-4386-9F1D-6BF39AFE5336\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadVersion\u0026lt;/key\u0026gt; \u0026lt;integer\u0026gt;1\u0026lt;/integer\u0026gt; \u0026lt;key\u0026gt;UpdateCheckFrequency\u0026lt;/key\u0026gt; \u0026lt;integer\u0026gt;12\u0026lt;/integer\u0026gt; \u0026lt;key\u0026gt;UpdateDeadline.DaysBeforeForcedQuit\u0026lt;/key\u0026gt; \u0026lt;integer\u0026gt;3\u0026lt;/integer\u0026gt; \u0026lt;key\u0026gt;UpdateDeadline.FinalCountDown\u0026lt;/key\u0026gt; \u0026lt;integer\u0026gt;15\u0026lt;/integer\u0026gt; \u0026lt;key\u0026gt;UpdaterOptimization\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;CPU\u0026lt;/string\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/array\u0026gt; \u0026lt;key\u0026gt;PayloadDescription\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;Configure deadline for MAU\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadDisplayName\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;MAU - Deadline-Configurations\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadIdentifier\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;IRL-8C0901E8-5C54-4406-9F54-1E8CED765611\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadOrganization\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;IRL\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadRemovalDisallowed\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;PayloadType\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;Configuration\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadUUID\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;8C0901E8-5C54-4406-9F54-1E8CED765611\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;PayloadVersion\u0026lt;/key\u0026gt; \u0026lt;integer\u0026gt;1\u0026lt;/integer\u0026gt; \u0026lt;key\u0026gt;TargetDeviceType\u0026lt;/key\u0026gt; \u0026lt;integer\u0026gt;5\u0026lt;/integer\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/plist\u0026gt; ","externalUrl":null,"permalink":"/posts/streamline-your-mac-experience-with-ms-auto-update-tool/","section":"Posts","summary":"In a previous article, we explored how to control update behavior for Microsoft applications on macOS using Microsoft AutoUpdate and Microsoft Intune.","title":"Streamline Your Mac Experience with Microsoft Auto Update Tool","type":"posts"},{"content":"In my previous exploration, we delved deep into the world of Apple Identity Services and Platform Single Sign-On (PSSO). If you haven't had the chance to read it yet, I highly recommend starting there for a solid foundation:\nThe Apple Connect: Bridging Identity Services with SSOApple’s integration of IdP with SSO is a game-changer in digital identity and access management. This innovative merge offers a seamless, secure user experience. It simplifies authentication across various services, enhancing productivity in enterprise environments.Intune - In Real LifeSomesh PathakBuilding on that knowledge, this new post takes a crucial step forward. Platform Single Sign-On (SSO) on macOS has evolved, offering groundbreaking capabilities that are particularly beneficial for enterprises utilizing shared devices. This advancement enhances the integration of corporate identities into the macOS ecosystem, streamlining both the user experience and device management. Here are some key features and their implications:\nSo, let's dive into the transformative world of macOS user roles and privileges, redefined by platform SSO.\nThe Core ChallengesAdmin Rights: A fundamental challenge in integrating Macs into enterprise environments has been the automatic assignment of full administrative rights to the primary user who enrolls the device. This situation presents a significant security risk, as it grants more control than necessary for most users. In a corporate setting, where control and security are paramount, this default setting can lead to a range of issues, from accidental system misconfigurations to potential internal security breaches. Comparative Analysis with Windows Platforms: Contrasting this with the Windows platform, where user privilege management is more granular and controlled, highlights the disparity. In Windows environments, IT administrators typically have the flexibility to assign varying levels of access rights to different users. This system allows for a more nuanced approach to security and user management, where users receive only the permissions necessary for their role. This level of control is crucial in enterprise settings, as it reduces the risk of security incidents and ensures a more stable and manageable IT environment.But We Always Had WorkaroundsBefore the advent of more sophisticated solutions like Platform SSO, IT administrators managing Macs in enterprise environments had to rely on various workarounds to mitigate the risks associated with primary users gaining full administrative rights. These workarounds, while creative, often came with their own set of limitations and were only partially effective.\nUser Role Restructuring: One common approach was to manually change the primary user's role from an administrator to a standard user after the initial setup. Scripted Solutions: Some MDM admins turned to scripting. Scripts were written and deployed to automatically adjust user privileges post-enrollment. While this automated part of the process, it still didn't offer the granularity and flexibility needed for diverse enterprise environments.Third-party Management Tools: Another strategy involved the use of third-party Mac management tools. These tools provided more control over user accounts and privileges but often at the cost of additional complexity and expense. They also introduced a dependency on external software, which might not always align with the organization's IT policies or standards.Policy Enforcement via Network Controls: In some cases, network-level controls and policies were implemented to restrict what administrative users could do, especially regarding network resources and critical systems. This approach was more about containment than prevention, as it did nothing to change the user's actual privileges on the Mac itself.Each of these workarounds had its drawbacks. They were often seen as stop-gap solutions – measures that could reduce risks but not eliminate them. They also added layers of complexity and management overhead, detracting from the user experience and efficiency.\nAlright! Enlighten MeIn my previous article, we discussed and explored how platform SSO presents a more integrated and streamlined approach, overcoming many of these historical challenges. The steps are in the link below:\nStep-by-Step Guide on Setting Up Platform SSO\nThe Apple Connect: Bridging Identity Services with SSOApple’s integration of IdP with SSO is a game-changer in digital identity and access management. This innovative merge offers a seamless, secure user experience. It simplifies authentication across various services, enhancing productivity in enterprise environments.Intune - In Real LifeSomesh PathakThe Next Level: On-Demand Local Account CreationPerhaps the most significant advancement is the ability of Platform SSO to support the on-demand creation of local accounts at the login window. When a new user authenticates using credentials from their organization's IdP, macOS can now automatically create a new local user account. This feature is a game-changer for organizations that use shared devices, as it:\nEnhances Security: Each user accesses the device with their unique credentials, ensuring that activity and access are individualized and traceable.Improves User Experience: New users can quickly get started without needing pre-configured accounts, making it ideal for environments where device sharing is common.Reduces IT Overhead: Automating the user creation process significantly reduces the workload on IT teams, eliminating the need for manual account setup for each new user.To achieve this, certain requirements need to be in place for the local account creation to happen.\nUseSharedDeviceKeys: It's enabled by using a shared device key that allows the device to maintain a trusted connection to the Entra ID, independent of a specific user.Connectivity with the Identity ProviderThe Mac must be able to establish a connection with your Entra ID. This connection is vital for authenticating user credentials and ensuring that the user is authorized to access the device.Device State - Login Window with FileVault Unlocked: The device needs to be at the login window, and FileVault should be unlocked. This state ensures that the device is secure but ready to set up a new user account upon successful authentication.MDM Support for Bootstrap Tokens: The MDM system must support Bootstrap Tokens. Bootstrap Tokens play a critical role in enabling a seamless and secure user experience, especially in scenarios involving the creation of new user accounts on macOS devices.User Authentication: With these conditions met, users can then authenticate using their Entra ID username and password, or a SmartCard. Assignment of User Permissions: Post-authentication, user permissions are assigned based on Identity Provider groups. Defining Access Levels through MDM Profiles: Intune profiles profile plays a pivotal role in defining the access level of the newly created account. It can specify whether the user receives standard user permissions, administrator privileges, or permissions based on their group membership in Entra ID.Local Account Creation with PSSODemo TimeAllow network users to log in at login window using configuration profile from Intune:Login Screen is now enabled for allowing network users to log in to the Mac.Currently there is only one user account available in Users \u0026amp; Groups\nCurrent user logout and new user attempts log-in(\"Tanush\" is my son's name 😊)\nLogin successful and Setup Assistant is launchedUser needs to go through Setup Assistant screens. There is no option to bypass this.And once the device is released from Setup Assistant screens, the Platform SSO kicks in and user is prompted the register the device.Device RegistrationNext, User registrationBased on Authorization Group in Settings Catalog, user is created as \"Standard User\"Platform SSO tokenConclusionThe enhancements in Platform SSO for macOS, particularly for shared devices, mark a significant stride in enterprise technology. By enabling on-demand local account creation at login, Apple addresses a critical need for tighter security and streamlined user management. This feature not only simplifies the Mac integration into enterprise environments but also underscores the commitment to evolving user and administrative needs.\nAs we wrap up this year, I'm excited about these developments and look forward to seeing how they'll improve our workflows and security.\nThat's all for now! I'd love to hear your thoughts and experiences with these new features. Your feedback not only enriches our shared knowledge but also helps in shaping our tech community. Here's to a year of great strides in technology, and to all of you, a fantastic year ahead!\n","externalUrl":null,"permalink":"/posts/taking-platform-sso-to-the-next-level-create-new-user-at-login/","section":"Posts","summary":"In my previous exploration, we delved deep into the world of Apple Identity Services and Platform Single Sign-On (PSSO).","title":"Taking Platform SSO to the Next Level: Create New Users At Login","type":"posts"},{"content":" Overview With the service release 2211 of Intune, password complexity settings for Android Enterprise 12+ devices have been changed. This brings a major change in Password complexity\u0026nbsp;settings for Android Enterprise.\nThe reason for the new password complexity settings is the latest Android OS \u0026#8211; Android 13 \u0026amp; API levels! With the release of the new OS, Google has mandated that all apps published to the Play Store must \u0026#8220;target\u0026#8221; or be \u0026#8220;optimized\u0026#8221; to work with the previous year\u0026#8217;s API version. Google Play has updated its requirements for Android\u0026#8217;s Target API Levels to increase app security.\nIn particular, an app must declare an \u0026#8220;API level\u0026#8221; released within two years of the most recent major version of Android if it is to be installed by users on the most current version of the Android OS.\nAlright, but how this is related to password complexity and how it could impact you as an organization?\nIt\u0026#8217;s a bit complicated and with this post I will try to explain the reasoning behind it and how it affects your organization.\nAndroid versions \u0026amp; Target API levels Whenever a new Android version is released, a unique \u0026#8220;name\u0026#8221; and a unique integer identifier, called \u0026#8220;API level\u0026#8221; is given to it. For eg:\nThe Android version, such as\u0026nbsp;Android 12.0 A code (or dessert) name, such as\u0026nbsp;Snow Cone A corresponding API level, such as\u0026nbsp;API level 31 An Android code name may correspond to multiple versions and API levels but each Android version corresponds to exactly one API level.\nEach Android device runs at exactly\u0026nbsp;one\u0026nbsp;API level – this API level is guaranteed to be unique per Android platform version. The API level precisely identifies the version of the API set that your app can call into; it identifies the combination of manifest elements, permissions, etc. Android\u0026#8217;s system of API levels helps Android determine whether an application is compatible with an Android system image prior to installing the application on a device.\nWhen an application is built, it contains the following API level information:\nThe\u0026nbsp;target\u0026nbsp;API level of Android that the app is built to run on. The\u0026nbsp;minimum\u0026nbsp;Android API level that an Android device must have to run your app. These settings are used to ensure that the functionality needed to run the app correctly is available on the Android device at installation time. If not, the app is blocked from running on that device. For example, if the API level of an Android device is lower than the minimum API level that you specify for your app, the Android device will prevent the user from installing your app.\nThe framework API is updated to give new or alternative capabilities with each new iteration of Android. With a few rare exceptions, older Android versions\u0026#8217; API functionality is preserved unchanged in later Android versions. As a result, if your app works on one version of the Android API, it should work without any changes on a later version. If you also want your app to work on older Android versions then some APIs may be unavailable to your app at runtime and your app may still work on older devices, albeit with limited functionality.\nBecause the Intune company portal is also available on Google Play, Microsoft must also adhere to the new target API level in order to keep the app compliant with Google\u0026#8217;s new privacy policies.\nWhat does that imply? From January 31, 2023, if an application targets API level 29 or lower, it will no longer be discoverable or installable through Google Play for new users with devices running Android 11 or higher, and thus distributing an application with a lower targetSDK will simply never appear on new devices. What this actually means for enterprise \u0026amp; public store applications?\nExisting devices remain unaffected. New devices enrolled running Android 10 or lower will receive the application without issue. New devices enrolled running Android 11 or later will\u0026nbsp;not\u0026nbsp;receive the application and will not see it within managed Google Play either. The earlier deadline was November 2022 but now Google has extend till Jan\u0026#8217;2023 with an extension request also available.\nHow this will affect your organization: In the API level 31, there are series of changes and updates which impact enterprise apps and devices (work-profile). Few of them are listed below:\nThe password complexity feature sets device-wide password requirements in predefined complexity buckets (High, Medium, Low, and None). If required, strict password requirements can instead be placed on the work profile security challenge. Onboarding for the work profile security challenge has been eased. Now that setup considers whether the device passcode satisfies admin requirements, it is simple for the user to decide whether to strengthen their device passcode or utilize the security challenges associated with their work profile. A factory reset won\u0026#8217;t affect an enrollment-specific ID, which offers a distinct ID that identifies the work profile enrollment in a specific organisation. In Android 12, access to the device\u0026#8217;s\u0026nbsp;hardware identifiers (IMEI, MEID, serial number) is disabled for personal devices with a work profile. Company-owned devices, with and without work profiles, can adopt the features listed in the preceding list items, but are not required to adopt them in Android 12. setPasswordQuality()\u0026nbsp;and\u0026nbsp;getPasswordQuality()\u0026nbsp;are deprecated for setting device-wide passcode on work profile devices that are personal devices rather than company-owned What to do to comply for your enterprise apps? The requirements are quite simple and straightforward:\nWhen you publish a new app, make sure to target API 31 or above. If your existing app’s target API level is 30 or above, then your app is compliant with this policy. Suppose your existing app’s target is below API 30. In that case, it will stop being discoverable to all Google Play users whose devices run Android OS versions newer than your apps’ target API levels, as your app wasn’t built to meet the safety and quality standards that these users expect from newer Android OS versions. If you plan to update this app to target API level 31 or above, you can submit an extension request to continue getting distributed to all users on Google Play until May 1, 2023. Impacted apps will receive an extension request form link in their Play Console Inbox message. What you need to do to prepare for Android Enterprise devices: There is no impact for existing devices where\u0026nbsp;Required password type\u0026nbsp;or\u0026nbsp;Minimum password length\u0026nbsp;settings are configured.\nIf you are using these settings and do not configure the new\u0026nbsp;Password complexity\u0026nbsp;setting, devices running Android 12 or higher will default to\u0026nbsp;Password complexity\u0026nbsp;High\u0026nbsp;in the following scenarios:\nWhen a new Android 12 or higher device is enrolled and is targeted with the existing policy. When a device updates to Android 12 or higher and the existing policy is edited. When a new work profile password policy is assigned to Android 12 or higher. Users will receive a prompt to update their password if they do not meet the password requirements.\nHowever, it is recommended that you update the policies in Intune for Required password type\u0026nbsp;and\u0026nbsp;Minimum password length\u0026nbsp;configurations with the\u0026nbsp;Password complexity\u0026nbsp;setting for devices running Android 12 or higher.\nConclusion I believe I was able to explain to you why these password policy changes are being enforced and how you can prepare yourself to accommodate them in your Intune tenant.\nReferences:\nhttps://aka.ms/Intune/Android13/?WT.mc_id=EM-MVP-5004955\nTarget API level requirements for Google Play apps \u0026#8211; Play Console Help\nhttps://learn.microsoft.com/en-us/xamarin/android/app-fundamentals/android-api-levels?tabs=windows/?WT.mc_id=EM-MVP-5004955\n","externalUrl":null,"permalink":"/posts/target-api-level-policy-changes-its-impact-on-enterprises/","section":"Posts","summary":"Overview With the service release 2211 of Intune, password complexity settings for Android Enterprise 12+ devices have been changed.","title":"Target API Level Policy Changes \u0026 Its Impact on Enterprises","type":"posts"},{"content":"Just a few months ago, we rolled out the shiny new iOS 17 and macOS Sonoma to our excited user base. As seasoned MDM admins, our pre-release ritual involved meticulously combing through Apple Seed and Microsoft documentation for potential service disruptions or security concerns. Everything seemed smooth sailing, and after passing our rigorous testing, both OS updates arrived at their production destinations.\nBut then, amidst the celebratory sighs, a storm cloud brewed: connecting managed iPhones to corporate Macs suddenly became a pain point. Our security policy? Only allowing corporate iOS devices to sync with specially managed Macs using Apple Configurator Certificates. This meant Macs needed a local copy of the trusted certificate to authorize the pairing – no certificate, no connection. Uh oh. But the certificates were installed \u0026amp; trusted. So what could have gone wrong? Was it Sonoma, iOS 17 or Xcode? Get ready to delve into the world of Apple complexities, unexpected updates, and the quest for seamless iPhone-Mac connections. Spoiler alert: Not only did I crack the case, but I also emerged with some key takeaways for fellow admins! Get ready for a dive into the trenches of MDM troubleshooting – let's do this!\nLet's Start With Basics FirstAccessory security, also referred to as \"Restricted Mode\", is a feature in macOS that aims to safeguard users against potential close-range assaults using wired devices. On Macs running macOS 13 or a newer version, the default setting prompts the user to grant permission for new accessories. There are four available choices in System Settings for granting permission to attach accessories:\nAsk every timeAsk for new accessoriesAutomatically when unlockedAlwaysUsing Microsoft Intune, you can control this setting by using allowUSBRestrictedMode\u0026nbsp;restriction.\nMDM Management of Host PairingFor supervised iPhones and iPads,\u0026nbsp;administrators wield the power to control USB pairing with a critical MDM restriction:\u0026nbsp;\"Allow pairing with non-Apple Configurator hosts.\" This restriction acts as a gatekeeper,\u0026nbsp;granting access only to trusted computers armed with valid supervision host certificates.\nThink of it this way:\u0026nbsp;activating the restriction empowers device management,\u0026nbsp;while distributing correct supervision identities provides unique security keys.\u0026nbsp;Only computers presenting the \"correct password\" - the valid certificate - gain entry.\u0026nbsp;No certificate?\u0026nbsp;The door remains firmly locked,\u0026nbsp;barring unauthorized connections.\nThis approach bolsters security by limiting access to authorized devices,\u0026nbsp;ensuring your organization's valuable data stays shielded.\u0026nbsp;Imagine the peace of mind knowing exactly which computers can interact with your corporate information!Plus,\u0026nbsp;it simplifies management through centralized control within your MDM solution.\nRemember,\u0026nbsp;this restriction complements Apple Configurator certificates,\u0026nbsp;not replacing them.\u0026nbsp;Think of it as adding another layer of defense.\u0026nbsp;By implementing this powerful feature,\u0026nbsp;you create a secure haven where only approved computers can connect,\u0026nbsp;safeguarding your data and empowering control over device interactions.\nEnrolment Profile in Intune and Connection ErrorThe enrolment profile was configured as per documentation\nWhen trying to connect the phone, the finder gave the below error:\nand, there were was no restriction in any other profile in Intune to block this.\nI was going crazy, if everything was configured correctly, why the sudden connection chaos? Unveiling the CulpritHitting a dead end felt like slamming into a brick wall. The only way forward? Hunt down the mysterious payload controlling this stubborn restriction. Sifting through error logs and Apple MDM docs, I stumbled upon a shocking truth: the \"allow_pairing\" setting had vanished with iOS 13 and iPadOS 13.1! It was supposed to be gone, a relic of the past. So, why in the world was it causing havoc in iOS 17 and Sonoma? If it was retired years ago, why was it suddenly causing issues in iOS 17 and Sonoma? This head-scratcher was still the mystery.\nAny pairing restrictions imposed at enrollment are irreversible and cannot be changed dynamically. Re-enrolling with the proper settings after erasing is your only choice. In that scenario, creating an iCloud backup is a legitimate data preservation method.\nUnpleasant Truth: A Fix with a Sting (But Security Wins)Alright, let's be honest: this solution isn't going to win you any popularity contests. Developers and users alike might raise an eyebrow (or two). But here's the deal: it's the only way out of this particular tech maze.\nReady? Here's the plan:\nFirst things first:\u0026nbsp;Remove the \"blocking sync\" setting from your enrollment profile. Think of it like taking down a security barrier.Wipe and re-enroll:\u0026nbsp;Yes, you read that right. It's a clean slate moment for your devices. Data backups are your friend here, so make sure they're in place.Push the restriction:\u0026nbsp;Once the devices are back in the game, use your Intune setting catalog to push the restriction again. This time, it should stick!Remember, security sometimes requires tough choices. This fix might not be the smoothest ride, but it ensures your data remains protected.\nBonus tip:\u0026nbsp;Consider communicating this change clearly to your users and developers beforehand. Transparency goes a long way in building trust, even when the solution isn't ideal.\nThe Hunt Continues: Securing Our MDM Kingdom, One Setting at a TimeSo, there you have it! Rest assured, with the \"block pairing\" restriction back in place, you regain control over device connections. You can grant access gradually, adhering to your organization's security guidelines, ensuring only authorized users and devices gain entry.\nRemember, the \"why\" behind the sudden malfunction remains a mystery. But hey, that's just another challenge in the exciting world of IT! This \"hunt \" has served as a valuable lesson, reminding us to stay vigilant and adapt to unexpected changes.\nUntil next time! May your endpoints be secure and your troubleshooting swift.\n","externalUrl":null,"permalink":"/posts/the-allow_pairing-caper-how-a-tiny-setting-sent-me-on-a-wild-goose-chase/","section":"Posts","summary":"Just a few months ago, we rolled out the shiny new iOS 17 and macOS Sonoma to our excited user base.","title":"The 'allow_pairing' Caper: How a Tiny Setting Sent Me on a Wild Goose Chase","type":"posts"},{"content":"Welcome to Part Six of the \"Apple Platform Deployment: An All-In-One Guide to Managing Apple Devices with Microsoft Intune\" series. As we continue our comprehensive journey through managing Apple devices with Microsoft Intune, this part will delve into the intricacies of Apple Identity Services and Single Sign-On (SSO).\nIn this segment, we will explore how Intune integrates with Apple Identity Services to streamline user authentication and access management, enhancing both security and user experience. We'll cover the setup and configuration of PSSO for Apple devices, and demonstrate how this can simplify access to corporate resources while maintaining robust security protocols.\nBy the end of this part, you will have a deeper understanding of how to effectively manage and secure Apple devices in your organization using Intune's advanced capabilities. Stay tuned as we uncover the potential of Apple Identity Services and SSO in the context of Microsoft Intune.\nHere's the link to the first five parts:\nThe need to manage devices and dataGetting Started - Apple Device Enrollment types \u0026amp; MDMDevice Deployment: ABM or ASM, or ABE? (intuneirl.com)Onboarding to ABMWhat is Apple Configurator \u0026amp; when to use it?Introduction to Apple Identity ServicesIn today's digital age, providing a seamless and user-friendly experience is crucial for businesses to succeed. One way to enhance user experience is through the implementation of Single Sign-On (SSO) solutions. Among the various SSO options available, Apple Identity Services offers a comprehensive and efficient solution for businesses using Apple devices. By integrating Apple's SSO capabilities with Microsoft Intune, businesses can streamline authentication processes and improve security measures. This comprehensive guide will walk you through the benefits and implementation steps of utilizing Apple Identity Services and SSO, helping you create a frictionless user experience for your customers.\nApple Services and Security: Understanding Authentication and AuthorizationThe cornerstone of any security protocol is authentication, the process of verifying a user's identity to ensure legitimacy. Apple implements various authentication methods, including single sign-on and a range of services such as personal and Managed Apple IDs, iCloud, iMessage, and FaceTime. These services enable users to securely communicate, create online documents, and back up personal data without jeopardizing their organization's information. Each service is underpinned by a distinct security framework, ensuring safe data handling, whether on an Apple device or in transit over wireless networks. Apple's commitment to privacy and security extends to safeguarding personal information and thwarting unauthorized access to data and services. Moreover, Apple's integrated mobile device management (MDM) framework bolsters these efforts, allowing MDM solutions to regulate and control access to specific services on Apple devices.\nIn contrast, authorization is about what users can do, following successful authentication. It involves supplying a username and password to an identity provider (IdP). Conceptually, the IdP is the authority, the username and password constitute the assertion of identity, and the token is what users receive after successful sign-in. Apple employs various token types and assertions, such as certificates, smart cards, and multi-factor devices, to enhance security.\nIdentity federation is another critical aspect, facilitating trust between different IdPs across security domains. This allows users to navigate between systems while maintaining robust security. For effective identity federation, administrators must establish mutually trusting domains and concur on a unified user identification method. A prevalent instance of identity federation is using an enterprise account to sign into an IdP. Apple has facilitated this by enabling federation between Google Workspace, Microsoft Azure Active Directory (Azure AD), and its own platforms like Apple School Manager, Apple Business Manager, and Apple Business Essentials. Consequently, users can employ their existing Google Workspace or Azure AD accounts for services like iCloud or Apple device sign-ins linked to Apple's educational and business management platforms. Effective federation often involves single sign-on methods or Kerberos Single Sign-on extensions, simplifying the user experience by negating the need for repeated identity verification.\nPlatform Single Sign-On (SSO): Revolutionizing Authentication Beyond Directory ServicesPlatform SSO represents a significant shift from traditional directory service binding, enhancing enterprise SSO capabilities. This advanced system not only facilitates single sign-on for applications and websites but also seamlessly integrates with macOS, eschewing the need for JavaScript or webpage rendering during the authentication process.\nAt the heart of Platform SSO's functionality is the secure storage of SSO tokens within the keychain, accessible exclusively to the SSO extension. This extension utilizes these tokens to authenticate users for both on-premises applications and web-based services as required. In situations where SSO tokens are absent, outdated, or older than four hours, Platform SSO proactively engages in refreshing or acquiring new tokens from the Identity Provider (IdP).\nCrucially, Platform SSO is designed to support a variety of authentication methods in conjunction with an IdP, ensuring a versatile and secure authentication solution. This approach not only streamlines the user experience but also bolsters security measures across diverse applications and web platforms. Platform SSO supports the following authentication methods with an identity provider (IdP):\nPassword and encrypted passwordPassword with WS-TrustUser secure enclave keySmartCardPlatform SSO can create new local user accounts on demand at the login window using IdP credentials, and also integrate IdP group membership with macOS. You can use network accounts for authorization, and groups can also authorize network accounts. Let's dive deeper to understand how PSSO actually works.\nCreating Extensions to Support Platform Single Sign-On (SSO) with Apple's FrameworkTo enable single sign-on (SSO) with an identity provider (IdP), it's essential to develop an SSO extension that is compatible with platform SSO and incorporates the essential features. This process includes specifying the grant types compatible with both the extension and the IdP. Additionally, you have the option to integrate support for platform SSO 2.0 and activate the use of the Kerberos SSO extension in conjunction with the platform SSO ticket-granting ticket (TGT).\nThe role of the extension is to facilitate the registration of devices and users, as well as to handle authentication processes with the IdP. The IdP server is responsible for managing login requests and responses, thereby completing the authentication cycle. For developers, an important aspect of the development phase is the ability to use Terminal commands to monitor messages from the IdP, enabling iterative improvements and fine-tuning of the configuration.\nImplement device and user registration.\nDeveloping a single sign-on (SSO) extension involves a specific sequence to register devices and users with an identity provider (IdP). The Platform SSO triggers the extension for these operations. Initially, the extension is tasked with registering the device, followed by registering users on that device.\nFor your SSO extension to effectively handle registration, it must implement the ASAuthorizationProviderExtensionRegistrationHandler protocol. This protocol is crucial as Platform SSO invokes its methods in scenarios where a device or user requires registration with the IdP, or when there's a need to repair an existing registration.\nRegister a Device:\nAn SSO extension is responsible for registering a device through the beginDeviceRegistrationUsingLoginManager:options:completion: method. The steps for the extension include:Registering the device with the relevant Identity Provider (IdP).Supplying Platform SSO with the necessary login configuration.Executing the completion handler once the process is complete.In instances where a registration token exists within the Device Management configuration profile, Platform SSO will initiate a silent device registration. The extension can utilize this registration token to authenticate the device with the IdP, potentially bypassing the need for user interaction. However, if user intervention is required, the system will display a user interface prompting the user to register, after which it will re-invoke beginDeviceRegistrationUsingLoginManager:options:completion:.\nIf the SSO extension must display a user interface during the registration process, it can invoke presentRegistrationViewControllerWithCompletion: on the login manager.\nUpon completion of the registration process, the SSO extension must call the completion handler with an ASAuthorizationProviderExtensionRegistrationResult. If this result is ASAuthorizationProviderExtensionRegistrationResultFailed, Platform SSO will automatically prompt the user for registration again after approximately 10 minutes. Users can also manually initiate registration via the register button under Settings → Users \u0026amp; Groups → Network Account Server. If the result is ASAuthorizationProviderExtensionRegistrationResultFailedNoRetry, Platform SSO will not attempt registration again until there are changes in the configuration or the extension.\nRegister a User:Following a successful device registration marked by ASAuthorizationProviderExtensionRegistrationResultSuccess, the SSO extension proceeds to user registration. This method is pivotal for setting up all users on a device, and it's also applicable when new users are created during the login process.\nIn scenarios involving shared device keys, user registration is initiated for each new user after the first one. If new users are created during login, they will be prompted to start the registration process when they first reach the desktop. The saveUserLoginConfiguration:error: method of the login manager is essential here for specifying changes to the per-user login configuration. In cases where a username has already been entered, it is passed through the userName parameter.\nOnce the user registration is completed, it's crucial for the SSO extension to invoke the completion handler. This action prompts the system to authenticate the user with the new configuration, enabling immediate use of platform SSO.\nMoreover, if the extension is updated to support the latest platform SSO 2.0 protocol methods and the system is using password authentication, it will interact with the key service to provision a new key. This key is then bound to the user account, enhancing security and personalization for each user on the device.\nHow Does Intune Works With Platform SSO?To facilitate platform SSO, the MDM platform utilizes the com.apple.extensiblesso payload, specifically tailored for redirect extensions. Within this payload, the ExtensibleSingleSignOn.PlatformSSO dictionary encompasses various configuration options for platform SSO. These options span from selecting the appropriate key or keys for use, assigning group memberships, and enabling user creation during login, to incorporating features for device and user registration.\nHow To Use The PSSO Dictionary?While the only mandatory key is \u0026lt;AuthenticationMethod\u0026gt; , it's advisable to implement the UseSharedDeviceKey option also. This method facilitates authentication for all users on the device, offering choices like Password, UserSecureEnclaveKey, or SmartCard. The SSO extension must be compatible with the chosen method to initiate registration or to switch between methods. For instance, a user account created during login with a username and password can later transition to a secure enclave backed key or SmartCard once the user is on the desktop. Additionally, the SSO extension can utilize the RegistrationToken for a seamless, silent device registration.\nTo leverage these recommended shared device keys, the PSSO profile should be configured as a system profile, as it applies to all users on the device. What About Group Membership in the PSSO Profile?Platform SSO utilizes the configuration you specify in the PSSO profile to request group memberships from the Identity Provider (IdP) i.e. Entra ID. When a device undergoes registration, if the Intune profile includes AdministratorGroups, it creates corresponding local groups and adds them as subgroups of the admin group. For AdditionalGroups specified in the profile, it forms local groups accordingly. However, managing the use of these additional groups for other services, such as sudo, requires separate handling. If AuthorizationGroups are specified, the system creates a local group and updates the relevant authorization right to include this group.\nDuring the authentication process, the system requests a comprehensive list of groups from Entra ID, and the login response includes the user's group memberships. Platform SSO then adjusts the user's group memberships accordingly, adding the user to the groups returned by the IdP and removing them from others. These group memberships are reliable for security decisions as they are signed by the IdP during login, without any separate requests from the system. Group memberships are updated only following user authentication.\n💡It's important to note that these groups are regular local groups on the Mac, and their memberships can be altered by other processes. Administrators must ensure robust controls and auditing procedures are in place to guard against unauthorized modifications to these groups.Can I Create Users During Login?You can create a new user account at the login window if the you have selected \"EnableCreateUserAtLogin\" and \"UseSharedDeviceKeys\" settings in the PSSO profile in Intune. It checks for existing accounts with the same username and unique identifier before creating a new one, using the TokenToUserMapping from the Device Management profile for the account names. Authentication processPlatform SSO provides various authentication methods to interface with an Identity Provider (IdP), which is tasked with maintaining and verifying user identities. Each authentication approach follows a specific set of steps. Generally, the process starts with the system generating a request for a server nonce, which contains an anti-replay feature to prevent misuse. The system then constructs a login request based on the chosen authentication method's requirements, dispatches this request, and subsequently handles the response it receives.\nFor both password and encrypted password authentication methods, the IdP uses the local account's password, ensuring it remains synchronized. This synchronization includes updates made to the password via the login window or when unlocking the screensaver. In contrast, the secure enclave key method enables authentication with the IdP without using a password or altering the local account password. For heightened security, customers have the option of using a SmartCard for IdP authentication.\nAdditionally, Platform SSO supports federated authentication through WS-Trust. Federation is a process that allows for authentication across different security domains, such as moving from a local IdP to a cloud-based IdP. In the context of WS-Trust authentication, the federated IdP utilizes the local account password for the authentication process.\nHigh-level overview of WS-Trust authenticationTroubleshooting \u0026amp; Verifying ConfigurationThe Identity Provider (IdP) - Entra ID - can create sample messages reflecting the configuration for PSSO deployments. To analyze the configuration and monitor the status of SSO tokens, you can use specific commands in Terminal:\nView Messages: Execute app-sso platform --messages. This command generates messages that don't utilize the actual device keys but rather create a key for each call.Check Configuration and SSO Token Status: To inspect the current configuration and view the status of the SSO tokens, use the command app-sso platform --status.See High-Level Requests and Results: For a broader overview of requests and their outcomes, filter the log for the subsystem com.apple.AppSSO and the category PODiagnostics.These Terminal commands provide a comprehensive toolset to effectively test and refine their platform SSO configurations if needed.\nImplement MacOS Platform SSO with IntuneAll right, having covered the theory, let's now move on to the practical aspects. Let's create and deploy a PSSO profile in Intune to see how it actually functions in a real-world scenario.\nPrerequisites:Deploy\u0026nbsp;Microsoft Enterprise SSO plug-in for Apple devicesMac devices enrolled using Apple's\u0026nbsp;Automated Device Enrollment\u0026nbsp;(ADE) or\u0026nbsp;Device Enrollment\u0026nbsp;(DE)macOS Ventura 13.0\u0026nbsp;or later\u0026nbsp;Company Portal\u0026nbsp;app installed in version\u0026nbsp;5.2312.ooCreate Configuration Profile for Platform SSODevices- macOSConfiguration profiles \u0026gt; Create \u0026gt; New PolicySelect MacOS for the platform and Settings Catalog for the profile type\nConfigure the profile for the below keys:Dictionary to configure Platform SSOOnce configured, the profile should look like this:Let's VerifyDevice RegisteredBoth User \u0026amp; Device Registration completedPassword synced with Identity ProviderDirectory ServicesSSO token stored in KeychainEnd User ExperiencePlatform SSO for macOS\n","externalUrl":null,"permalink":"/posts/apple-identity-services-sso/","section":"Posts","summary":"Welcome to Part Six of the \"","title":"The Apple Connect: Bridging Identity Services with SSO","type":"posts"},{"content":"A new feature in the most recent Intune service release (2305) is the ability to use the Wipe device command for macOS devices. Additionally, we can also configure the Obliteration Behavior setting as part of the Wipe action. This new key allows you to control the wipe fallback behavior on Macs that have Apple Silicon or the T2 Security Chip.\nThe updates in the service release were quite short and simple. Let me help you understand how this setting works and why it's important.\nWhat is ObliterationBehaviour?Imagine a macOS world where developers have granular control over the data deletion process. That's where ObliterationBehavior comes in. ObliterationBehavior can be interpreted as a behavior trait of macOS to handle file or data deletion processes more effectively. It’s a set of instructions, coded into the macOS kernel, that dictates how data is deleted and overwritten when the system is prompted by a user or a remote management command.\nWhy is ObliterationBehavior important?ObliterationBehavior is important for several reasons, foremost among being security and privacy issues. Usually, the data isn't immediately wiped from the disk when a file is deleted from a system. Instead, the system merely marks the space that the file occupied as available for future use. Until that space is overwritten by new data, the original file can potentially be recovered using special software.\nAs an IT admin, you can control how data deletion is handled with ObliterationBehavior, making sure that when a file is removed, it truly gets obliterated—hence the name. The process practically renders the data unrecoverable and gives users an extra layer of security.\nWhat's new with ObliteationBehavior with macOS?iOS and iPadOS both had the ability to erase all content and settings without requiring a full reinstall of the OS. Macs, on the other hand, have not fared as well. Wiping out all user data and apps from a Mac has been a time-consuming task that required a reinstallation of macOS. But only with Macs with Apple silicon or with the Apple T2 Security Chip using macOS 12.0.1 or later which allows a local administrator—or, if enrolled in Intune, you can simply trigger Erase All Content and Settings command exactly similar to the behavior permitted on iPhone, iPad, Apple TV, and Apple Watch devices.\nThe process makes handing over a Mac to another user simpler from the user's standpoint. All settings, data, and programs can be securely erased by selecting Erase All Contents and Settings from the System Preferences menu. This might really come in handy for administrators when it comes to offboarding users and confirming enrollment operations.\nUnderstanding \"Erase All Content and Settings\"\"Erase All Content and Settings\" commonly referred to as EACS is a feature provided by Apple that allows administrators to remotely wipe data from managed devices, restoring them to their factory settings. It is particularly useful in scenarios where a device needs to be repurposed, sold, or returned, ensuring that all sensitive information is completely removed. Benefits and Significance of EACS:\nData securityCompliance \u0026amp; privacy regulationsDevice repurposing and recyclingLost or compromised devicesOn the device, erasing (or wiping) obliterates all the keys in effaceable storage and renders all user data cryptographically inaccessible.\nHow does ObliterationBehaviour Work With macOSTo begin with, you can now initiate a remote wipe command through Intune admin center, regardless of the Apple device you want to wipe (whether it is iOS, iPadOS, or macOS-based).\nUsing mobile device management solutions like Intune, iCloud, or Microsoft Exchange ActiveSync, you can initiate a remote wipe command on any Apple device, including iPhone, iPad, and Mac. The Apple device sends an acknowledgment back to Intune after receiving a remote wipe instruction and then carries out the wipe.\nExample of this request:\n\u0026lt;?xml version=\"1.0\" encoding=\"UTF-8\"?\u0026gt; \u0026lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"\u0026gt; \u0026lt;plist version=\"1.0\"\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;Command\u0026lt;/key\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;DisallowProximitySetup\u0026lt;/key\u0026gt; \u0026lt;false/\u0026gt; \u0026lt;key\u0026gt;PreserveDataPlan\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;RequestType\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;EraseDevice\u0026lt;/string\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;key\u0026gt;CommandUUID\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;EraseDevice\u0026lt;/string\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/plist\u0026gt;Response from device to MDM:\n\u0026lt;?xml version=\"1.0\" encoding=\"UTF-8\"?\u0026gt; \u0026lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"\u0026gt; \u0026lt;plist version=\"1.0\"\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;CommandUUID\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;EraseDevice\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;Status\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;Acknowledged\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;UDID\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;00008020-000915083C80012E\u0026lt;/string\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/plist\u0026gt;The device sends back an acknowledgment to the MDM platform and the wipe is performed. Everything seems to be in order here; the device gets the wipe command and it is wiped and then it sends back the acknowledgment also. But it's never that simple with Mac. The macOS operating system has some quirks. It will fall back to the behavior of macOS 11, which is \"obliteration,\" and necessitate a time-consuming reinstall of macOS before the hardware can be used if an EraseDevice command is sent to a Mac that does not support it.\nThe Fall Back PlanThe default behavior and the ObliterationBehavior command option configured in Intune will govern the system's actions in the case that EACS does not complete as planned. During EACS, there is a preflight conducted on the system, and that preflight can succeed, or it can fail, which will conduct the assigned ObliterationBehavior. The following values define the device’s fallback behavior:\nDoNotObliterate: If EACS preflight fails, the device responds to the server with an Error status and doesn’t attempt to erase itself. If EACS preflight succeeds but EACS fails, then the device doesn’t attempt to erase itself.ObliterateWithWarning: If EACS preflight fails, the device responds with Acknowledged status and then attempts to erase itself. If EACS preflight succeeds but EACS fails, then the device attempts to erase itself.Always: The system doesn’t attempt EACS. T2 and later devices always obliterate.Default: If EACS preflight fails, the device responds to the server with Error status and then attempts to erase itself. If EACS preflight succeeds but EACS fails, then the device attempts to erase itself.The screenshot below shows the new feature with OblietrationBehavior that you have to choose while initiating a wipe command to macOS devices.\nObliteration Behavior KeysConclusionWith the latest service release of Microsoft Intune, you now have the option to configure ObliterationBehavior for more enhanced control and security over data managed on your corporate Mac devices. This would mean that when you as an Intune admin initiate the wipe command for the corporate enrolled Macs, the configuration defined in Intune would dictate the level of obliteration. This feature is incredibly useful in scenarios requiring high levels of data security and regulatory compliance.\nStay tuned for more exciting journeys into the realm of macOS management, and until then, keep learning, exploring, and pushing the boundaries of what's possible. #intuneinspired #alwaysintune\n","externalUrl":null,"permalink":"/posts/obliterationbehavior/","section":"Posts","summary":"A new feature in the most recent Intune service release (2305) is the ability to use the Wipe device command for macOS devices.","title":"The Magic of ObliterationBehavior","type":"posts"},{"content":"Declarative Device Management\u0026nbsp;(DDM) is a revolutionary approach to managing mobile devices that empowers them to be autonomous and proactive. One of the key advantages of DDM is improved performance and scalability. By enabling devices to operate autonomously, devices can proactively perform tasks, make decisions, and adjust configurations based on predefined rules. This not only increases efficiency but also allows for faster response times, especially in large-scale deployments.\nAnother benefit of DDM is the reduced administrative burden it brings. With traditional device management approaches, administrators often have to manually configure each device individually or rely on scripts and profiles to enforce policies. This can be time-consuming and prone to errors. With DDM, administrators can define configurations once using a declarative data model, which is then applied automatically across all managed devices. Security is another area where DDM shines. By leveraging predefined rules and configurations, DDM enhances security by ensuring devices adhere to established guidelines. Administrators can define policies related to password complexity, encryption requirements, app installation permissions, network access controls, and more. These policies are enforced automatically by the device itself without requiring constant monitoring or intervention from administrators.\nIn the following sections of this blog post, we will delve deeper into the components of DDM, its integration with MDM protocols, the requirements for implementing DDM, and how it enables automated software updates. Understanding Declarative Device Management (DDM)What is Declarative Device Management?Declarative device management is\u0026nbsp;an update to the existing protocol for device management that can be used in combination with the existing MDM protocol capabilities. It allows the device to asynchronously apply settings and report status back to the MDM solution without constant polling\nWith DDM, administrators define configurations once using the declarative data model, which is then applied automatically across all managed devices. Devices become more intelligent and self-sufficient, capable of adjusting their settings and behavior based on predefined rules. This level of autonomy allows devices to operate efficiently without requiring constant supervision or intervention from administrators.\nBenefits of Declarative Device ManagementDDM brings several benefits for IT professionals and Mobile Device Management administrators:\nImproved performance and scalability: By allowing devices to operate independently and efficiently, DDM improves overall performance and scalability. Devices can proactively perform tasks, adjust configurations, and make decisions based on predefined rules. Reduced administrative burden: With DDM, devices can make decisions and perform tasks without constant supervision from administrators. Enhanced security and compliance: DDM enhances security by enforcing predefined rules and configurations across all managed devices. You can define policies related to password complexity, encryption requirements, app installation permissions, network access controls, and more. Integration of DDM with MDM ProtocolsOverview of MDM ProtocolsMDM (Mobile Device Management) protocols are used for managing and controlling mobile devices in an enterprise environment. These protocols provide a framework for communication between devices and management servers, enabling remote management and configuration.\nMDM protocols facilitate various device management tasks, including:\nEnrolling devices into the management systemPushing configurations and policies to devicesInstalling and updating applications on devicesRemotely wiping or locking devices in case of loss or theftCollecting device information and generating reportsDDM and MDM Protocol IntegrationDeclarative Device Management (DDM) can be integrated with existing MDM protocols to enhance device management capabilities. By leveraging MDM protocols, DDM can communicate with management servers, receive updates, and synchronize configurations.\nWhen DDM is integrated with MDM protocols, it enables a seamless flow of information between the managed device and the management server. The declarative data model defined in DDM provides a structured representation of how the device should behave. This model is communicated to the device through the MDM protocol, allowing the device to adjust its settings accordingly.\nUnderstanding Declarative Device ManagementDDMDeclarationsDeclarations\u0026nbsp;are a fundamental aspect of Apple Declarative Device Management. They serve as the building blocks that enable devices to apply logic autonomously. A declaration is a configuration item that specifies a desired state or behavior for a device. It can include settings, restrictions, or even custom actions.\nStatus ChannelThe status channel plays a crucial role in facilitating communication between devices and the MDM server in Declarative Device Management. It serves as a bidirectional channel through which devices can report their current state and receive updates from the server.\nWhen a device receives declarations from the MDM server, it periodically sends status updates to inform the server about its compliance with those declarations. This continuous feedback loop ensures that administrators have real-time visibility into device status and can take appropriate actions if deviations occur.\nExtensibilityExtensibility\u0026nbsp;is another key pillar of Declarative Device Management, offering flexibility and customization options for organizations. It allows for integration with other systems and services, enabling administrators to leverage existing infrastructure and workflows.\nRequirements for Implementing DDMBefore implementing Declarative Device Management (DDM), it is important to ensure that the devices being managed support the necessary hardware and software capabilities. Compatibility with the operating system, firmware, and management tools is essential for successful implementation.\nDDM requires devices running iOS/iPadOS 15 \u0026amp; macOS 13 (minimum) . These operating systems introduce the necessary features and frameworks to enable autonomous decision-making based on predefined rules and configurations. It is crucial to verify that the devices in your organization meet these requirements before adopting DDM.\nData Flow for Declarative ManagementThe flow below shows you when a device is already enrolled in MDM and you activate Declarative Management:\nThis flow shows you after your activation completes and a CheckIn request occurs:\nIn the next section of this blog post, we will explore how Declarative Device Management enables automated software updates on managed devices—improving security patching processes while ensuring optimal performance across the fleet.\nManaging Software Updates using DDMDeclarative Device Management (DDM) enables automated scheduling of software updates, ensuring that devices are always up to date with the latest patches and enhancements. By defining update policies and schedules, you can ensure timely and efficient software updates across their managed device fleet.\nWith DDM, you can establish rules within the declarative data model that govern how software updates should be handled on devices. These rules can include criteria such as update availability and scheduling preferences. Devices then autonomously check for available updates based on these predefined rules and apply them accordingly.\nHow It Is Done?DDM employs three key principles to enhance the process of software updates, outperforming traditional MDM setups in this regard.\nFirstly, in the realm of configurations, your MDM merely instructs the device on how to handle updates. The device itself executes these guidelines, while also notifying and empowering the user to initiate the updates at their convenience.\nSecondly, predicates serve as the backbone for logical operations that dictate the sequence of software updates. This takes into account both seed builds and critical security patches that become available on the device.\nLastly, real-time status reporting ensures that administrators are promptly informed of any issues as they arise, allowing for immediate action.\nLet's delve into how these mechanisms work in practice.\nSome of the statuses that can be communicated include:\nsoftwareupdate.install-reasonsoftwareupdate.pending-versionsoftwareupdate.install-statesoftwareupdate.failure-reasonNow, let's examine what a typical status item entails:\nChanges at user level:\nSchedule Software Updates with Intune Sign in to the Microsoft Intune admin center.Profile: Select\u0026nbsp;Settings catalog.Select Devices \u0026gt; Update policies for macOS \u0026gt; Create profile.On the Basics tab, specify a name for this policy, specify a description (optional), and then select Next.In\u0026nbsp;Configuration settings, select\u0026nbsp;Add settings\u0026nbsp;\u0026gt; Expand\u0026nbsp;Declarative Device Management\u0026nbsp;\u0026gt;\u0026nbsp;Software UpdateConfigure the following settings:Details URL: Enter a web page URL that has more information on the update. Target Build Version: Enter the target build version to update the device to, like\u0026nbsp;20A242. Target Local Date Time: Enter the local date time value that specifies when to force the installation of the software update. This setting uses the\u0026nbsp;yyyy-mm-ddThh:mm:sss\u0026nbsp;format. Target OS Version: Enter the target OS version to update the device to. Select\u0026nbsp;Next.In\u0026nbsp;Assignments, select the users or groups that will receive your profile. In\u0026nbsp;Review + create, review the settings. ConclusionDeclarative Device Management (DDM) is a revolutionary approach that empowers mobile devices to operate autonomously and proactively. By allowing devices to make decisions based on predefined rules, DDM improves performance, scalability, and security. With DDM, organizations can experience a range of advantages. Improved performance and scalability are achieved as devices operate independently and efficiently, reducing the need for constant supervision. This allows for faster response times in large-scale deployments and frees up valuable resources for other strategic initiatives.\nEnhanced security and compliance are also key benefits of DDM. By enforcing predefined rules and configurations, organizations can ensure that devices adhere to established guidelines. Policies related to password complexity, encryption requirements, app installation permissions, network access controls, and more are automatically enforced by the device itself.\nIn conclusion, Declarative Device Management revolutionizes mobile device management practices by empowering devices to operate autonomously based on predefined rules. ","externalUrl":null,"permalink":"/posts/the-shift-from-mdm-to-ddm/","section":"Posts","summary":"Declarative Device Management\u0026nbsp;(DDM) is a revolutionary approach to managing mobile devices that empowers them to be autonomous and proactive.","title":"The Shift From MDM to DDM: A Deep Dive into Declarative Device Management","type":"posts"},{"content":" Overview As the craze for Windows 11 continue growing, more and more people are installing Windows 11 everyday. For testing or educational purposes, some people install it on a PC, while others install it on a virtual machine or hypervisor.\nThe most typical situation is installing it on a virtual machine (VM), as this is the quickest and simplest method to get started. You install Hyper-V on our base machine and fire-up the VM by booting it from Win11 ISO and boom! \u0026#8220;This PC cannot run Windows 11\u0026#8221; appears after choosing the Windows 11 version. The minimal system requirements for installing this version of Windows are not met by this computer. Let\u0026#8217;s understand why do we receive this notification, and what can we do about the PC\u0026#8217;s inability to run Windows 11?\nFor full system requirements for Windows 11, check out the\u0026nbsp;Windows System Requirements\u0026nbsp;page.\nThe Error Message After starting the virtual machine with the Windows 11 ISO, we do the initial Windows Setup processes. We receive the following notification after choosing the Windows OS we wish to install, which prevents us from moving forward. If you tried to install Windows 11 on a PC or used the Microsoft PC Health Check app, you might have encountered the similar error on your computer as well that said, \u0026#8220;This PC can\u0026#8217;t run Windows 11\u0026#8221;.\nWhat\u0026#8217;s blocking the installation here \u0026#8211; Secure Boot and TPM 2.0 are the two essential feature that may be missing from your computer. But what about if you are using a Hyper-V? So let\u0026#8217;s understand more about these and see how to fix them as you don\u0026#8217;t require any special skills, and you\u0026#8217;ll just be clicking through few menus.\nWhat is TPM ?\u0026nbsp; TPM is short for\u0026nbsp;Trusted\u0026nbsp;Platform\u0026nbsp;Module, is a computer security feature that helps keep sensitive information like passwords and encryption keys safe. Think of your smartphone which you cannot access without your biometrics and you are totally locked out if it doesn\u0026#8217;t recognize your fingerprint, PIN or facial recognition.\nThe TPM system is available in several configurations, such as a physical chip that can be installed on a particular motherboard , a module that is already soldered to the motherboard, or one that is firmware-based and can be enabled within your BIOS without tinkering with any hardware.\nUntil Windows 11 was announced, TPM was something not many people had heard of however most pre-built computers sold within the past few years already have some sort of TPM installed or enabled.\nHow do I check if I have a TPM chip? To see if you have a TPM chip, you just need to check the TPM Windows service. Then, you can verify the connection within Device Manager.\nClick the\u0026nbsp;Windows\u0026nbsp;icon, type, then click “tpm.msc”. TPM.msc Hold the\u0026nbsp;Windows\u0026nbsp;key and type Device Manager, and hit Enter. Device Manager Scroll down and expand\u0026nbsp;Security Devices\u0026nbsp;to confirm that the TPM is listed and is functioning correctly. TPM in Device Manager What is Secure Boot? Secure Boot is a security feature that is built into the firmware of your computer. It helps to protect your computer against unauthorized access. Secure Boot is incorporated into the UEFI firmware.\nBy using Secure Boot, you can ensure that only trusted software and firmware are able to boot your computer, ensuring that your system is secure. Which said, your machine won\u0026#8217;t boot if an insecure firmware component is present while Secure Boot is off.\nHow to enable TPM and Secure Boot Enabling TPM and Secure Boot is a straightforward process, but you need to be aware of the specific steps you need to take on different motherboard models. Before making any changes, be sure to have your motherboard’s owner’s manual handy so you can navigate both the menus and the specific terms and language used on different systems. Enable TPM Upgrading your BIOS firmware can sometime give you access to the TPM settings. Often, OEM manufacturers will include specific instructions on how to install and upgrade the firmware.\nFrom Windows 10\u0026#8217;s Start menu If you\u0026#8217;re signed in to Windows, you can access your UEFI settings right from the Advanced Startup menu:\nHold the\u0026nbsp;Windows\u0026nbsp;key and open the Settings app. Settings Type\u0026nbsp;Advanced, click\u0026nbsp;Change advanced startup options, then select\u0026nbsp;Restart Now. Search for advanced startup options Press Restart Now In the blue\u0026nbsp;Choose an option\u0026nbsp;window, choose\u0026nbsp;Troubleshoot, then\u0026nbsp;Advanced options, followed by\u0026nbsp;UEFI Firmware Settings. Your PC will reboot directly to your UEFI BIOS. From start-up You can also get into your UEFI to change your TPM settings when you boot your PC. This requires you to press the BIOS key command. Once you’re in your UEFI BIOS, you can then update the TPM settings. The UEFI key command differs from motherboard to motherboard, but it will typically be\u0026nbsp;F2 or F12 or DEL key.\nIn the BIOS or UEFI menu, there should be at least one option or tab labelled\u0026nbsp;Security. Once you\u0026#8217;re inside the Security section, you\u0026#8217;re going to be looking for the\u0026nbsp;TPM settings. Find the switch that turns on the TPM and enable it. Once you\u0026#8217;ve enable the TPM, click Save and restart the computer.\u0026nbsp;\nEnable Secure Boot\u0026nbsp; Enter the UEFI settings as outlined in the\u0026nbsp;Windows 10 Startup\u0026nbsp;methods above, but this time look for the Secure Boot option. From there, just switch to Secure Boot mode.\nSecure Boot is ON So, this solves the purpose for installing Windows 11 on a PC or if you are upgrading from Win10 to Win11. But what if you are installing creating a test Windows 11 VM in Hyper-V and you get this message?\nLet\u0026#8217;s fix that also.\nInstalling Windows 11 on a VM in Hyper-V For a Hyper-V VM, here are the things you need enabled and configure to get Windows 11 to work:\nGen 2 VM: As we know now that a TPM and secure boot are required for Windows 11 so, on Hyper-V, these are only available on Gen 2 VMs, so don’t try to install Windows 11 on a Gen 1 VM. Always select Gen2 VM UEFI, Secure Boot capable: Gen 2 VMs have UEFI, which replaces the traditional BIOS on regular Gen 1 VMs and allows for Secure boot. By default, Secure Boot is enabled on Gen 2 VMs. TPM 2.0: Hyper-V allows VMs to have a virtual TPM chip.. TPM \u0026amp; secure boot enabled After creating the VM, we set its configuration, such as configuring the number of virtual processors and memory. We added a new DVD drive and added the ISO file to it. We then set the VM\u0026#8217;s boot order so that the DVD will be booted first and pressed the connect button to power on the VM. You can now create a Windows 11 capable VM on Hyper-V 😉. Happy Days .\nWindows 11 is now installing Wrapping Up I hope this was helpful and that you will now be able to create a Windows 11 VMs quickly and easily on Hyper-V!\n","externalUrl":null,"permalink":"/posts/this-pc-cant-run-windows-11/","section":"Posts","summary":"Overview As the craze for Windows 11 continue growing, more and more people are installing Windows 11 everyday.","title":"This PC can't run Windows 11!","type":"posts"},{"content":" If your certificate connector is still on a version earlier than\u0026nbsp;6.2101.13.0\u0026nbsp;then it is the right time to upgrade it because, from today onwards, they are deprecated and will not be able to issue certificates to your devices.\nIf you have a certificate connector configured, then you might be leveraging its functionality for issuing \u0026amp; revoking:\nPrivate and public key pair (PKCS) certificates, orPKCS imported certificates, orSimple Certificate Enrollment Protocol (SCEP) In July\u0026#8217;21, Microsoft published the lifecycle policy for certificate connectors, and as per Microsoft:\nEach new connector release will be supported six months after its release date. During this period, automatic updates can install a newer connector version (depending upon your network configuration).If an out-of-support connector fails, it must update to the latest supported version.If automatic updates of the connector are blocked, the manual update of the connector will be required within six months before support for the installed version ends.Connectors out of support will continue functioning for up to 18 months after their release date. After 18 months, a connector\u0026#8217;s functionality might fail due to service level improvements, updates, or addressing common security vulnerabilities that might surface in the future. This helps replace three separate certificate connectors for SCEP and PKCS and imported PKCS with a Unified Certificate Connector. Previously, from Intune portal, we had the option to download three different connectors viz SCEP, PKCS and PFX imported. You just need to download and configure the new unified certificate connector, enabling multiple capabilities from a single connector. Check the version installed in your environment: You can verify the version of the connector from the server on which it is installed.\nThis screenshot shows that the connector version is deprecated, which is why the MEM portal status shows an error.\nPrerequisites for the Certificate Connector for Microsoft Intune: Before installing and configuring the Certificate Connector for Microsoft Intune, let\u0026#8217;s review the prerequisites and infrastructure requirements. These prerequisites can vary depending on the features you want to configure. However, the general requirements are as below:\nWindows Server 2012 R2 or later. .NET v4.7.2TLS 1.2The server should have access to \u0026#8220;autoupdate.msappproxy.net\u0026#8221; and port 443 should be open to keeping the connector auto-updatedDisable Enhanced Security Configuration in IEDetails for proxy configuration of the NDES server NDES service account details Please refer to the Prerequisites for using the Certificate Connector for Microsoft Intune \u0026#8211; Azure | Microsoft Docs for detailed permissions and requirements for the connector. Let\u0026#8217;s get the ball rolling then.\u0026nbsp;\nUninstall the Deprecated Connector: Log in to the NDES server and uninstall the old connector.\u0026nbsp; Launch an elevated command prompt and restart the IIS service Download the Latest Connector: \u0026nbsp;Sign in to the\u0026nbsp;Microsoft Endpoint Manager admin center.Navigate to\u0026nbsp;Tenant administration\u0026nbsp;\u0026gt;\u0026nbsp;Connectors and tokens\u0026nbsp;\u0026gt;\u0026nbsp;Certificate\n\u0026nbsp;connectors\u0026nbsp;\u0026gt;\u0026nbsp;Add. Select the certificate connector link to download the connector installer. Save/Copy the file on the server where you will install the connector. Run the installer (IntuneCertificateConnector.exe) with NDES service account.Review and agree to the license terms and conditions, and then select\u0026nbsp;Install\u0026nbsp;to\n\u0026nbsp;continue. Configure Intune Certificate Connector: To configure the certificate connector, use the Certificate Connector for Microsoft Intune wizard. The configuration will start automatically if you choose to Configure Now in the previous step, or you can manually launch it by opening an elevated command prompt and running the below command:\nThe Certificate Connector for Microsoft Intune wizard will start with the Welcome page. Click Next to start the configuration wizard: On Features, select the checkbox for each connector feature you want to install on this server, and then select Next. On the Proxy page, add details for your proxy server if you require a proxy for internet access. Next, on the Prerequisites page, the wizard runs several checks on the server before the configuration can begin. Review and resolve any errors or warnings received before you continue.The next screen is the Azure AD Sign-In page; use the default Public Commercial Cloud for Environment., and then select Sign In. The user account must be a Global Admin or an Intune Admin with an Intune license assigned, and the user must be a synchronized account from your On-Prem Active Directory. On the Configure page, the wizard applies the configuration to the connector for Intune. If successful, the utility continues to the Finish page, where you select Exit to complete configuration of the connector. After the configuration completes successfully and the wizard closes, the Certificate the connector for Microsoft Intune is ready for use. Verify the New Connector: The quick \u0026amp; best way to verify is by checking the SCEP URL. All is set if it is giving the expected HTTP 403 error!\u0026nbsp;\nThe connector status should also reflect as active and healthy in the MEM Portal, indicating a successful upgrade. Once you verify that all the services are running fine, delete the old connector from Intune portal.\nThat\u0026#8217;s all for today. Hope you will find this post useful!\n","externalUrl":null,"permalink":"/posts/time-to-upgrade-the-certificate-connector-2/","section":"Posts","summary":"If your certificate connector is still on a version earlier than\u0026nbsp;6.","title":"Time To Upgrade the Certificate Connector!","type":"posts"},{"content":"As an MDM admin, navigating the ever-evolving tech landscape is crucial for keeping your organization at the forefront. This is where AppleSeed for IT becomes your indispensable ally. By participating in this program, you don't just get early access to Apple's prerelease software; you become a pivotal part of the development process. Imagine the challenges you face daily with device management—now picture having the power to directly influence the solutions Apple develops. From improving security protocols to enhancing user interface, your feedback can lead to tangible advancements. It's not just about staying updated; it's about actively shaping the future of IT management. Ready to make your mark? Join AppleSeed for IT and turn your insights into impactful actions.\nTo make it easy, I have divided it into three parts:\nUncover the Secrets of AppleSeed: Part IUncover the Secrets of AppleSeed: Part II - Exploring the toolsUncover the Secrets of AppleSeed: Part III - Mastering the toolsWhat is AppleSeed for IT?In the dynamic role of an MDM admin, where technology evolves at a breakneck pace, being proactive is key to your organization's success. Enter AppleSeed for IT—a program specially crafted for enterprise and education customers eager to be at the forefront of Apple software development. When you join this program, you're not just testing prerelease software; you're actively contributing to its evolution. Your insights help identify and resolve bugs, suggest enhancements, and ensure the software's readiness for a seamless public launch.\nBenefits of Participating in AppleSeed for ITThe perks of being part of AppleSeed for IT are substantial. You're not only playing a crucial role in molding the future of Apple software but also getting exclusive early access to upcoming features. This opportunity isn't just about staying ahead in the tech game; it's about forming a collaborative relationship with Apple's engineers. By bridging the gap between development and practical application, your participation becomes instrumental in creating software that truly resonates with the needs of educational and enterprise environments. It's a chance to influence, innovate, and integrate the very best of Apple's offerings into your organizational framework.\nHow to Participate in AppleSeed for ITTo participate in AppleSeed for IT, you'll need to have an eligible Managed Apple ID. Once you have an eligible Managed Apple ID, you can sign up for the program on the AppleSeed for IT website.\nWhat to Expect as an AppleSeed for IT ParticipantAs an AppleSeed for IT participant, you can expect to receive the following:\nPrerelease software:\u0026nbsp;You'll receive access to prerelease versions of Apple software,\u0026nbsp;including iOS,\u0026nbsp;iPadOS,macOS,\u0026nbsp;watchOS,\u0026nbsp;and tvOS.Test plans and surveys:\u0026nbsp;Apple will provide you with test plans and surveys to help you test the software and provide feedback.Feedback Assistant:\u0026nbsp;You can use Feedback Assistant to submit bug reports,\u0026nbsp;suggest improvements,\u0026nbsp;and provide general feedback.Discussion forums:\u0026nbsp;You can participate in discussion forums to share your experiences with other AppleSeed for IT participants.Apple's journey of innovation continues unabated with a significant evolution in their program: the AppleSeed Program has been transformed into Apple Beta. This revamped initiative goes beyond mere testing of new releases—it's a comprehensive upgrade designed to revolutionize how enterprises engage with Apple products. With Apple Beta, you'll discover an array of new tools and resources tailored for more effective planning, deployment, and management at an enterprise level. From advanced diagnostics to streamlined deployment strategies, the program is poised to set a new standard in enterprise IT. Let's explore these groundbreaking changes and see how they can elevate your organization's interaction with Apple technology.\nConfiguration Profiles in AppleSeedConfiguration profiles in AppleSeed are an essential aspect of managing Apple devices effectively, particularly for IT professionals involved in testing and deploying Apple software in a corporate environment. These profiles enable administrators to define settings for devices, such as network configurations, email server settings, and security policies.\nApple's relentless pursuit of excellence is evident in the evolution of the AppleSeed Program into the new and improved Apple Beta. This rebranding signifies a leap beyond just testing new software releases; it's a comprehensive suite designed to enhance enterprise engagement with Apple products at every level.\nOne standout feature is the Exchange Mail and Calendar Sync Diagnostic Profile. This tool is a boon for organizations relying on seamless integration with Exchange services. It ensures that devices flawlessly synchronize mail, calendar, and contacts, providing valuable insights into any synchronization issues that may arise.\nSecurity-conscious environments will find the Cryptographic Message Syntax (CMS) Diagnostic Profile indispensable. This tool is crucial for diagnosing secure messaging issues, employing CMS to encrypt and sign messages. Its importance cannot be overstated, especially when handling sensitive data that demands high encryption standards.\nMoreover, the introduction of the iOS Webclip for Beta Enrollment marks a significant stride in simplifying the beta program enrollment process. This feature allows organizations to test new updates and features efficiently before a broader rollout, ensuring a smooth integration into their systems.\nThe suite also includes the iOS and iPadOS AppleSeed Profile, along with the macOS Beta Access Utility and tvOS AppleSeed Profile. These tools are essential for MDM admins aiming to stay ahead. They offer access to beta versions of Apple’s operating systems, enabling admins to test and familiarize themselves with the latest updates in a controlled environment. This proactive approach ensures compatibility and readiness for organizational deployment.\nIn summary, Apple Beta isn't just a new name; it's a gateway to advanced tools and resources tailored for the modern enterprise, revolutionizing how organizations plan, deploy, and manage Apple technology.\nTest Plans \u0026amp; DocumentationTest Plans and Documentation are crucial components in the process of developing and deploying Apple products, particularly within the realm of mobile device management and enterprise environments.\nThere are many test plans including:\nTesting of automated processes using Apple Configurator.\"macOS Testing Template\" to standardized document or framework used for ensuring that macOS installations meet certain criteria or benchmarks.\"Exchange Test Plan\" for the deployment of Exchange services.Platform SSO developer documentation v2.0Identity Provider developer documentation providing guidelines and specifications for integrating with identity provider services.Why Appleseed is the ultimate solution for MDM adminsAppleSeed stands out as an ultimate solution for MDM (Mobile Device Management) administrators because of its comprehensive suite of tools and resources that cater specifically to the needs of MDM admins managing Apple devices in an enterprise environment. With AppleSeed, MDM admins gain early access to software updates, allowing them to test and adapt to new versions of iOS, macOS, tvOS, and watchOS before they're released to the public. This preemptive access is crucial for ensuring compatibility and stability across an organization's array of devices and applications.\nFurthermore, AppleSeed provides a secure and controlled beta testing environment, which is invaluable for evaluating new features, assessing system changes, and planning necessary updates to device configurations. This proactive approach to device management ensures that MDM admins are always ahead of the curve, prepared to address any potential issues that could arise from software updates.\nThe feedback loop established by AppleSeed is another significant advantage. It gives MDM administrators a direct line to Apple's development team, allowing them to report back on their experiences with beta software, suggest improvements, and highlight enterprise-centric concerns. This collaboration can lead to enhancements in final software releases that better serve the enterprise community.\nMoreover, the detailed documentation and test plans available through AppleSeed equip MDM admins with the knowledge and guidelines needed to leverage new capabilities and navigate the complexities of each update. These resources are tailored to support the administrators in deploying, managing, and securing devices within their network more effectively.\nLastly, AppleSeed's configuration profiles and policy testing tools allow MDM admins to fine-tune device settings, enforce security measures, and ensure consistent policy application across all devices. This level of control is essential in maintaining a secure and efficient IT environment, making AppleSeed a robust ally for MDM administrators.\nConclusionAppleSeed for IT is a valuable program that can help you shape the future of Apple software. By participating in the program, you can help ensure that Apple software is ready for a smooth public release and that it meets the needs of your organization.In summary, AppleSeed for IT isn't just a program—it's an opportunity for you to actively participate in shaping the future of Apple's technological landscape. By getting involved, you play a crucial role in ensuring that upcoming software releases are not only ready for a seamless public debut but are also finely tuned to the unique requirements of your organization. Imagine having the ability to influence the tools and systems you rely on every day. With AppleSeed for IT, this becomes more than just a possibility—it's a reality. Don't miss the chance to be at the forefront of Apple's software development. Join AppleSeed for IT today, and turn your insights into impactful actions that benefit your entire organization.\n","externalUrl":null,"permalink":"/posts/uncover-the-secrets-of-appleseed-part-i/","section":"Posts","summary":"As an MDM admin, navigating the ever-evolving tech landscape is crucial for keeping your organization at the forefront.","title":"Uncover the Secrets of AppleSeed: Part I - The Basics","type":"posts"},{"content":"Welcome back to second part of \"Uncover the Secrets of AppleSeed.\" In the first part, we delved into what AppleSeed is and its myriad benefits for MDM (Mobile Device Management) administrators. We discovered how this groundbreaking program is shaping the future of Apple's software development and how it's tailormade to meet the needs of organizations utilizing Apple products. Now, in this exciting second installment, we're going to take a practical dive into how to effectively use AppleSeed in your day-to-day operations.\nUncover the Secrets of AppleSeed: Part IAs an MDM admin, navigating the ever-evolving tech landscape is crucial for keeping your organization at the forefront. This is where AppleSeed for IT becomes your indispensable ally. By participating in this program, you don’t just get early access to Apple’s prerelease software; you become a pivotal part of theIntune - In Real LifeSomesh PathakWhether you're a seasoned MDM admin or just getting your feet wet in the vast ocean of device management, this post is designed to give you actionable insights into leveraging AppleSeed to its fullest potential. From initial setup to advanced tips for getting the most out of beta testing, we're here to guide you through every step. So, let's gear up and explore how to transform AppleSeed from a mere concept into a powerful tool in your IT arsenal.\nHidden but powerful AppleSeed tools await your discovery. This guide will unveil these gems, revealing their significance and how they can elevate your workflow.\nmacOS Testing TemplateA standout resource within the AppleSeed program is the macOS Testing Template, which can be accessed at https://beta.apple.com/download/1017181. This template is a game-changer for MDM admins and IT professionals working with Apple's ecosystem.\nThe macOS Testing Template is a comprehensive guide designed to streamline the testing process of macOS versions in a corporate environment. It provides a structured framework for evaluating new features, identifying potential issues, and ensuring compatibility with existing systems and applications. This document contains templates to assist IT with macOS testing.\u0026nbsp;\u0026nbsp;It includes sections focused on deployment, network, security, productivity, and line of business applications.\u0026nbsp;\u0026nbsp;Each section provides a default layout to help track detailed compatibility status for each applications and component.\u0026nbsp;\u0026nbsp;This document also includes a dashboard overview of the testing status for each section and step-by-step test case examples. These examples can be utilized by your QA teams and customized to meet your organization's requirements. This template covers the following topics:\nQuick Start GuideDashboardDeployment and ManagementInfrastructure and NetworkSecurity AppsProductivity and CollaborationBrowsers and UtilitiesLine of Business AppsWeb App TrackerTest case examplesShortcuts Automation with Apple Configurator Test PlanAnother remarkable resource available through AppleSeed is the \"Shortcuts Automation with Apple Configurator Test Plan.\" It's specifically tailored for MDM admins looking to optimize their use of Apple's Shortcuts in a managed environment. The Shortcuts Automation with Apple Configurator Test Plan is a detailed document that guides MDM administrators through the process of testing and implementing Apple's Shortcuts in a managed, enterprise setting. It focuses on automating tasks and workflows, enhancing productivity and efficiency across the organization. I have previously written a post on it and you can find it below:\nAutomating Device Provisioning with Apple ConfiguratorGone are the days when you had to manually configure devices and subsequently assign them to an MDM server via Apple Business Manager. With these new automation features in Apple Configurator, the entire device provisioning process is now fully automated!Intune - In Real LifeSomesh PathakDeclarative Management: Software Update Enforcement Test PlanThe next resource in the AppleSeed suite is the \"Declarative Management: Software Update Enforcement Test Plan\". This plan is crucial to ensure that software updates are effectively and uniformly applied across all Apple devices in their network.\nThe Declarative Management Software Update Enforcement Test Plan is an essential tool if you wish to maintain high standards of software consistency and security across Apple devices. This plan is another example of how AppleSeed for IT equips professionals with the necessary resources to manage and optimize their Apple device ecosystems efficiently.\nIf you want a deep dive on software update using DDM, then you are at right place:\nThe Shift From MDM to DDM: A Deep Dive into Declarative Device ManagementDeclarative Device Management\u0026nbsp;(DDM) is a revolutionary approach to managing mobile devices that empowers them to be autonomous and proactive.Intune - In Real LifeSomesh PathakMac Evaluation Utility (MEU)This is one of my favourite tool available at AppleSeed. The Mac Evaluation Utility (MEU) emerged as a collection of scripts initially used by Apple engineers and consultants to assess client environments for Apple device deployment readiness. These scripts scrutinized local device settings, network configurations, and Apple service accessibility, identifying potential deployment hurdles.\nOver time, these scripts were consolidated into a user-friendly GUI application, aptly named the Mac Evaluation Utility. IT departments managing Apple device deployments could leverage MEU to identify deployment barriers and troubleshoot existing installations. (Access to MEU requires membership in AppleSeed for IT, which is open to Apple Business Manager account holders.)\nIn a recent release, Apple unveiled version 4.5 of MEU, boasting an enhanced interface that simplifies report generation and test selection. It introduces tests for secure tokens and bootstrap tokens, volume ownership, and iCloud FileVault Recovery. MEU now supports PDF and JSON export formats alongside CSV, and the overall test suite execution time has been reduced to as low as 5 seconds, enhancing efficiency.\nConclusionIn our final installment of this series, we delve into the Mac Evaluation Utility (MEU), a valuable tool for assessing and optimizing Apple device deployments. Through this exploration, we'll uncover the essence of MEU and delve into the compelling reasons why it should be an integral part of your IT toolkit.\nUncover the Secrets of AppleSeed: Part III - Mastering the ToolsPicture this: you’re an MDM admin tasked with spearheading the deployment of Apple devices across your organization. Amidst the myriad considerations, ensuring seamless device integration ranks paramount. This is where the Mac Evaluation Utility (MEU) emerges as an invaluable ally. Welcome to the last part of the “Uncover the SecretsIntune - In Real LifeSomesh Pathak","externalUrl":null,"permalink":"/posts/uncover-the-secrets-of-appleseed-part-ii/","section":"Posts","summary":"Welcome back to second part of \"","title":"Uncover the Secrets of AppleSeed: Part II - Exploring the Tools","type":"posts"},{"content":"Picture this: you're an MDM admin tasked with spearheading the deployment of Apple devices across your organization. Amidst the myriad considerations, ensuring seamless device integration ranks paramount. This is where the Mac Evaluation Utility (MEU) emerges as an invaluable ally.\nWelcome to the last part of the \"Uncover the Secrets of AppleSeed\" series. The first two parts can be accessed from below links:\nUncover the Secrets of AppleSeed: Part IAs an MDM admin, navigating the ever-evolving tech landscape is crucial for keeping your organization at the forefront. This is where AppleSeed for IT becomes your indispensable ally. By participating in this program, you don’t just get early access to Apple’s prerelease software; you become a pivotal part of theIntune - In Real LifeSomesh PathakUncover the Secrets of AppleSeed: Part II - Exploring the ToolsWelcome back to second part of “Uncover the Secrets of AppleSeed.” In the first part, we delved into what AppleSeed is and its myriad benefits for MDM (Mobile Device Management) administrators. We discovered how this groundbreaking program is shaping the future of Apple’s software development and how it’s tailormade toIntune - In Real LifeSomesh PathakDemystifying the Mac Evaluation UtilityMEU, initially conceived as a collection of scripts, has blossomed into a comprehensive tool for evaluating and optimizing Apple device deployments. Its primary objective lies in identifying potential roadblocks and ensuring a smooth transition for both new and existing devices.\nUnveiling the Benefits of MEUThe benefits of employing MEU extend far beyond mere deployment readiness checks. It offers a plethora of advantages that make it an indispensable tool for MDM admins:\nImproved Deployment Efficiency: MEU streamlines the deployment process by proactively identifying and addressing potential issues. This proactive approach minimizes downtime and ensures a hassle-free deployment experience.Enhanced Device Performance Optimization: MEU provides insights into device health and performance, enabling MDM admins to identify and address performance bottlenecks or potential hardware issues.Simplified Troubleshooting: When issues arise, MEU serves as a valuable troubleshooting tool, guiding MDM adminsto the root cause of the problem and facilitating expeditious resolution.Compliance Assurance: MEU ensures compliance with Apple's security and deployment guidelines, safeguarding your organization's data and infrastructure.Comprehensive Reporting: MEU generates detailed reports that provide a comprehensive overview of device health, network configuration, and security posture, empowering IT teams to make informed decisions.What is the Mac Evaluation Utility?While initially designed for Mac devices, the Mac Evaluation Utility (MEU) extends its evaluation capabilities to other Apple devices. To utilize MEU, you'll need to install it on representative Mac endpoints within your network. These representative devices should share similar configurations and network segments with the devices you intend to evaluate. If your organization spans multiple locations or has distinct network configurations, consider installing MEU on separate instances for each environment. Alternatively, you can install MEU on a single laptop and take it to each location individually for evaluation purposes.\nIf your organization already has a set of dedicated test devices, deploy MEU on those devices. Running MEU on two or three devices within the same area can provide a more comprehensive overview of your network's performance. However, avoid generating reports from numerous devices as analyzing the sheer volume of results may not be practical.\nHow to use it?To utilize the Mac Evaluation Utility (MEU), you can simply click the \"Play\" button after installation. If you prefer a more targeted assessment, you can first review the list of available tests and select only the ones you deem relevant. By selecting a specific test, you can view a detailed description of its purpose and, in some cases, the actual shell commands used to execute the test.\nOnce you've initiated the evaluation by clicking \"Play,\" MEU will swiftly gather and analyze the results, taking approximately a minute to generate a comprehensive report. The report's \"Overview\" tab provides a high-level summary of the evaluation's findings, categorized into broad areas of concern.\nReport overviewThe Mac Evaluation Utility (MEU) provides a comprehensive assessment of your Apple device environment, enabling you to identify potential issues and make informed decisions regarding device deployments and troubleshooting. It categorizes results into three levels: green check marks for passing tests, yellow warnings for potential issues, and red icons for critical blockers.\nWhile warnings may not necessarily indicate immediate problems, they warrant further investigation to ensure optimal device performance and management. Pay close attention to the Mac Management and Security Warnings, as they directly impact device security and connectivity.\nMEU Result\nFor each result, MEU provides detailed information, including the test type, status, observations, test description, and suggested next steps. However, it's essential to consider the context of your environment and prioritize issues based on your specific needs.\nMEU generates reports that can be easily accessed, renamed, deleted, exported in various formats, or organized into collections for future reference. Its free, fast, and user-friendly nature makes it an indispensable tool for Apple administrators.\nConclusionIn conclusion, the Mac Evaluation Utility (MEU) is a valuable tool for any Apple administrator looking to ensure the smooth deployment and optimal performance of their devices. Its comprehensive assessment capabilities, quick results, and intuitive interface make it an indispensable resource for managing your Apple device environment. By proactively identifying and addressing potential issues, MEU helps you streamline deployment processes, enhance device security, and ensure a seamless user experience for your organization. With its free availability, MEU is an investment that will pay dividends in the long run.\n","externalUrl":null,"permalink":"/posts/uncover-the-secrets-of-appleseed-part-iii-mastering-the-tools/","section":"Posts","summary":"Picture this: you're an MDM admin tasked with spearheading the deployment of Apple devices across your organization.","title":"Uncover the Secrets of AppleSeed: Part III - Mastering the Tools","type":"posts"},{"content":"The Apple Device Enrollment (ADE) token, also recognized as an MDM server token, is a key element in ensuring secure communication between Apple Business or School Manager and a Mobile Device Management (MDM) server, such as Microsoft Intune. It is important to remember that this token has a lifespan of just one year, necessitating the upload of a new token to maintain access to Apple Device Enrollment services after this period.\nThe functionality of the Device Enrollment Program (DEP) account, configuration profiles, device enrollment, and sync options depend on the active status of this token. When the token nears its expiry, a warning banner will be displayed in the Intune admin center to alert Intune admins.\nHowever, missing these renewal deadlines can lead to significant operational disruptions. To prevent this, there are several strategies available to automate the token renewal process. For example:\nUpload the token file in ServiceNow so that automated tasks are created and assigned to the concerned team before the token expiry.Create a Power Automate (Flow) to remind about token expiryCreate a Logic App to remind about token expiry I am using Logic App to create a quick flow to get reminders about the token expiry and the design is as below:\nConclusion:This quick tip should assist and alleviate any concerns about forgetting token renewal dates in the future. ","externalUrl":null,"permalink":"/posts/create-a-logic/","section":"Posts","summary":"The Apple Device Enrollment (ADE) token, also recognized as an MDM server token, is a key element in ensuring secure communication between Apple Business or School Manager and a Mobile Device Management (MDM) server, such as Microsoft Intune.","title":"Use Logic App to Get Notified of ADE Token Renewal","type":"posts"},{"content":"ContentFiltering (CF) allows you to restrict access to specific websites for iPhone, iPad, and Mac users who are enrolled in a mobile device management (MDM) solution. You can use the WebContentFilter payload to specify which websites the device can access. You can automatically filter the content and then allow or deny access to specific websites. You can also use this to configure a device to view only specific websites and create bookmarks for those websites.\n","externalUrl":null,"permalink":"/posts/web-content-filtering/","section":"Posts","summary":"ContentFiltering (CF) allows you to restrict access to specific websites for iPhone, iPad, and Mac users who are enrolled in a mobile device management (MDM) solution.","title":"WebContentFilter: The payload to keep your users \u0026 devices secure!","type":"posts"},{"content":" In my previous post \u0026#8211; Android Enterprise Device Reboots On Its Own!, we discussed the weird issue with Android devices rebooting randomly. However, there is more surprise; continue reading further to find the root cause for your devices going spooky!\nInitial Root Cause As we discussed previously, a few applications were crashing, causing the device to reboot. On a detailed analysis of the logs, we found \u0026#8220;mainline_update\u0026#8221; as the reboot reason. This \u0026#8220;mainline_update\u0026#8221; is a request for a reboot due to an update of the Google main line, which is triggered by \u0026#8220;vending(Play Store)\u0026#8221; when there is a pkg to update. This fixed the problem initially for us, but again after a few weeks, the Samsung phones continued to restart on their own!\u0026nbsp;\nSeriously???Again?\nLet\u0026#8217;s Dig It Out Alright, something is forcing this reboot, and the only way to find it is to wait for the device to reboot and capture the logs. So wait for a phone to reboot\u0026#8230;.⏱⏰⌚⏱\nLuckily one of the Samsung phones rebooted while I was trying out something on it.\u0026nbsp;And the time starts now!\u0026nbsp;⌛⏳\u0026nbsp;\nYou have only 15 minutes to capture the dumpstate logs after a device has restarted. Below are the steps to collect the logs:\n\u0026nbsp;dumpstate Logs:\n1. In the Phone Application, enter *#9900#\n2. Set the Debug Level to Mid.\n3. Wait for the device to restart.\n4. Open the app you want to debug and reproduce your issue.\n5. After reproducing your issue, enter *#9900# again in the Phone Application\n6. Select Run dumpstate/logcat\n7. Select Copy to sd card Navigate to the log directory created on the device using\u0026nbsp;the My Files app or a Windows PC with a USB cable connection.\n8.\u0026nbsp;After you have finished, follow steps 1-3 again, delete dumpstate/logcat and return the Debug Level to low.\nADB Logs:\nStep 1: Enable developer options on the Android device:\n1. Go to Settings -\u0026gt;\u0026nbsp;About phone.\n2. Tap the Build number button\u0026nbsp;seven (7) times.\n3. Return to the previous screen to find Developer Options at the bottom. The Developer Options screen might be located or named differently on some devices.\n4. Open the\u0026nbsp;Developer Options\u0026nbsp;page and scroll until you find USB Debugging and toggle it Enabled.\n5. Once complete, connect a USB cable from your PC to the device. If this is the first time the device has been connected, a popup will appear asking if it’s\u0026nbsp;OK\u0026nbsp;to allow debugging. Select\u0026nbsp;Allow\u0026nbsp;and select the box to\u0026nbsp;Always allow.\n6. This will enable a connection between your computer and the connected Android device.\nStep 2: Collect the ADB log through a windows machine:\n1. Navigate to\u0026nbsp;https://developer.android.com/studio/releases/platform-tools#downloads.\n2. Select Download SDK platform -\u0026gt;\u0026nbsp;Tools for Windows.\n3.\u0026nbsp;Unzip\u0026nbsp;the downloaded package.\n4. Open a\u0026nbsp;Command Prompt as administrator\u0026nbsp;(Run as administrator).\n5. Type cd \u0026#8220;\u0026lt;location of unzipped package\u0026gt;.\u0026#8221; It should look something like this:\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;cd \u0026#8220;C:\\Firefox\\Other\\platform-tools_r30.0.5-windows\\platform-tools\u0026#8221;\n6. Run the following command in the ADB console to enable verbose logging (single line):\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;adb logcat -G 32M; adb shell setprop persist.log.tag.dpcsupport VERBOSE; adb shell\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;setprop persist.log.tag.clouddpc VERBOSE; adb shell setprop persist.log.tag.Finsky\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;VERBOSE; adb shell setprop persist.log.tag.Auth VERBOSE; adb shell setprop\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;persist.log.tag.Volley VERBOSE; adb shell setprop persist.log.tag.PackageManager\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;VERBOSE;\n7. adb devices \u0026lt;\u0026#8212;-\u0026nbsp;Copy the device ID.\n8. Run adb -s \u0026#8220;\u0026lt;paste device id\u0026gt;” bugreport \u0026nbsp;\u0026lt;path for copying the bug report on your PC\u0026gt;. It should look something like this:\n\u0026nbsp;\u0026nbsp;adb -s abc123xyz bugreport E:\\bugreport\nThe first step in the troubleshooting was to check for the reason for the device reboot. This time the dumpstate logs had some interesting error messages, but none of them was clear enough to state the reason for the reboot: 2. We know that some application or service is crashing and eventually rebooting the\u0026nbsp;phone. So we have to find that service that crashes with the error code\u0026nbsp;\u0026#8220;debug0x494d\u0026#8221; or \u0026#8220;enterprise\u0026#8220;.\n3. We now know the error code, boot reason, and the entire sequence of steps when the\u0026nbsp;service crashes. But what is causing is still not known. When looking for the debug logs, I\u0026nbsp;\u0026nbsp;was able to find that the user toggled the\u0026nbsp;flight mode, and then it started crashing:\n4. I thought, \u0026#8220;Seriously???\u0026#8221; can Wi-Fi cause the device to reboot?\u0026nbsp;\nBut when I checked another device\u0026#8217;s log, it was the same. So it was evident that it is random behavior that when the device(s) tries to change the Wi-Fi connection, it goes through a\u0026nbsp;SOFT REBOOT.\nWhen I researched further into this, I found out that it has been a problem with Android 12 since starting, and a few patches were released as OTA, but it didn\u0026#8217;t help.\u0026nbsp;\nWhat confirms this more is the recent release notes of Android 13, which confirm that this was a problem and has been fixed in the new release.\nPlease try to find the logs in your Android devices, and please let me know if you also find the same.\u0026nbsp;\n","externalUrl":null,"permalink":"/posts/what-causes-an-android-device-to-reboot-on-its-own-suddenly-2/","section":"Posts","summary":"In my previous post \u0026#8211; Android Enterprise Device Reboots On Its Own!","title":"What Causes an Android Device To Reboot On It's Own Suddenly?","type":"posts"},{"content":" Scenarios Have you been in situations where you need to give demos on different Android OS or models and do not have actual hardware running Android to show different scenarios programs? The Android emulator provides almost all the capabilities of a real Android device. You can simulate incoming phone calls and text messages, specify the device’s location, simulate different network speeds, simulate rotation and other hardware sensors, access the Google Play Store, and much more.\nOverview Android is an open-source operating system for mobile devices and a corresponding project led by Google. This site and the Android Open Source Project (AOSP) repository offer the information and source code needed to create custom variants of the Android OS, port devices and accessories to the Android platform, and ensure devices meet the compatibility requirements that keep the Android ecosystem a healthy and stable environment for millions of users. Sounds complicated?\nSimply put, AOSP is an open-source operating system development project maintained by Google. Since it’s open-source, anyone can review and contribute code and fixes to the project repository. As an open-source project, Android seeks to avoid any single point of failure where one participant in the industry might limit or regulate the innovations of any other participant. To achieve this, Android is a complete, high-quality operating system for consumer goods, complete with customisable source code that can be ported to almost any device and openly available documentation.\nWhere is AOSP used? Any smartphone company that manufactures Android devices uses the Android Open Source Project. AOSP code is used by almost everyone who makes a smartphone. Although each Android version differs in how it looks, feels, and performs, they are all built using the same body of code known as the Android Open Source Project (AOSP). Every year, Google updates the Android Open Source Project repository with new codebase versions.\nDevelopment of AOSP Android is developed by Google until the latest changes and updates are ready to be released. At this point, the source code is made available to the Android Open Source Project (AOSP), an open-source initiative led by Google. The first source code release happened as part of the initial release in 2007. All releases are under the Apache License.\nThe AOSP code can be found with minimal modifications on select devices, mainly the former Nexus and the current Android One series. However, most original equipment manufacturers (OEMs) customize the source code to run on their hardware.\nAndroid’s source code does not contain the device drivers, often proprietary, that are needed for certain hardware components and does not contain the source code of Google Play Services, which many apps depend on. As a result, most Android devices, including Google’s own, ship with a combination of free and open source and proprietary software, with the software required for accessing Google services falling into the latter category. In response to this, some projects build complete operating systems based on AOSP as free software, the first being CyanogenMod.\nThe Android Operating System (https://source.android.com/source/) Configure Intune enrollment for Android (AOSP) corporate-owned devices Intune offers an Android (AOSP) device management solution for corporate-owned Android devices that are:\nNot integrated with Google Mobile Services. Intended to be shared by more than one user. Used to accomplish a specific set of tasks at work. In this blog post, I will use Android Studio to create an AVD and will use it to enrol it as an AOSP dedicated device.\nCreate an enrollment profile Sign in to the Microsoft Endpoint Manager admin center and select Devices \u003e Android \u003e Android enrollment \u003e Corporate-owned, user-associated devices. Select Create and fill out the required fields. Name: Type a name for the profile. Description: Add a profile description (optional). Token expiration date: The date when the token expires. Intune enforces a maximum of 90 days. SSID: Identifies the network that the device will connect to. Hidden Network: Choose whether this is a hidden network. By default, this setting is disabled. Wi-Fi Type: Select the type of authentication needed for this network. Select Next, and optionally, select scope tags. Select Next. Review your profile details and then select Create to save the profile. Access enrollment token After creating a profile, Intune generates a token needed for enrollment. To access the token:\nCreate a device group You can create assigned device groups or dynamic device groups in Intune. Complete the following steps to create a dynamic Azure AD device group for devices enrolled with an Android (AOSP) corporate-owned, userless enrollment profile.\nSign in to the Microsoft Endpoint Manager admin center and choose Groups \u003e All groups \u003e New group. In the Group blade, fill out the required fields as follows: Group type: Security Group name: Type an intuitive name Membership type: Dynamic device Click Add dynamic query. In the Dynamic membership rules blade, fill out the fields as follows: Add dynamic membership rule: Simple rule Add devices where: enrollmentProfileName In the middle box, choose Equals. In the last field, enter the enrollment profile name that you created earlier. Create a dynamic membership query\nCreate Android Virtual Devices An Android Virtual Device (AVD) is a configuration that defines the characteristics of an Android phone, tablet, Wear OS, Android TV, or Automotive OS device that you want to simulate in the Android Emulator. The Device Manager is a tool you can launch from Android Studio that helps you create and manage AVDs. To create an AVD, you need Android Studio. Follow the steps to install and configure Android Studio:\nDownload and Install Android Studio Visit the official Android Studio website in your web browser. Click on the “Download Android Studio” option and accept the EULA. Double-click on the downloaded “android-studio-2022.1.1.19-windows” file. “Android Studio Setup” will appear on the screen and click “Next” to proceed. Select the components you want to install and click on the “Next” button. Browse the location where you want to install the Android Studio and click “Next” to proceed. Choose a start menu folder for the “Android Studio” shortcut and click the “Install” button to proceed. Once the installation is completed, click on the “Next” button. Click “Finish” to proceed. “Android Studio Setup Wizard” will appear on the screen with the welcome wizard. Click on the “Next” button. Select (check) the “Standard” option. It will install the most common settings and options for you. Click “Next” to proceed. Now, select the user interface theme. Then, click on the “Next” button. Click “Finish” to download all the SDK components. The downloading and installation process of components gets started. After downloading all the necessary components, click on the “Finish” button. Create Android Virtual Devices From the Android Studio, select Tools \u003e Device Manager. Click Create Device. Select WearOS from the Hardware window and click Next. Select the system image for a particular API level and click Next. Verify Configuration window appears. Ensure the target Operating System selected includes Google Play. Select Download to begin downloading of image file Once the download has been completed, select the image and click Next. Configure Android Virtual Device (AVD) Click Finish. Click on the “Play” button to start the AVD. Voila. It’s an Android Watch! That’s all for now! In today’s post, we learned about AOSP and its development and looked at how to set up and configure Android Studio to emulate Android devices. I’ll next explain how to set up an Android emulator for macOS. In the following two posts, we’ll continue the evaluation of Android Virtual Devices (AVD) and then with a demo of enrolling them in Microsoft Intune.\nThank you for reading, and keep watching for those upcoming posts!\n","externalUrl":null,"permalink":"/posts/what-is-aosp-how-to-use-android-emulators-to-configure-manage-enrol-avds-in-intune-2/","section":"Posts","summary":"Scenarios Have you been in situations where you need to give demos on different Android OS or models and do not have actual hardware running Android to show different scenarios programs?","title":"What is AOSP? How to use Android Emulators to configure, manage \u0026 enroll AVDs in Intune? - Part1","type":"posts"},{"content":"Mobile Application Management (MAM) allows you to manage and protect your organization’s data within an application. MAM protects the data within the specific application and enables you to remotely erase the data of the corporate-owned apps from a mobile device. The rest of the device remains unaffected, including all personally owned data. Before proceeding further, the key here is to understand the difference between MDM \u0026 MAM.\nMobile Device Management, commonly referred to as MDM, is a way of securing the entire mobile device, whereas Mobile Application Management (MAM) secures the applications on those devices. When talking about MAM, the device may not be required to enroll. Line of Business apps can be made available in enterprise app stores, and users can install and download them on their personal devices. Apps run in secure containers (look \u0026 feel may differ based on hardware) to keep personal and corporate data separate.\nThere is no hard and fast rule for configuring App Protection Policies (APP) as it depends on you and how restrictive you want your policies to be for BYOD so that your corporate data is not compromised.\nYou can deploy MAM-enabled apps on the following platforms:\nAndroidiOS/iPadOSWindows Why do I need MAM-enabled Apps? Mobile Application Management provides much more control to the organization with secure access to enterprise apps by separating them from personal apps along with restrictions such as copying or transferring app data from a work profile to a personal profile and many more such restrictions.\nBenefits of using MAM:\nControlled app deploymentManaged appControlled \u0026 secure distributionEnhanced security poster Prerequisites for the App Wrapping: Before you run the App Wrapping Tool, you need to fulfill some general prerequisites:\nDownload the Microsoft Intune App Wrapping Tool for iOS from GitHub.A macOS computer that has the Xcode toolset version 11 or later installed.The input iOS app must be developed and signed by your company or an independent software vendor (ISV).The input app file must have the extension .ipa or .app.The input app must be compiled for iOS 12.2 or later.The input app should not be encrypted.The input app should not have extended file attributes.The input app must have the entitlements plist before it can be wrapped. Entitlements give the app additional permissions and capabilities. In my previous blog post, I explained all the steps required for code signing the app as they will be the prerequisites for wrapping the apps. Download \u0026 Install App Wrapping Tool Microsoft Intune App Wrapping Tool for iOS helps you modify the behavior of your existing line-of-business (LOB) apps for iOS devices. It helps you manage certain app features without writing the code again.\n1. Download the App Wrapping Tool files from GitHub to a macOS computer.\n2. Double-click Microsoft Intune Application Restrictions Packager for iOS.dmg. 3. Read \u0026 Accept the End User License Agreement (EULA).\nWrap the App 1. Launch Terminal and run the following command: /Volumes/IntuneMAMAppPackager/IntuneMAMPackager/Contents/MacOS/IntuneMAMPackager -i // -o // -p / -c \"\" -v true\nThe IntuneMAMPackager tool has many optional parameters you may need to add to wrap your application. Details are documented here – Command-line parameters.\nPost-wrapping After the wrapping process, the message “The application was successfully packaged” is displayed.\nThe wrapped app will be saved in the output folder specified in the command. Now, you can upload the app to the Intune portal and assign it to the required groups.\nAlthough the app was uploaded as LoB, notice that the app is now “MAM Enabled“, which means that now you can assign App Protection Policies to this app.\nAs the app is now a managed app, you can configure App Protection Policy settings to:\nProtect your corporate data while leaving personal data untouched in the app.Restricting data transfer and copy-and-paste functionsEncrypting corporate dataConfiguring corporate web links to force open inside the managed browser e.g., Microsoft EdgeEnforcing access requirements to access corporate dataEnforcing conditional launch behaviors to protect the corporate dataApplying data loss prevention policies without managing the user’s deviceEnabling app protection without requiring enrollmentEnabling app protection on devices managed with third-party Unified Endpoint Management Solutions That’s all from my end, and I hope this helps you to protect your corporate data more efficiently and be proud of the feeling of code signing the iOS apps 😁😎😃\n","externalUrl":null,"permalink":"/posts/wrap-me-up-2/","section":"Posts","summary":"Mobile Application Management (MAM) allows you to manage and protect your organization’s data within an application.","title":"Wrap Me UP!","type":"posts"},{"content":"This year's Apple Worldwide Developers Conference (WWDC2023) was marked by numerous groundbreaking announcements. Yet, amid the buzz about the new Apple Vision Pro, iOS/iPad OS 17, macOS Sonoma, and app updates, Apple's leap into next-level device management is an understatement. A significant shift from traditional management paradigms, this advancement is set to redefine the way we interact with and manage our Apple devices.\nI have divided this into three parts for simplicity and better understanding. In this first part, I have covered the major announcements with macOS \u0026amp; iOS/iPadOS management.\nApple's Device Management Evolution Apple has constantly improved its device management approach over the past years. The tech giant has constantly streamlined the user experience while granting more control over individual devices, from iCloud backups to Family Sharing. The adjustments made public at WWDC 2023, however, go beyond that; they take a comprehensive, user-centered strategy that seamlessly ties into Apple's ecosystem.\nHere is a summary of the device management-related WWDC announcements made by Apple. In the next weeks and months, I'll be delving deeper into many of these subjects.\nAwesome New Device Management Features in macOS 14 Apple's new features aim to streamline user enrollment and setup while maintaining robust security measures. This year, Apple has refined the Automated Device Enrollment process. Beginning with FileVault, macOS Sonoma will now allow MDM to necessitate FileVault activation during the Setup Assistant phase. As an Intune admin, we will have the option to display the FileVault recovery key during Setup Assistant or alternatively escrow it to Intune.\nMoreover, as an Intune admin, you will now be able to enforce the device to be on a specific operating system version in order to enroll. This will ensure that devices are using the required OS version before being operational. If a higher OS version is required, users will be guided through an automatic update process for their Mac, which will then restart automatically. After completion, the Mac returns to the Setup Assistant, and users can conclude the enrollment and setup process.\nApple has also implemented safeguards to confirm that the user completes the Automated Device Enrollment as soon as network connectivity is established. This allows you to postpone enrollment by 8 hours with a “not now” capability.\nComing to the most awaited feature - Platform Single Sign-On (SSO), Apple unveiled several exciting enhancements for macOS 14 to platform SSO, such as:\nThe introduction of a fresh menu item within System Settings. This enables users to register their device or user account for utilization with SSO. The capability for users, with accounts managed by an organizational identity provider or smart cards, to create local user accounts.Refreshing group memberships at the moment of authentication with the identity provider. The ability to fulfill authorization prompts using Identity Provider (IdP) user accounts that don't exist locally. Some other impressive features announced were:\nPassword policies can now be delivered as regular expressions if needed and password change notification prompts occur at every logon. System Settings management can now prevent several settings modifications at a granular level. Managed Device Attestation is NOW on macOS Below is the snapshot of all the changes coming to macOS management.\nThe Latest Developments in iOS/iPadOS Management For iOS \u0026amp; iPadOS - \"Return to Service\" is one of the major announcements and it will definitely be a game changer. Let's understand more about this.\nIn the case of supervised device deployment scenarios, devices are frequently passed from one user to another. Although remote device wipe is possible, re-engagement of these devices has always necessitated a manual process, including physical interaction with the device and navigation through the Setup Assistant.\nThe introduction of a new feature called Return to Service for iOS and iPadOS, will eliminate this extra manual step. Return to Service Here's how it operates: From Intune, you send an Erase command to the device. The command includes additional information which allows the device to reset, securely erase all data, connect to Wi-Fi, enroll into MDM, and get back to the Home Screen, ready to be used.\n\u0026lt;?xml version=\"1.0\" encoding=\"UTF-8\"?\u0026gt; \u0026lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"\u0026gt; \u0026lt;plist version=\"1.0\"\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;Command\u0026lt;/key\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;DisallowProximitySetup\u0026lt;/key\u0026gt; \u0026lt;false/\u0026gt; \u0026lt;key\u0026gt;PreserveDataPlan\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;RequestType\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;EraseDevice\u0026lt;/string\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;key\u0026gt;CommandUUID\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;0001_EraseDevice\u0026lt;/string\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/plist\u0026gt; To implement this behavior, an additional dictionary can be added to the EraseDevice command. This dictionary needs to include the profile of a Wi-Fi configuration to allow the device to connect, once erased.\nEraseDeviceCommand.Command.ReturnToService -\u0026gt; Enabled - boolean -\u0026gt; MDMProfileData - data -\u0026gt; MDMProfileData - data As an alternative, the device can also connect to the Internet by different means, like a tethered connection. Secondly, the dictionary should include a profile with the necessary enrollment information.\nOther features are:\nShared iPads will now support “AwaitUserConfiguration” key.SkipLanguageAndLocaleSetupforNewUsers during the setup wizardConfiguring a quote for temp users on the Shared iPad Snapshot of upcoming changes to iOS \u0026amp; iPadOS\nTo be continued... It's indeed a challenge to postpone discussing other thrilling topics, like Apple Watch management, declarative device management, managed Apple IDs, and passkeys. However, the sheer volume of exhilarating content warrants this delay.\nTill then happy learning. ","externalUrl":null,"permalink":"/posts/wwdc-2023-apples-leap-into-next-level-device-management-part-1/","section":"Posts","summary":"This year's Apple Worldwide Developers Conference (WWDC2023) was marked by numerous groundbreaking announcements.","title":"WWDC 2023: Apple's Leap into Next-Level Device Management - Part 1","type":"posts"},{"content":" Overview You can now configure your iOS devices to be silently onboarded and activated on Microsoft Defender for Endpoint without requiring interaction from the end user. In this flow, you will create a few configuration profiles, and the user will be notified of the installation. Defender for Endpoint is automatically installed and activated without the user needing to open the app. Follow the steps below to set up zero-touch or silent deployment and activation of Defender for Endpoint on enrolled iOS devices:\nPre-requisites Access to Intune portal Access to Apple Business Manager Devices are enrolled in Intune Defender for Endpoint license is assigned to the user Deploy the App You have two options for deploying MDE app to your user\u0026#8217;s devices:\nApp Store App VPP App Deploy Defender as App Store App In\u0026nbsp;Intune portal, go to\u0026nbsp;Apps\u0026nbsp;\u0026gt;\u0026nbsp;iOS/iPadOS\u0026nbsp;\u0026gt;\u0026nbsp;Add\u0026nbsp;\u0026gt;\u0026nbsp;iOS store app\u0026nbsp;and click\u0026nbsp;Select. Select the app as public store app Click on Search the App Store on the Add app page and type\u0026nbsp;Microsoft Defender\u0026nbsp;in the search bar. In the search results section, click on\u0026nbsp;Microsoft Defender\u0026nbsp;and click\u0026nbsp;Select. Select\u0026nbsp;iOS 12.0\u0026nbsp;as the Minimum operating system. Review the rest of the information about the app and click\u0026nbsp;Next. app info In the\u0026nbsp;Assignments\u0026nbsp;section, go to the\u0026nbsp;Required\u0026nbsp;section and select\u0026nbsp;Add group. You can then choose the user group(s) you would like to target Defender for Endpoint on the iOS app. Click\u0026nbsp;Select\u0026nbsp;and then\u0026nbsp;Next. Deploy Defender as VPP App (Recommended way) Log in to Apple Business Manager and click\u0026nbsp;Apps and Books, then search for \u0026#8220;Microsoft defender\u0026#8221; in the app or book in the search field. Add app in ABM \u0026nbsp;Select the app or book in the search results list that you want to purchase. Select the\u0026nbsp;location\u0026nbsp;where the app or book licenses will be initially assigned. Enter the number of licenses, and if necessary, change the payment method, then click\u0026nbsp;Buy Availability of app licenses depends on the amount purchased. If you purchased:\n5000 licenses or fewer, they are immediately processed 5001 to 19,999 licenses, they are processed daily after 1:00 p.m., Pacific time 20,000 licenses or more, they are processed daily after 4:00 p.m., Pacific time Force sync your VPP token in Intune to immediately sync for processing the purchase. Log in to\u0026nbsp;Intune portal.\u0026nbsp; Select\u0026nbsp;Apps\u0026nbsp;\u0026gt;\u0026nbsp;All apps. On the list of apps pane, choose the app you want to assign and then choose\u0026nbsp;Properties\u0026nbsp; On the\u0026nbsp;Assignments\u0026nbsp;tab, choose whether the app will be\u0026nbsp;Required\u0026nbsp;or\u0026nbsp;Available for enrolled devices. Assing it to\u0026nbsp;the\u0026nbsp;groups you want to assign the app. Configure Supervised Mode via Intune For configuring the supervised mode for Defender for Endpoint app, we would need an app configuration policy and device configuration profile. Follow the below steps to configure them:\nApp Configuration Policy Sign in to the\u0026nbsp;Intune portal\u0026nbsp;and go to\u0026nbsp;Apps\u0026nbsp;\u0026gt;\u0026nbsp;App configuration policies\u0026nbsp;\u0026gt;\u0026nbsp;Add. Select\u0026nbsp;Managed devices. App configuration policy In the\u0026nbsp;Create app configuration policy\u0026nbsp;page, provide the following information: Policy Name Platform: Select iOS/iPadOS Targeted app: Select\u0026nbsp;Microsoft Defender for Endpoint\u0026nbsp;from the list add the app In the next screen, select\u0026nbsp;Use configuration designer\u0026nbsp;as the format. Specify the following properties: Configuration Key:\u0026nbsp;issupervised Value type: String Configuration Value:\u0026nbsp;{{issupervised}} Assign the policy to the same group to which the app is assigned. Device Configuration Profile This profile is for enabling enhanced Anti-phishing capabilities. Follow the steps below:\nDownload the config profile from\u0026nbsp;https://aka.ms/mdeiosprofilesupervised. Navigate to\u0026nbsp;Devices\u0026nbsp;\u0026gt;\u0026nbsp;iOS/iPadOS\u0026nbsp;\u0026gt;\u0026nbsp;Configuration profiles\u0026nbsp;\u0026gt;\u0026nbsp;Create Profile Select\u0026nbsp;Profile Type\u0026nbsp;\u0026gt;\u0026nbsp;Templates\u0026nbsp;and\u0026nbsp;Template name\u0026nbsp;\u0026gt;\u0026nbsp;Custom Provide the name of the profile. When prompted to import a Configuration profile file, select the one downloaded from the previous step. Assign the policy to the same group to which APP is assigned. Zero-touch Onboarding \u0026amp; Activation In\u0026nbsp;Intune portal, go to\u0026nbsp;Devices\u0026nbsp;\u0026gt;\u0026nbsp;Configuration Profiles\u0026nbsp;\u0026gt;\u0026nbsp;Create Profile. Choose\u0026nbsp;Platform\u0026nbsp;as\u0026nbsp;iOS/iPadOS\u0026nbsp;and\u0026nbsp;Profile type\u0026nbsp;as\u0026nbsp;VPN. Select\u0026nbsp;Create. Type a name for the profile and select\u0026nbsp;Next. Select\u0026nbsp;Custom VPN\u0026nbsp;for Connection Type and in the\u0026nbsp;Base VPN\u0026nbsp;section, enter the following: Connection Name = Microsoft Defender for Endpoint VPN server address = 127.0.0.1 Auth method = \u0026#8220;Username and password\u0026#8221; Split Tunneling = Disable VPN identifier = com.microsoft.scmx In the key-value pairs, enter the key\u0026nbsp;SilentOnboard\u0026nbsp;and set the value to\u0026nbsp;True. Type of Automatic VPN = On-demand VPN Select\u0026nbsp;Add\u0026nbsp;for\u0026nbsp;On Demand Rules\u0026nbsp;and select\u0026nbsp;I want to do the following = Connect VPN,\u0026nbsp;I want to restrict to = All domains. The configurations for the custom vpn profile are case sensitive. Any slight mistake will disable auto-activation of MDE.\nEnd User Experience The VPN configuration profile is pushed to the device as soon as the device is enrolled. Until Microsoft Defender is installed and activated on the device, the connection is just a self-loop.\nYou will see the blue dot on the MDE app icon within a few minutes and a notification in the device\u0026#8217;s notification center that the device has been successfully onboarded to MDE.\nDevice silently onboarded Tap the Defender for Endpoint app icon (MSDefender),\u0026nbsp;and you will notice that the app is activated with web protection auto-enabled.\nWrapping-Up When looking from the end-user perspective, the experience is super cool. No interaction is required, as the onboarding and activation are 100% silent.\nAt the same time, from the administrator\u0026#8217;s perspective, these features give you complete visibility of the device\u0026#8217;s security, and the ease of onboarding devices is also what we have been looking forward from many years. I hope that Android Enterprise will also have the same experience soon.\nRef: App-based deployment for Microsoft Defender for Endpoint on iOS | Microsoft Learn\n","externalUrl":null,"permalink":"/posts/zero-touch-onboarding-activation-of-microsoft-defender-for-endpoint-2/","section":"Posts","summary":"Overview You can now configure your iOS devices to be silently onboarded and activated on Microsoft Defender for Endpoint without requiring interaction from the end user.","title":"Zero Touch Onboarding \u0026 Activation of Microsoft Defender for Endpoint","type":"posts"}]